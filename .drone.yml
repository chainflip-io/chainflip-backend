# Secrets
kind: secret
name: docker_username
get:
  path: repo-secret
  name: docker_username
---
kind: secret
name: docker_password
get:
  path: repo-secret
  name: docker_password
---
kind: secret
name: discord_webhook_id
get:
  path: repo-secret
  name: discord_webhook_id
---
kind: secret
name: discord_webhook_token
get:
  path: repo-secret
  name: discord_webhook_token
---
kind: secret
name: dockerconfigjson
get:
  path: dockerconfigjson
  name: .dockerconfigjson
---
kind: secret
name: drone_token
get:
  path: repo-secret
  name: drone_token
---

# Runs on every PR
kind: pipeline
name: chainflip-backend-checks
type: kubernetes

environment:
  SCCACHE_REDIS: redis://redis-headless:6379/
  SCCACHE_CACHE_SIZE: 14G

steps:
#  Checks the the .drone.yml file is formatted correctly
  - name: lint-drone-yml
    image: ghcr.io/chainflip-io/infrastructure/chainflip-master:latest
    commands:
      - drone lint --trusted

#  Builds the base image for running build jobs
  - name: rust-base
    image: plugins/docker
    settings:
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      repo: ghcr.io/chainflip-io/chainflip-backend/rust-base
      dockerfile: Dockerfile.rust-base
      registry: ghcr.io
      tags: latest
      cache_from: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
    when:
      paths:
        - Dockerfile.rust-base
        - .drone.yml

#  Performs all unit tests
  - name: test-validator-package
    image: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
    commands:
      - cargo test --lib --release
      - if ! sccache -s; then echo 'warning - sccache is unhealthy'; fi

trigger:
  event:
    - pull_request

image_pull_secrets:
  - dockerconfigjson

node_selector:
  type: ci

tolerations:
  - key: "workloadKind"
    operator: "Equal"
    value: "ci"
---
# Runs when PR is merged to main
kind: pipeline
type: kubernetes
name: chainflip-backend

environment:
  SCCACHE_REDIS: redis://redis-headless:6379/
  SCCACHE_CACHE_SIZE: 14G

steps:
#  Builds the base image for running build jobs
  - name: rust-base
    image: plugins/docker
    settings:
      username: &docker_username
        from_secret: docker_username
      password: &docker_password
        from_secret: docker_password
      repo: ghcr.io/chainflip-io/chainflip-backend/rust-base
      dockerfile: Dockerfile.rust-base
      registry: ghcr.io
      tags: latest
      cache_from: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
    when:
      paths:
        - Dockerfile.rust-base
        - .drone.yml

#  Compiles the entire backend
  - name: compile-chainflip-backend
    image: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
    commands:
      - cargo build --release
      - if ! sccache -s; then echo 'warning - sccache is unhealthy'; fi

#  Compiles runs all unit tests
  - name: test-chainflip-backend
    image: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
    commands:
      - cargo test --lib --release
      - if ! sccache -s; then echo 'warning - sccache is unhealthy'; fi

#  Create docker image for state-chain-node
  - name: build-state-chain-node
    image: plugins/docker
    environment:
      SERVICE: state-chain-node
    settings:
      username: *docker_username
      password: *docker_password
      registry: ghcr.io
      repo: ghcr.io/chainflip-io/chainflip-backend/state-chain-node
      cache_from: ghcr.io/chainflip-io/chainflip-backend/state-chain-node:latest
      tags:
        - latest
        - $DRONE_COMMIT_SHA
      build_args_from_env:
        - SERVICE

#  Create docker image for chainflip-engine
  - name: build-chainflip-engine
    image: plugins/docker
    environment:
      SERVICE: chainflip-engine
    settings:
      username: *docker_username
      password: *docker_password
      registry: ghcr.io
      repo: ghcr.io/chainflip-io/chainflip-backend/chainflip-engine
      cache_from: ghcr.io/chainflip-io/chainflip-backend/chainflip-engine:latest
      tags:
        - latest
        - $DRONE_COMMIT_SHA
      build_args_from_env:
        - SERVICE

#  Create docker image for chainflip-engine
  - name: notify
    image: appleboy/drone-discord
    when:
      status:
        - failure
    settings:
      username: Sauron
      webhook_id:
        from_secret: discord_webhook_id
      webhook_token:
        from_secret: discord_webhook_token
      message: |
        ⚠️ Build Failure ⚠️

        The latest `chainflip-backend` compile has failed.
        Logs: {{build.link}}
        Duration: `{{since build.started}}`
        Responsible parties: <@401244824440799233>, <@472886957920485386>, <@464710706567053313>, <@261113437642424320>

# Config
trigger:
  branch:
    - main
  event:
    - push

image_pull_secrets:
  - dockerconfigjson

node_selector:
  type: ci

tolerations:
  - key: "workloadKind"
    operator: "Equal"
    value: "ci"

---
#  Runs all tests at night
kind: pipeline
type: kubernetes
name: chainflip-backend-nightly

environment:
  SCCACHE_REDIS: redis://redis-headless:6379/
  SCCACHE_CACHE_SIZE: 14G

services:
  - image: trufflesuite/ganache-cli:latest
    name: ganache
    ports: [8545]
    entrypoint:
      - "node"
      - "/app/ganache-core.docker.cli.js"
      - "--mnemonic chainflip"
  - image: nats:latest
    ports: [4222,8222]
    name: nats


steps:
  - name: run-tests
    image: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
    commands:
      - cargo test --release

# Config
trigger:
  event:
    - cron
  cron:
    - nightly

image_pull_secrets:
  - dockerconfigjson

node_selector:
  type: ci

tolerations:
  - key: "workloadKind"
    operator: "Equal"
    value: "ci"
