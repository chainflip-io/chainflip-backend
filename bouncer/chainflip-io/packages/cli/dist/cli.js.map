{"version":3,"sources":["../src/cli.ts","../src/commands/cliExecuteSwap.ts","../../shared/src/enums.ts","../../shared/src/guards.ts","../../shared/src/vault/schemas.ts","../../shared/src/parsers.ts","../../shared/src/validation/addressValidation.ts","../../shared/src/bitcoin.ts","../../shared/src/schemas.ts","../../shared/src/abis/factories/ERC20__factory.ts","../../shared/src/abis/factories/StateChainGateway__factory.ts","../../shared/src/abis/factories/Vault__factory.ts","../../shared/src/consts.ts","../../shared/src/contracts.ts","../../shared/src/vault/executeSwap.ts","../src/utils.ts","../src/commands/cliFundStateChainAccount.ts","../../shared/src/stateChainGateway/utils.ts","../../shared/src/stateChainGateway/index.ts","../../shared/src/broker.ts","../../shared/src/strings.ts","../../shared/src/node-apis/redis.ts","../../shared/src/arrays.ts","../src/commands/cliRequestSwapDepositAddress.ts","../src/main.ts"],"names":["yargs","AlchemyProvider","getDefaultProvider","Wallet","arrayToMap","array","Object","fromEntries","map","key","Chains","Assets","ChainflipNetworks","assetChains","ETH","Ethereum","FLIP","USDC","BTC","Bitcoin","DOT","Polkadot","ARBETH","Arbitrum","ARBUSDC","assetDecimals","assetContractIds","chainAssets","chainNativeAssets","chainContractIds","isString","value","isNotNullish","undefined","assert","condition","message","error","Error","stack","replace","isTokenSwap","params","srcAsset","isTokenCall","decodeAddress","z","hexToU8a","u8aToHex","encodeAddress","ethers","isHex","base58Decode","BitcoinAddress","isValidSegwitAddress","address","hrp","exec","decode","prefix","assertArraylikeEqual","a","b","length","i","validateP2PKHOrP2SHAddress","network","decoded","checksum","slice","doubleHash","getBytes","sha256","validateSegwitAddress","startsWith","validateBitcoinAddress","validateBitcoinMainnetAddress","validateBitcoinTestnetAddress","validateBitcoinRegtestAddress","safeStringify","obj","JSON","stringify","toString","errorMap","_issue","context","data","string","number","numericString","regex","hexString","refine","v","test","hexStringWithMaxByteSize","maxByteSize","val","hexStringFromNumber","transform","arg","BigInt","bareHexString","btcAddress","union","DOT_PREFIX","dotAddress","hex","ethereumAddress","isAddress","u64","u128","unsignedInteger","n","chainflipAssetEnum","object","__kind","enum","toUpperCase","transformAsset","asset","chain","chainflipChain","nativeEnum","chainflipAsset","chainflipAssetAndChain","superRefine","ctx","addIssue","code","ZodIssueCode","custom","path","NEVER","chainflipNetwork","swapType","literal","ccmId","type","quoteQuerySchema","destAsset","amount","brokerCommissionBps","Number","optional","ccmMetadataSchema","gasBudget","openSwapDepositChannelSchema","srcChain","destChain","destAddress","ccmMetadata","rest","expectedDepositAmount","bytesToHex","arr","padStart","join","utf8ToHex","str","Buffer","from","eth","ethToEthereum","extend","ethToDot","addr","ethToBtc","erc20Asset","ethToERC20","nativeSwapParamsSchema","flipToEthereumAsset","usdcToEthereumAsset","erc20ToDot","erc20ToBtc","tokenSwapParamsSchema","ccmFlipToEthereumAssset","ccmUsdcToEthereumAsset","tokenCallParamsSchema","nativeCallParamsSchema","executeSwapParamsSchema","Contract","Interface","_abi","inputs","internalType","name","outputs","stateMutability","ERC20__factory","abi","createInterface","connect","runner","anonymous","indexed","components","StateChainGateway__factory","Vault__factory","POOLS_NETWORK_FEE_HUNDREDTH_PIPS","backspin","sisyphos","perseverance","mainnet","GOERLI_USDC_CONTRACT_ADDRESS","ADDRESSES","FLIP_CONTRACT_ADDRESS","USDC_CONTRACT_ADDRESS","VAULT_CONTRACT_ADDRESS","STATE_CHAIN_GATEWAY_ADDRESS","extractOverrides","transactionOverrides","wait","ethersOverrides","getTokenContractAddress","getStateChainGatewayContractAddress","checkAllowance","spenderAddress","erc20Address","signer","erc20","signerAddress","getAddress","allowance","isAllowable","getVaultManagerContractAddress","swapNative","networkOpts","txOpts","vaultContractAddress","vault","transaction","xSwapNative","swapToken","srcTokenContractAddress","xSwapToken","callNative","xCallNative","callToken","xCallToken","executeSwap","parsedParams","parse","askForPrivateKey","rl","input","process","stdin","output","stdout","question","close","getEthNetwork","opts","ethNetwork","cliNetworks","values","yargsOptions","choices","demandOption","describe","default","args","privateKey","walletPrivateKey","wallet","env","ALCHEMY_KEY","receipt","console","log","hash","cliExecuteSwap","getStateChainGateway","stateChainGatewayContractAddress","fundStateChainAccount","accountId","flipContractAddress","stateChainGateway","axios","camelToSnakeCase","letter","toLowerCase","transformObjToSnakeCase","newObj","prototype","hasOwnProperty","call","submitAddress","rpcResult","unknown","result","requestValidators","requestSwapDepositAddress","tuple","merge","cfParameters","c","d","e","filter","responseValidators","issued_block","channel_id","expiry_block","int","safe","positive","source_chain_expiry_block","issuedBlock","channelId","sourceChainExpiryBlock","makeRpcRequest","url","method","res","post","jsonrpc","id","swapRequest","commissionBps","Redis","sorter","dir","jsonString","depositSchema","pipe","deposit_chain_block_height","sortDepositAscending","broadcastParsers","tx_out_id","signature","k_times_g_address","s","mempoolTransaction","confirmations","tx_hash","stateChainManagerContractAddress","flipTokenContractAddress","srcAccountId","cliFundStateChainAccount","broker","brokerUrl","cliRequestSwapDepositAddress","scriptName","usage","command","cliExecuteSwapOptions","cliFundStateChainAccountOptions","cliRequestSwapDepositAddressOptions","wrap","strict","help","cli","argv"],"mappings":"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;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS;MACP;QACES,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;;AAGK,IAAM2D,6BAAN,MAAMA;EA/pBb,OA+pBaA;;;EACX,OAAgBP,MAAMP;EACtB,OAAOQ,kBAA8C;AACnD,WAAO,IAAIT,WAAUC,KAAAA;EACvB;EACA,OAAOS,QACL1I,SACA2I,QACmB;AACnB,WAAO,IAAIZ,UAAS/H,SAASiI,OAAMU,MAAAA;EACrC;AACF;;;ACtqBA,SAASZ,YAAAA,WAAUC,aAAAA,kBAAsC;AAGzD,IAAMC,QAAO;EACX;IACEC,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACEwD,WAAW;IACXV,QAAQ;MACN;QACEW,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACEyD,SAAS;QACTV,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNhD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS;MACP;QACEF,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFkD,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ,CAAA;IACRE,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE0D,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEY,YAAY;UACV;YACEX,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;UACA;YACE+C,cAAc;YACdC,MAAM;YACNhD,MAAM;UACR;;QAEF+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;;IAEFgD,MAAM;IACNC,SAAS,CAAA;IACTC,iBAAiB;IACjBlD,MAAM;EACR;EACA;IACE8C,QAAQ;MACN;QACEC,cAAc;QACdC,MAAM;QACNhD,MAAM;MACR;MACA;QACE+C,cAAc;QACd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","sourcesContent":["import yargs from 'yargs/yargs';\nimport cliExecuteSwap, {\n  yargsOptions as cliExecuteSwapOptions,\n} from './commands/cliExecuteSwap';\nimport cliFundStateChainAccount, {\n  yargsOptions as cliFundStateChainAccountOptions,\n} from './commands/cliFundStateChainAccount';\nimport cliRequestSwapDepositAddress, {\n  yargsOptions as cliRequestSwapDepositAddressOptions,\n} from './commands/cliRequestSwapDepositAddress';\n\nexport default async function cli(args: string[]) {\n  return yargs(args)\n    .scriptName('chainflip-cli')\n    .usage('$0 <cmd> [args]')\n    .command('swap', '', cliExecuteSwapOptions, cliExecuteSwap)\n    .command(\n      'fund-state-chain-account',\n      '',\n      cliFundStateChainAccountOptions,\n      cliFundStateChainAccount,\n    )\n    .command(\n      'request-swap-deposit-address',\n      '',\n      cliRequestSwapDepositAddressOptions,\n      cliRequestSwapDepositAddress,\n    )\n    .wrap(0)\n    .strict()\n    .help()\n    .parse();\n}\n","import { AlchemyProvider, getDefaultProvider, Wallet } from 'ethers';\nimport { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { assetChains, Assets, ChainflipNetworks } from '@/shared/enums';\nimport { assert } from '@/shared/guards';\nimport {\n  executeSwap,\n  type SwapNetworkOptions,\n  type ExecuteSwapParams,\n} from '@/shared/vault';\nimport { askForPrivateKey, getEthNetwork, cliNetworks } from '../utils';\n\nexport const yargsOptions = {\n  'src-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap from',\n  },\n  'dest-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap to',\n  },\n  'chainflip-network': {\n    choices: cliNetworks,\n    describe: 'The Chainflip network to execute the swap on',\n    default: ChainflipNetworks.sisyphos,\n  },\n  amount: {\n    type: 'string',\n    demandOption: true,\n    describe: 'The amount to swap',\n  },\n  'dest-address': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The address to send the swapped assets to',\n  },\n  message: {\n    type: 'string',\n    describe: 'The message that is sent along with the swapped assets',\n  },\n  'gas-budget': {\n    type: 'string',\n    describe: 'The amount of gas that is sent with the message',\n  },\n  'wallet-private-key': {\n    type: 'string',\n    describe: 'The private key of the wallet to use',\n  },\n  'src-token-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the token to swap from when `chainflip-network` is `localnet`',\n  },\n  'vault-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the vault when `chainflip-network` is `localnet`',\n  },\n  'eth-network': {\n    type: 'string',\n    describe:\n      'The eth network URL to use when `chainflip-network` is `localnet`',\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliExecuteSwap(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  const privateKey = args.walletPrivateKey ?? (await askForPrivateKey());\n\n  const ethNetwork = getEthNetwork(args);\n\n  const wallet = new Wallet(privateKey).connect(\n    process.env.ALCHEMY_KEY\n      ? new AlchemyProvider(ethNetwork, process.env.ALCHEMY_KEY)\n      : getDefaultProvider(ethNetwork),\n  );\n\n  const networkOpts: SwapNetworkOptions =\n    args.chainflipNetwork === 'localnet'\n      ? {\n          vaultContractAddress: args.vaultContractAddress as string,\n          srcTokenContractAddress: args.srcTokenContractAddress as string,\n          signer: wallet,\n          network: args.chainflipNetwork,\n        }\n      : { network: args.chainflipNetwork, signer: wallet };\n\n  let ccmMetadata;\n  if (args.gasBudget || args.message) {\n    assert(args.gasBudget, 'missing gas budget');\n    assert(args.message, 'missing message');\n    ccmMetadata = {\n      message: args.message,\n      gasBudget: args.gasBudget,\n    };\n  }\n\n  const receipt = await executeSwap(\n    {\n      srcChain: assetChains[args.srcAsset],\n      srcAsset: args.srcAsset,\n      destChain: assetChains[args.destAsset],\n      destAsset: args.destAsset,\n      amount: args.amount,\n      destAddress: args.destAddress,\n      ccmMetadata,\n    } as ExecuteSwapParams,\n    networkOpts,\n    {},\n  );\n\n  console.log(`Swap executed. Transaction hash: ${receipt.hash}`);\n}\n","type ArrayToMap<T extends readonly string[]> = {\n  [K in T[number]]: K;\n};\n\nconst arrayToMap = <const T extends readonly string[]>(\n  array: T,\n): ArrayToMap<T> =>\n  Object.fromEntries(array.map((key) => [key, key])) as ArrayToMap<T>;\n\nexport const Chains = arrayToMap(['Bitcoin', 'Ethereum', 'Polkadot', 'Arbitrum']);\nexport type Chain = (typeof Chains)[keyof typeof Chains];\n\nexport const Assets = arrayToMap(['FLIP', 'USDC', 'DOT', 'ETH', 'BTC', 'ARBETH', 'ARBUSDC']);\nexport type Asset = (typeof Assets)[keyof typeof Assets];\n\nexport const ChainflipNetworks = arrayToMap([\n  'backspin',\n  'sisyphos',\n  'perseverance',\n  'mainnet',\n]);\n\nexport type ChainflipNetwork =\n  (typeof ChainflipNetworks)[keyof typeof ChainflipNetworks];\n\nexport const isTestnet = (network: ChainflipNetwork): boolean =>\n  network !== ChainflipNetworks.mainnet;\n\nexport const assetChains = {\n  [Assets.ETH]: Chains.Ethereum,\n  [Assets.FLIP]: Chains.Ethereum,\n  [Assets.USDC]: Chains.Ethereum,\n  [Assets.BTC]: Chains.Bitcoin,\n  [Assets.DOT]: Chains.Polkadot,\n  [Assets.ARBETH]: Chains.Arbitrum,\n  [Assets.ARBUSDC]: Chains.Arbitrum,\n} satisfies Record<Asset, Chain>;\n\nexport const assetDecimals = {\n  [Assets.DOT]: 10,\n  [Assets.ETH]: 18,\n  [Assets.FLIP]: 18,\n  [Assets.USDC]: 6,\n  [Assets.BTC]: 8,\n  [Assets.ARBETH]: 18,\n  [Assets.ARBUSDC]: 6,\n} satisfies Record<Asset, number>;\n\n// https://github.com/chainflip-io/chainflip-backend/blob/a2a3c2e447e7b629c4b96797d9eed22eb5b87a0b/state-chain/primitives/src/chains/assets.rs#L51-L59\nexport const assetContractIds: Record<Asset, number> = {\n  // 0 is reservered for particular cross chain messaging scenarios where we want to pass\n  // through a message without making a swap.\n  [Assets.ETH]: 1,\n  [Assets.FLIP]: 2,\n  [Assets.USDC]: 3,\n  [Assets.DOT]: 4,\n  [Assets.BTC]: 5,\n  [Assets.ARBETH]: 6,\n  [Assets.ARBUSDC]: 7,\n};\n\nexport const chainAssets = {\n  [Chains.Ethereum]: [Assets.ETH, Assets.USDC, Assets.FLIP],\n  [Chains.Bitcoin]: [Assets.BTC],\n  [Chains.Polkadot]: [Assets.DOT],\n  [Chains.Arbitrum]: [Assets.ARBETH, Assets.ARBUSDC],\n} satisfies Record<Chain, Asset[]>;\n\nexport const chainNativeAssets = {\n  [Chains.Ethereum]: Assets.ETH,\n  [Chains.Bitcoin]: Assets.BTC,\n  [Chains.Polkadot]: Assets.DOT,\n  [Chains.Arbitrum]: Assets.ARBETH,\n} satisfies Record<Chain, Asset>;\n\n// https://github.com/chainflip-io/chainflip-backend/blob/a2a3c2e447e7b629c4b96797d9eed22eb5b87a0b/state-chain/primitives/src/chains.rs#L52-L56\nexport const chainContractIds: Record<Chain, number> = {\n  [Chains.Ethereum]: 1,\n  [Chains.Polkadot]: 2,\n  [Chains.Bitcoin]: 3,\n  [Chains.Arbitrum]: 4,\n};\n\nexport type AssetAndChain = {\n  [A in Asset]: { asset: A; chain: (typeof assetChains)[A] };\n}[Asset];\n\nexport type UncheckedAssetAndChain = {\n  asset: Asset;\n  chain: Chain;\n};\n\nfunction assertAsset(asset: string): asserts asset is Asset {\n  if (!(asset in Assets)) throw new Error('invalid asset');\n}\n\nexport function assertIsValidAssetAndChain(\n  assetAndChain: UncheckedAssetAndChain,\n): asserts assetAndChain is AssetAndChain {\n  const { asset, chain } = assetAndChain;\n  assertAsset(asset);\n  if (chain !== assetChains[asset]) {\n    throw new Error('invalid asset and chain combination');\n  }\n}\n","import { Assets } from './enums';\nimport { ExecuteSwapParams } from './vault';\nimport { TokenCallParams, TokenSwapParams } from './vault/schemas';\n\nexport const isString = (value: unknown): value is string =>\n  typeof value === 'string';\n\nexport const isNotNull = <T>(value: T | null): value is T => value !== null;\n\nexport const isNotNullish = <T>(value: T | null | undefined): value is T =>\n  value !== null && value !== undefined;\n\nexport function assert(condition: unknown, message: string): asserts condition {\n  if (condition) return;\n  const error = new Error(message);\n\n  if (error.stack) {\n    // Remove the first line of the stack, which is assert function itself\n    error.stack = error.stack.replace(/\\n.+/, '\\n');\n  }\n\n  throw error;\n}\n\nexport const isTokenSwap = (\n  params: ExecuteSwapParams,\n): params is TokenSwapParams => params.srcAsset !== Assets.ETH;\n\nexport const isTokenCall = (\n  params: ExecuteSwapParams,\n): params is TokenCallParams => params.srcAsset !== Assets.ETH;\n","import { decodeAddress } from '@polkadot/util-crypto';\nimport { z } from 'zod';\nimport { Assets, ChainflipNetwork, Chains } from '../enums';\nimport {\n  btcAddress,\n  dotAddress,\n  ethereumAddress,\n  numericString,\n} from '../parsers';\nimport { ccmMetadataSchema } from '../schemas';\n\nconst bytesToHex = (arr: Uint8Array | number[]) =>\n  `0x${[...arr].map((v) => v.toString(16).padStart(2, '0')).join('')}`;\n\nconst utf8ToHex = (str: string) => `0x${Buffer.from(str).toString('hex')}`;\n\nconst eth = z.object({\n  amount: numericString,\n  srcChain: z.literal(Chains.Ethereum),\n  srcAsset: z.literal(Assets.ETH),\n});\n\nconst ethToEthereum = eth.extend({\n  destChain: z.literal(Chains.Ethereum),\n  destAddress: ethereumAddress,\n});\n\nconst ethToDot = eth.extend({\n  destChain: z.literal(Chains.Polkadot),\n  destAddress: dotAddress.transform((addr) => bytesToHex(decodeAddress(addr))),\n  destAsset: z.literal(Assets.DOT),\n});\n\nconst ethToBtc = (network: ChainflipNetwork) =>\n  eth.extend({\n    destChain: z.literal(Chains.Bitcoin),\n    destAddress: btcAddress(network).transform(utf8ToHex),\n    destAsset: z.literal(Assets.BTC),\n  });\n\nconst erc20Asset = z.union([z.literal(Assets.FLIP), z.literal(Assets.USDC)]);\n\nconst ethToERC20 = ethToEthereum.extend({ destAsset: erc20Asset });\n\nconst nativeSwapParamsSchema = (network: ChainflipNetwork) =>\n  z.union([ethToERC20, ethToDot, ethToBtc(network)]);\n\nexport type NativeSwapParams = z.infer<\n  ReturnType<typeof nativeSwapParamsSchema>\n>;\n\nconst flipToEthereumAsset = ethToEthereum.extend({\n  srcAsset: z.literal(Assets.FLIP),\n  destAsset: z.union([z.literal(Assets.USDC), z.literal(Assets.ETH)]),\n});\n\nconst usdcToEthereumAsset = ethToEthereum.extend({\n  srcAsset: z.literal(Assets.USDC),\n  destAsset: z.union([z.literal(Assets.FLIP), z.literal(Assets.ETH)]),\n});\n\nconst erc20ToDot = ethToDot.extend({ srcAsset: erc20Asset });\n\nconst erc20ToBtc = (network: ChainflipNetwork) =>\n  ethToBtc(network).extend({ srcAsset: erc20Asset });\n\nconst tokenSwapParamsSchema = (network: ChainflipNetwork) =>\n  z.union([\n    flipToEthereumAsset,\n    usdcToEthereumAsset,\n    erc20ToDot,\n    erc20ToBtc(network),\n  ]);\n\nconst ccmFlipToEthereumAssset = flipToEthereumAsset.extend({\n  ccmMetadata: ccmMetadataSchema,\n});\n\nconst ccmUsdcToEthereumAsset = usdcToEthereumAsset.extend({\n  ccmMetadata: ccmMetadataSchema,\n});\n\nconst tokenCallParamsSchema = z.union([\n  ccmFlipToEthereumAssset,\n  ccmUsdcToEthereumAsset,\n]);\n\nconst nativeCallParamsSchema = ethToERC20.extend({\n  ccmMetadata: ccmMetadataSchema,\n});\n\nexport const executeSwapParamsSchema = (network: ChainflipNetwork) =>\n  z.union([\n    // call schemas needs to precede swap schemas\n    nativeCallParamsSchema,\n    tokenCallParamsSchema,\n    nativeSwapParamsSchema(network),\n    tokenSwapParamsSchema(network),\n  ]);\n\nexport type ExecuteSwapParams = z.infer<\n  ReturnType<typeof executeSwapParamsSchema>\n>;\nexport type NativeCallParams = z.infer<typeof nativeCallParamsSchema>;\nexport type TokenCallParams = z.infer<typeof tokenCallParamsSchema>;\nexport type TokenSwapParams = z.infer<ReturnType<typeof tokenSwapParamsSchema>>;\n","import { hexToU8a, u8aToHex } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport * as ethers from 'ethers';\nimport { z, ZodErrorMap } from 'zod';\nimport type { Asset, AssetAndChain, ChainflipNetwork } from './enums';\nimport { Assets, ChainflipNetworks, Chains, assetChains } from './enums';\nimport { isString } from './guards';\nimport {\n  validateBitcoinMainnetAddress,\n  validateBitcoinRegtestAddress,\n  validateBitcoinTestnetAddress,\n} from './validation/addressValidation';\n\nconst safeStringify = (obj: unknown) =>\n  JSON.stringify(obj, (key, value) =>\n    typeof value === 'bigint' ? value.toString() : value,\n  );\n\nconst errorMap: ZodErrorMap = (_issue, context) => ({\n  message: `received: ${safeStringify(context.data)}`,\n});\nexport const string = z.string({ errorMap });\nexport const number = z.number({ errorMap });\nexport const numericString = string.regex(/^[0-9]+$/);\nexport const hexString = string.refine((v): v is `0x${string}` =>\n  /^0x[0-9a-f]+$/i.test(v),\n);\nexport const hexStringWithMaxByteSize = (maxByteSize: number) =>\n  hexString.refine((val) => val.length / 2 <= maxByteSize + 1, {\n    message: `String must be less than or equal to ${maxByteSize} bytes`,\n  });\nexport const hexStringFromNumber = numericString.transform(\n  (arg) => `0x${BigInt(arg).toString(16)}`,\n);\nexport const bareHexString = string.regex(/^[0-9a-f]+$/);\n\nexport const btcAddress = (network: ChainflipNetwork) => {\n  if (network === 'mainnet') {\n    return string.regex(/^(1|3|bc1)/).refine(validateBitcoinMainnetAddress);\n  }\n\n  return z.union([\n    string.regex(/^(m|n|2|tb1)/).refine(validateBitcoinTestnetAddress),\n    string.regex(/^bcrt1/).refine(validateBitcoinRegtestAddress),\n  ]);\n};\n\nexport const DOT_PREFIX = 0;\n\nexport const dotAddress = z\n  .union([string, hexString])\n  .transform((arg) => {\n    try {\n      if (arg.startsWith('0x')) {\n        return encodeAddress(hexToU8a(arg), DOT_PREFIX);\n      }\n      // if substrate encoded, then decode and re-encode to dot format\n      const hex = u8aToHex(decodeAddress(arg));\n      return encodeAddress(hex, DOT_PREFIX);\n    } catch {\n      return null;\n    }\n  })\n  .refine(isString);\n\nexport const ethereumAddress = hexString.refine((address) =>\n  ethers.isAddress(address),\n);\n\nexport const u64 = numericString.transform((arg) => BigInt(arg));\n\nexport const u128 = z\n  .union([number, numericString, hexString])\n  .transform((arg) => BigInt(arg));\n\nexport const unsignedInteger = z.union([\n  u128,\n  z.number().transform((n) => BigInt(n)),\n]);\n\nexport const chainflipAssetEnum = z\n  .object({ __kind: z.enum(['Usdc', 'Flip', 'Dot', 'Eth', 'Btc']) })\n  .transform(({ __kind }) => __kind.toUpperCase() as Asset);\n\nconst transformAsset = <T extends Asset>(\n  asset: T,\n): { asset: T; chain: (typeof assetChains)[T] } =>\n  ({ asset, chain: assetChains[asset] }) as const;\n\nexport const chainflipChain = z.nativeEnum(Chains);\nexport const chainflipAsset = z.nativeEnum(Assets);\n\nexport const chainflipAssetAndChain = z\n  .union([\n    chainflipAsset.transform(transformAsset),\n    z.object({ asset: z.nativeEnum(Assets), chain: z.nativeEnum(Chains) }),\n  ])\n  .superRefine((obj, ctx): obj is AssetAndChain => {\n    if (assetChains[obj.asset] !== obj.chain) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `asset ${obj.asset} does not belong to chain ${obj.chain}`,\n        path: [],\n      });\n    }\n\n    return z.NEVER;\n  });\n\nexport const chainflipNetwork = z.nativeEnum(ChainflipNetworks);\n\nexport const swapType = z.union([\n  z\n    .object({ __kind: z.literal('CcmPrincipal'), value: unsignedInteger })\n    .transform(({ value: ccmId }) => ({ type: 'PRINCIPAL' as const, ccmId })),\n  z\n    .object({ __kind: z.literal('CcmGas'), value: unsignedInteger })\n    .transform(({ value: ccmId }) => ({ type: 'GAS' as const, ccmId })),\n  z\n    .object({ __kind: z.literal('Swap') })\n    .transform(() => ({ type: 'SWAP' as const })),\n]);\n","import { isHex, u8aToHex } from '@polkadot/util';\nimport {\n  base58Decode,\n  decodeAddress,\n  encodeAddress,\n} from '@polkadot/util-crypto';\nimport * as ethers from 'ethers';\nimport { isValidSegwitAddress } from '../bitcoin';\nimport { Chain, ChainflipNetwork } from '../enums';\nimport { assert } from '../guards';\n\nexport type AddressValidator = (address: string) => boolean;\n\nexport const validatePolkadotAddress: AddressValidator = (address) => {\n  try {\n    const bytes = decodeAddress(address);\n    if (isHex(address)) {\n      const pubkey = u8aToHex(bytes);\n      if (pubkey.length !== 66) return false; // we only support 32 byte dot addresses (from dan)\n    }\n    encodeAddress(bytes);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const validateEvmAddress: AddressValidator = (address) =>\n  ethers.isAddress(address);\n\ntype BitcoinNetwork = 'mainnet' | 'testnet' | 'regtest';\n\nconst assertArraylikeEqual = <T>(a: ArrayLike<T>, b: ArrayLike<T>) => {\n  assert(a.length === b.length, 'arraylike lengths must be equal');\n  for (let i = 0; i < a.length; i += 1) {\n    assert(a[i] === b[i], 'arraylike elements must be equal');\n  }\n};\n\nconst validateP2PKHOrP2SHAddress = (\n  address: string,\n  network: BitcoinNetwork,\n) => {\n  try {\n    // The address must be a valid base58 encoded string.\n    const decoded = base58Decode(address);\n\n    // Decoding it must result in exactly 25 bytes.\n    assert(decoded.length === 25, 'decoded address must be 25 bytes long');\n\n    if (network === 'mainnet') {\n      // On mainnet, the first decoded byte must be \"0x00\" or \"0x05\".\n      assert(\n        decoded[0] === 0x00 || decoded[0] === 0x05,\n        'decoded address must start with 0x00 or 0x05',\n      );\n    } else {\n      // On testnet/regtest, the first decoded byte must be \"0x6F\" or \"0xC4\".\n      assert(\n        decoded[0] === 0x6f || decoded[0] === 0xc4,\n        'decoded address must start with 0x6f or 0xc4',\n      );\n    }\n    // The last 4 decoded bytes must be equal to the first 4 bytes of the double sha256 of the first 21 decoded bytes\n    const checksum = decoded.slice(-4);\n    const doubleHash = ethers.getBytes(\n      ethers.sha256(ethers.sha256(decoded.slice(0, 21))),\n    );\n\n    assertArraylikeEqual(checksum, doubleHash.slice(0, 4));\n\n    return true;\n  } catch (error) {\n    // console.error(error);\n    return false;\n  }\n};\n\nconst validateSegwitAddress = (address: string, network: BitcoinNetwork) => {\n  try {\n    assert(\n      // On mainnet, the address must start with \"bc1\"\n      (network === 'mainnet' && address.startsWith('bc1')) ||\n        // on testnet it must start with \"tb1\"\n        (network === 'testnet' && address.startsWith('tb1')) ||\n        // on regtest it must start with \"bcrt1\"\n        (network === 'regtest' && address.startsWith('bcrt1')),\n      'address must start with bc1, tb1 or bcrt1',\n    );\n\n    return isValidSegwitAddress(address);\n  } catch {\n    return false;\n  }\n};\n\nconst validateBitcoinAddress = (address: string, network: BitcoinNetwork) =>\n  validateP2PKHOrP2SHAddress(address, network) ||\n  validateSegwitAddress(address, network);\n\nexport const validateBitcoinMainnetAddress: AddressValidator = (\n  address: string,\n) => validateBitcoinAddress(address, 'mainnet');\n\nexport const validateBitcoinTestnetAddress: AddressValidator = (\n  address: string,\n) => validateBitcoinAddress(address, 'testnet');\n\nexport const validateBitcoinRegtestAddress: AddressValidator = (\n  address: string,\n) => validateBitcoinAddress(address, 'regtest');\n\nconst validators: Record<ChainflipNetwork, Record<Chain, AddressValidator>> = {\n  mainnet: {\n    Bitcoin: validateBitcoinMainnetAddress,\n    Ethereum: validateEvmAddress,\n    Polkadot: validatePolkadotAddress,\n  },\n  perseverance: {\n    Bitcoin: validateBitcoinTestnetAddress,\n    Ethereum: validateEvmAddress,\n    Polkadot: validatePolkadotAddress,\n  },\n  sisyphos: {\n    Bitcoin: validateBitcoinTestnetAddress,\n    Ethereum: validateEvmAddress,\n    Polkadot: validatePolkadotAddress,\n  },\n  backspin: {\n    Bitcoin: validateBitcoinRegtestAddress,\n    Ethereum: validateEvmAddress,\n    Polkadot: validatePolkadotAddress,\n  },\n};\n\nexport const validateAddress = (\n  chain: Chain,\n  address: string,\n  network: ChainflipNetwork,\n): boolean => validators[network][chain](address);\n","import { BitcoinAddress } from 'bech32-buffer';\nimport { ChainflipNetwork } from './enums';\n\nexport const isValidSegwitAddress = (address: string) => {\n  const hrp = /^(bc|tb|bcrt)1/.exec(address)?.[1];\n  if (!hrp) return false;\n\n  return BitcoinAddress.decode(address).prefix === hrp;\n};\n\nconst prefixMap = {\n  sisyphos: 'tb',\n  perseverance: 'tb',\n  backspin: 'bcrt',\n  mainnet: 'bc',\n} as const satisfies Record<ChainflipNetwork, string>;\n\nexport const encodeAddress = (\n  address: `0x${string}`,\n  network: ChainflipNetwork,\n) =>\n  new BitcoinAddress(\n    prefixMap[network],\n    1,\n    Buffer.from(address.slice(2), 'hex'),\n  ).encode();\n","import { z } from 'zod';\nimport { Asset, Chain } from './enums';\nimport {\n  chainflipAsset,\n  chainflipAssetAndChain,\n  chainflipChain,\n  hexStringWithMaxByteSize,\n  numericString,\n} from './parsers';\n\nexport const quoteQuerySchema = z.object({\n  srcAsset: chainflipAssetAndChain,\n  destAsset: chainflipAssetAndChain,\n  amount: numericString,\n  brokerCommissionBps: z\n    .string()\n    .regex(/^[0-9]*$/)\n    .transform((v) => Number(v))\n    .optional(),\n});\n\nexport type QuoteQueryParams = z.input<typeof quoteQuerySchema>;\nexport type ParsedQuoteParams = z.output<typeof quoteQuerySchema>;\n\nexport const ccmMetadataSchema = z.object({\n  gasBudget: numericString,\n  message: hexStringWithMaxByteSize(1024 * 10),\n});\n\nexport type CcmMetadata = z.infer<typeof ccmMetadataSchema>;\n\nexport const openSwapDepositChannelSchema = z\n  .object({\n    srcAsset: chainflipAsset,\n    destAsset: chainflipAsset,\n    srcChain: chainflipChain,\n    destChain: chainflipChain,\n    destAddress: z.string(),\n    amount: numericString,\n    ccmMetadata: ccmMetadataSchema.optional(),\n  })\n  .transform(({ amount, ...rest }) => ({\n    ...rest,\n    expectedDepositAmount: amount,\n  }));\n\nexport type OpenSwapDepositChannelArgs = z.input<\n  typeof openSwapDepositChannelSchema\n>;\n\nexport type PostSwapResponse = {\n  id: string;\n  depositAddress: string;\n  issuedBlock: number;\n};\n\nexport type SwapFee = {\n  type: 'LIQUIDITY' | 'NETWORK' | 'INGRESS' | 'EGRESS' | 'BROKER';\n  chain: Chain;\n  asset: Asset;\n  amount: string;\n};\n\nexport type QuoteQueryResponse = {\n  intermediateAmount?: string;\n  egressAmount: string;\n  includedFees: SwapFee[];\n};\n\ninterface BaseRequest {\n  id: string; // random UUID\n  deposit_amount: string; // base unit of the deposit asset, e.g. wei for ETH\n}\n\ninterface Intermediate extends BaseRequest {\n  source_asset: Exclude<Asset, 'USDC'>;\n  intermediate_asset: 'USDC';\n  destination_asset: Exclude<Asset, 'USDC'>;\n}\n\ninterface USDCDeposit extends BaseRequest {\n  source_asset: 'USDC';\n  intermediate_asset: null;\n  destination_asset: Exclude<Asset, 'USDC'>;\n}\n\ninterface USDCEgress extends BaseRequest {\n  source_asset: Exclude<Asset, 'USDC'>;\n  intermediate_asset: null;\n  destination_asset: 'USDC';\n}\n\nexport type QuoteRequest = Intermediate | USDCDeposit | USDCEgress;\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type { ERC20, ERC20Interface } from \"../ERC20\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nexport class ERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC20Interface {\n    return new Interface(_abi) as ERC20Interface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): ERC20 {\n    return new Contract(address, _abi, runner) as unknown as ERC20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type {\n  StateChainGateway,\n  StateChainGatewayInterface,\n} from \"../StateChainGateway\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IKeyManager\",\n        name: \"keyManager\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minFunding\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"communityGuardDisabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"CommunityGuardDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"flip\",\n        type: \"address\",\n      },\n    ],\n    name: \"FLIPSet\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"oldSupply\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newSupply\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"stateChainBlockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"FlipSupplyUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"nodeID\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"funder\",\n        type: \"address\",\n      },\n    ],\n    name: \"Funded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"GovernanceWithdrawal\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"oldMinFunding\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newMinFunding\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"MinFundingChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"nodeID\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RedemptionExecuted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"nodeID\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RedemptionExpired\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"nodeID\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"redeemAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint48\",\n        name: \"startTime\",\n        type: \"uint48\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint48\",\n        name: \"expiryTime\",\n        type: \"uint48\",\n      },\n    ],\n    name: \"RedemptionRegistered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"suspended\",\n        type: \"bool\",\n      },\n    ],\n    name: \"Suspended\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"keyManager\",\n        type: \"address\",\n      },\n    ],\n    name: \"UpdatedKeyManager\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"REDEMPTION_DELAY\",\n    outputs: [\n      {\n        internalType: \"uint48\",\n        name: \"\",\n        type: \"uint48\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableCommunityGuard\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableCommunityGuard\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"nodeID\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"executeRedemption\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"nodeID\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"fundStateChainAccount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCommunityGuardDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCommunityKey\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getFLIP\",\n    outputs: [\n      {\n        internalType: \"contract IFLIP\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGovernor\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getKeyManager\",\n    outputs: [\n      {\n        internalType: \"contract IKeyManager\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastSupplyUpdateBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getMinimumFunding\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"nodeID\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getPendingRedemption\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"redeemAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint48\",\n            name: \"startTime\",\n            type: \"uint48\",\n          },\n          {\n            internalType: \"uint48\",\n            name: \"expiryTime\",\n            type: \"uint48\",\n          },\n        ],\n        internalType: \"struct IStateChainGateway.Redemption\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSuspendedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"govUpdateFlipIssuer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"govWithdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"nodeID\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"redeemAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint48\",\n        name: \"expiryTime\",\n        type: \"uint48\",\n      },\n    ],\n    name: \"registerRedemption\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"resume\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IFLIP\",\n        name: \"flip\",\n        type: \"address\",\n      },\n    ],\n    name: \"setFlip\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newMinFunding\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setMinFunding\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"suspend\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address\",\n        name: \"newIssuer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"omitChecks\",\n        type: \"bool\",\n      },\n    ],\n    name: \"updateFlipIssuer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"newTotalSupply\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"stateChainBlockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"updateFlipSupply\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"contract IKeyManager\",\n        name: \"keyManager\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"omitChecks\",\n        type: \"bool\",\n      },\n    ],\n    name: \"updateKeyManager\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nexport class StateChainGateway__factory {\n  static readonly abi = _abi;\n  static createInterface(): StateChainGatewayInterface {\n    return new Interface(_abi) as StateChainGatewayInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): StateChainGateway {\n    return new Contract(address, _abi, runner) as unknown as StateChainGateway;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Interface, type ContractRunner } from \"ethers\";\nimport type { Vault, VaultInterface } from \"../Vault\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IKeyManager\",\n        name: \"keyManager\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"swapID\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AddGasNative\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"swapID\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"AddGasToken\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"communityGuardDisabled\",\n        type: \"bool\",\n      },\n    ],\n    name: \"CommunityGuardDisabled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address payable\",\n        name: \"multicallAddress\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"reason\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"ExecuteActionsFailed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"suspended\",\n        type: \"bool\",\n      },\n    ],\n    name: \"Suspended\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint32\",\n        name: \"dstChain\",\n        type: \"uint32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"dstAddress\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint32\",\n        name: \"dstToken\",\n        type: \"uint32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"cfParameters\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"SwapNative\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint32\",\n        name: \"dstChain\",\n        type: \"uint32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"dstAddress\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint32\",\n        name: \"dstToken\",\n        type: \"uint32\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"srcToken\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"cfParameters\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"SwapToken\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address payable\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TransferNativeFailed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address payable\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"reason\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"TransferTokenFailed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"keyManager\",\n        type: \"address\",\n      },\n    ],\n    name: \"UpdatedKeyManager\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint32\",\n        name: \"dstChain\",\n        type: \"uint32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"dstAddress\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint32\",\n        name: \"dstToken\",\n        type: \"uint32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"gasAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"cfParameters\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"XCallNative\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint32\",\n        name: \"dstChain\",\n        type: \"uint32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"dstAddress\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint32\",\n        name: \"dstToken\",\n        type: \"uint32\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"srcToken\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"gasAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"cfParameters\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"XCallToken\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"swapID\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"addGasNative\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"swapID\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"addGasToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"swapID\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.DeployFetchParams[]\",\n        name: \"deployFetchParamsArray\",\n        type: \"tuple[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address payable\",\n            name: \"fetchContract\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.FetchParams[]\",\n        name: \"fetchParamsArray\",\n        type: \"tuple[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IShared.TransferParams[]\",\n        name: \"transferParamsArray\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"allBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"swapID\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.DeployFetchParams[]\",\n        name: \"deployFetchParamsArray\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"deployAndFetchBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"disableCommunityGuard\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"enableCommunityGuard\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IShared.TransferParams\",\n        name: \"transferParams\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"enum IMulticall.CallType\",\n            name: \"callType\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"payload\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct IMulticall.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"gasMulticall\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"executeActions\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"srcChain\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"srcAddress\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"executexCall\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IShared.TransferParams\",\n        name: \"transferParams\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"srcChain\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"srcAddress\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"executexSwapAndCall\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address payable\",\n            name: \"fetchContract\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.FetchParams[]\",\n        name: \"fetchParamsArray\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"fetchBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCommunityGuardDisabled\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCommunityKey\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGovernor\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getKeyManager\",\n    outputs: [\n      {\n        internalType: \"contract IKeyManager\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getSuspendedState\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"govWithdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"resume\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"suspend\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IShared.TransferParams\",\n        name: \"transferParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IShared.TransferParams[]\",\n        name: \"transferParamsArray\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"transferBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"sig\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"kTimesGAddress\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IShared.SigData\",\n        name: \"sigData\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"contract IKeyManager\",\n        name: \"keyManager\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"omitChecks\",\n        type: \"bool\",\n      },\n    ],\n    name: \"updateKeyManager\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"dstChain\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"dstAddress\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"dstToken\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"gasAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"cfParameters\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"xCallNative\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"dstChain\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"dstAddress\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"dstToken\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"message\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"gasAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"srcToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"cfParameters\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"xCallToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"dstChain\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"dstAddress\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"dstToken\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"cfParameters\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"xSwapNative\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint32\",\n        name: \"dstChain\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"dstAddress\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint32\",\n        name: \"dstToken\",\n        type: \"uint32\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"srcToken\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"cfParameters\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"xSwapToken\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n] as const;\n\nexport class Vault__factory {\n  static readonly abi = _abi;\n  static createInterface(): VaultInterface {\n    return new Interface(_abi) as VaultInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): Vault {\n    return new Contract(address, _abi, runner) as unknown as Vault;\n  }\n}\n","import { ChainflipNetwork, ChainflipNetworks } from './enums';\n\n// TODO: read this value via rpc once there is an appropriate rpc method\nconst POOLS_NETWORK_FEE_HUNDREDTH_PIPS: Partial<\n  Record<ChainflipNetwork, number>\n> = {\n  [ChainflipNetworks.backspin]: 1000,\n  [ChainflipNetworks.sisyphos]: 1000,\n  [ChainflipNetworks.perseverance]: 1000,\n  [ChainflipNetworks.mainnet]: 1000,\n};\nexport const getPoolsNetworkFeeHundredthPips = (network: ChainflipNetwork) =>\n  POOLS_NETWORK_FEE_HUNDREDTH_PIPS[network] ?? 0;\n\n// https://developers.circle.com/developer/docs/usdc-on-testnet#usdc-on-ethereum-goerli\nconst GOERLI_USDC_CONTRACT_ADDRESS =\n  '0x07865c6E87B9F70255377e024ace6630C1Eaa37F';\n\nexport const ADDRESSES = {\n  [ChainflipNetworks.backspin]: {\n    FLIP_CONTRACT_ADDRESS: '0x10C6E9530F1C1AF873a391030a1D9E8ed0630D26',\n    USDC_CONTRACT_ADDRESS: '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0',\n    VAULT_CONTRACT_ADDRESS: '0xB7A5bd0345EF1Cc5E66bf61BdeC17D2461fBd968',\n    STATE_CHAIN_GATEWAY_ADDRESS: '0xeEBe00Ac0756308ac4AaBfD76c05c4F3088B8883',\n  },\n  [ChainflipNetworks.sisyphos]: {\n    FLIP_CONTRACT_ADDRESS: '0x2BbB561C6eaB74f358cA9e8a961E3A20CAE3D100',\n    USDC_CONTRACT_ADDRESS: GOERLI_USDC_CONTRACT_ADDRESS,\n    VAULT_CONTRACT_ADDRESS: '0xC17CCec5015081EB2DF26d20A9e02c5484C1d641',\n    STATE_CHAIN_GATEWAY_ADDRESS: '0xE8bE4B7F8a38C1913387c9C20B94402bc3Db9F70',\n  },\n  [ChainflipNetworks.perseverance]: {\n    FLIP_CONTRACT_ADDRESS: '0x0485D65da68b2A6b48C3fA28D7CCAce196798B94',\n    USDC_CONTRACT_ADDRESS: GOERLI_USDC_CONTRACT_ADDRESS,\n    VAULT_CONTRACT_ADDRESS: '0x40caFF3f3B6706Da904a7895e0fC7F7922437e9B',\n    STATE_CHAIN_GATEWAY_ADDRESS: '0x38AA40B7b5a70d738baBf6699a45DacdDBBEB3fc',\n  },\n  [ChainflipNetworks.mainnet]: {\n    FLIP_CONTRACT_ADDRESS: '0x826180541412D574cf1336d22c0C0a287822678A',\n    USDC_CONTRACT_ADDRESS: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n    VAULT_CONTRACT_ADDRESS: '0xF5e10380213880111522dd0efD3dbb45b9f62Bcc',\n    STATE_CHAIN_GATEWAY_ADDRESS: '0x6995Ab7c4D7F4B03f467Cf4c8E920427d9621DBd',\n  },\n} as const;\n","import { Signer, Overrides, ContractTransactionReceipt } from 'ethers';\nimport { ERC20, ERC20__factory } from './abis';\nimport { ADDRESSES } from './consts';\nimport { type ChainflipNetwork, type Asset, Assets } from './enums';\n\nexport type TransactionOptions = {\n  gasLimit?: bigint;\n  gasPrice?: bigint;\n  maxFeePerGas?: bigint;\n  maxPriorityFeePerGas?: bigint;\n  nonce?: number;\n  wait?: number;\n};\n\nexport const extractOverrides = (\n  transactionOverrides: TransactionOptions,\n): Overrides => {\n  const { wait, ...ethersOverrides } = transactionOverrides;\n\n  return ethersOverrides;\n};\n\nexport function getTokenContractAddress(\n  asset: Asset,\n  network: ChainflipNetwork,\n): string;\nexport function getTokenContractAddress(\n  asset: Asset,\n  network: ChainflipNetwork,\n  assert: false,\n): string | undefined;\nexport function getTokenContractAddress(\n  asset: Asset,\n  network: ChainflipNetwork,\n  assert = true,\n): string | undefined {\n  if (asset === Assets.FLIP) return ADDRESSES[network].FLIP_CONTRACT_ADDRESS;\n  if (asset === Assets.USDC) return ADDRESSES[network].USDC_CONTRACT_ADDRESS;\n\n  if (assert) {\n    throw new Error('Only FLIP and USDC are supported for now');\n  }\n\n  return undefined;\n}\n\nexport const getStateChainGatewayContractAddress = (\n  network: ChainflipNetwork,\n): string => ADDRESSES[network].STATE_CHAIN_GATEWAY_ADDRESS;\n\nexport const checkAllowance = async (\n  amount: bigint,\n  spenderAddress: string,\n  erc20Address: string,\n  signer: Signer,\n) => {\n  const erc20 = ERC20__factory.connect(erc20Address, signer);\n  const signerAddress = await signer.getAddress();\n  const allowance = await erc20.allowance(signerAddress, spenderAddress);\n  return { allowance, isAllowable: allowance >= amount, erc20 };\n};\n\nexport const approve = async (\n  amount: bigint,\n  spenderAddress: string,\n  erc20: ERC20,\n  allowance: bigint,\n  txOpts: TransactionOptions,\n): Promise<ContractTransactionReceipt | null> => {\n  if (allowance >= amount) return null;\n  const transaction = await erc20.approve(\n    spenderAddress,\n    amount - allowance,\n    extractOverrides(txOpts),\n  );\n  return transaction.wait(txOpts.wait);\n};\n\nexport const getVaultManagerContractAddress = (\n  network: ChainflipNetwork,\n): string => ADDRESSES[network].VAULT_CONTRACT_ADDRESS;\n\nexport const getFlipBalance = async (\n  network: ChainflipNetwork,\n  signer: Signer,\n): Promise<bigint> => {\n  const flipAddress = getTokenContractAddress('FLIP', network);\n  const flip = ERC20__factory.connect(flipAddress, signer);\n  return flip.balanceOf(await signer.getAddress());\n};\n","import { ContractTransactionReceipt } from 'ethers';\nimport {\n  type ExecuteSwapParams,\n  executeSwapParamsSchema,\n  type NativeSwapParams,\n  type TokenSwapParams,\n  NativeCallParams,\n  TokenCallParams,\n} from './schemas';\nimport { Vault__factory } from '../abis';\nimport {\n  checkAllowance,\n  extractOverrides,\n  getTokenContractAddress,\n  getVaultManagerContractAddress,\n  TransactionOptions,\n} from '../contracts';\nimport { assetContractIds, chainContractIds } from '../enums';\nimport { assert, isTokenCall, isTokenSwap } from '../guards';\nimport { SwapNetworkOptions } from './index';\n\nconst swapNative = async (\n  { destChain, destAsset, destAddress, amount }: NativeSwapParams,\n  networkOpts: SwapNetworkOptions,\n  txOpts: TransactionOptions,\n): Promise<ContractTransactionReceipt> => {\n  const vaultContractAddress =\n    networkOpts.network === 'localnet'\n      ? networkOpts.vaultContractAddress\n      : getVaultManagerContractAddress(networkOpts.network);\n\n  const vault = Vault__factory.connect(\n    vaultContractAddress,\n    networkOpts.signer,\n  );\n\n  const transaction = await vault.xSwapNative(\n    chainContractIds[destChain],\n    destAddress,\n    assetContractIds[destAsset],\n    '0x',\n    { value: amount, ...extractOverrides(txOpts) },\n  );\n\n  return transaction.wait(txOpts.wait) as Promise<ContractTransactionReceipt>;\n};\n\nconst swapToken = async (\n  params: TokenSwapParams,\n  networkOpts: SwapNetworkOptions,\n  txOpts: TransactionOptions,\n): Promise<ContractTransactionReceipt> => {\n  const vaultContractAddress =\n    networkOpts.network === 'localnet'\n      ? networkOpts.vaultContractAddress\n      : getVaultManagerContractAddress(networkOpts.network);\n\n  const erc20Address =\n    networkOpts.network === 'localnet'\n      ? networkOpts.srcTokenContractAddress\n      : getTokenContractAddress(params.srcAsset, networkOpts.network);\n\n  assert(erc20Address !== undefined, 'Missing ERC20 contract address');\n\n  const { isAllowable } = await checkAllowance(\n    BigInt(params.amount),\n    vaultContractAddress,\n    erc20Address,\n    networkOpts.signer,\n  );\n  assert(isAllowable, 'Swap amount exceeds allowance');\n\n  const vault = Vault__factory.connect(\n    vaultContractAddress,\n    networkOpts.signer,\n  );\n\n  const transaction = await vault.xSwapToken(\n    chainContractIds[params.destChain],\n    params.destAddress,\n    assetContractIds[params.destAsset],\n    erc20Address,\n    params.amount,\n    '0x',\n    extractOverrides(txOpts),\n  );\n\n  return transaction.wait(txOpts.wait) as Promise<ContractTransactionReceipt>;\n};\n\nconst callNative = async (\n  params: NativeCallParams,\n  networkOpts: SwapNetworkOptions,\n  txOpts: TransactionOptions,\n): Promise<ContractTransactionReceipt> => {\n  const vaultContractAddress =\n    networkOpts.network === 'localnet'\n      ? networkOpts.vaultContractAddress\n      : getVaultManagerContractAddress(networkOpts.network);\n\n  const vault = Vault__factory.connect(\n    vaultContractAddress,\n    networkOpts.signer,\n  );\n\n  const transaction = await vault.xCallNative(\n    chainContractIds[params.destChain],\n    params.destAddress,\n    assetContractIds[params.destAsset],\n    params.ccmMetadata.message,\n    params.ccmMetadata.gasBudget,\n    '0x',\n    { value: params.amount, ...extractOverrides(txOpts) },\n  );\n\n  return transaction.wait(txOpts.wait) as Promise<ContractTransactionReceipt>;\n};\n\nconst callToken = async (\n  params: TokenCallParams,\n  networkOpts: SwapNetworkOptions,\n  txOpts: TransactionOptions,\n): Promise<ContractTransactionReceipt> => {\n  const vaultContractAddress =\n    networkOpts.network === 'localnet'\n      ? networkOpts.vaultContractAddress\n      : getVaultManagerContractAddress(networkOpts.network);\n\n  const erc20Address =\n    networkOpts.network === 'localnet'\n      ? networkOpts.srcTokenContractAddress\n      : getTokenContractAddress(params.srcAsset, networkOpts.network);\n\n  assert(erc20Address !== undefined, 'Missing ERC20 contract address');\n\n  const { isAllowable } = await checkAllowance(\n    BigInt(params.amount),\n    vaultContractAddress,\n    erc20Address,\n    networkOpts.signer,\n  );\n  assert(isAllowable, 'Swap amount exceeds allowance');\n\n  const vault = Vault__factory.connect(\n    vaultContractAddress,\n    networkOpts.signer,\n  );\n\n  const transaction = await vault.xCallToken(\n    chainContractIds[params.destChain],\n    params.destAddress,\n    assetContractIds[params.destAsset],\n    params.ccmMetadata.message,\n    params.ccmMetadata.gasBudget,\n    erc20Address,\n    params.amount,\n    '0x',\n    extractOverrides(txOpts),\n  );\n\n  return transaction.wait(txOpts.wait) as Promise<ContractTransactionReceipt>;\n};\n\nconst executeSwap = async (\n  params: ExecuteSwapParams,\n  networkOpts: SwapNetworkOptions,\n  txOpts: TransactionOptions,\n): Promise<ContractTransactionReceipt> => {\n  const network =\n    networkOpts.network === 'localnet' ? 'backspin' : networkOpts.network;\n  const parsedParams = executeSwapParamsSchema(network).parse(params);\n\n  if ('ccmMetadata' in parsedParams) {\n    return isTokenCall(parsedParams)\n      ? callToken(parsedParams, networkOpts, txOpts)\n      : callNative(parsedParams, networkOpts, txOpts);\n  }\n\n  return isTokenSwap(parsedParams)\n    ? swapToken(parsedParams, networkOpts, txOpts)\n    : swapNative(parsedParams, networkOpts, txOpts);\n};\n\nexport default executeSwap;\n","import { createInterface } from 'node:readline/promises';\nimport { ChainflipNetworks } from '@/shared/enums';\nimport { chainflipNetwork } from '@/shared/parsers';\nimport { ChainflipNetwork } from './enums';\n\nexport const askForPrivateKey = async () => {\n  const rl = createInterface({ input: process.stdin, output: process.stdout });\n\n  try {\n    return await rl.question(\"Please enter your wallet's private key: \");\n  } finally {\n    rl.close();\n  }\n};\n\ntype GetEthNetworkOptions =\n  | { chainflipNetwork: 'localnet'; ethNetwork?: string }\n  | { chainflipNetwork: ChainflipNetwork };\n\nexport function getEthNetwork(opts: GetEthNetworkOptions) {\n  if (opts.chainflipNetwork === 'localnet') return opts.ethNetwork as string;\n  if (opts.chainflipNetwork === ChainflipNetworks.mainnet) return 'mainnet';\n  return 'goerli';\n}\n\nexport const cliNetworks = [\n  ...Object.values(chainflipNetwork.enum),\n  'localnet',\n] as const;\n","import { AlchemyProvider, Wallet, getDefaultProvider } from 'ethers';\nimport { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { ChainflipNetworks } from '@/shared/enums';\nimport { FundingNetworkOptions, fundStateChainAccount } from '../lib';\nimport { askForPrivateKey, getEthNetwork, cliNetworks } from '../utils';\n\nexport const yargsOptions = {\n  'src-account-id': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The account ID for the validator to be funded',\n  },\n  'chainflip-network': {\n    choices: cliNetworks,\n    describe: 'The Chainflip network to execute the swap on',\n    default: ChainflipNetworks.sisyphos,\n  },\n  amount: {\n    type: 'string',\n    demandOption: true,\n    describe: 'The amount in Flipperino to fund',\n  },\n  'wallet-private-key': {\n    type: 'string',\n    describe: 'The private key of the wallet to use',\n  },\n  'state-chain-manager-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the state chain manager when `chainflip-network` is `localnet`',\n  },\n  'flip-token-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address for the FLIP token when `chainflip-network` is `localnet`',\n  },\n  'eth-network': {\n    type: 'string',\n    describe:\n      'The eth network URL to use when `chainflip-network` is `localnet`',\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliFundStateChainAccount(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  const privateKey = args.walletPrivateKey ?? (await askForPrivateKey());\n\n  const ethNetwork = getEthNetwork(args);\n\n  const wallet = new Wallet(privateKey).connect(\n    process.env.ALCHEMY_KEY\n      ? new AlchemyProvider(ethNetwork, process.env.ALCHEMY_KEY)\n      : getDefaultProvider(ethNetwork),\n  );\n\n  const networkOpts: FundingNetworkOptions =\n    args.chainflipNetwork === 'localnet'\n      ? {\n          stateChainGatewayContractAddress:\n            args.stateChainManagerContractAddress as string,\n          flipContractAddress: args.flipTokenContractAddress as string,\n          signer: wallet,\n          network: args.chainflipNetwork,\n        }\n      : { network: args.chainflipNetwork, signer: wallet };\n\n  const receipt = await fundStateChainAccount(\n    args.srcAccountId as `0x${string}`,\n    BigInt(args.amount),\n    networkOpts,\n    {},\n  );\n\n  console.log(`Call executed. Transaction hash: ${receipt.hash}`);\n}\n","import { StateChainGateway__factory } from '../abis';\nimport { getStateChainGatewayContractAddress } from '../contracts';\nimport type { FundingNetworkOptions } from './index';\n\nexport const getStateChainGateway = (networkOpts: FundingNetworkOptions) => {\n  const stateChainGatewayContractAddress =\n    networkOpts.network === 'localnet'\n      ? networkOpts.stateChainGatewayContractAddress\n      : getStateChainGatewayContractAddress(networkOpts.network);\n\n  return StateChainGateway__factory.connect(\n    stateChainGatewayContractAddress,\n    networkOpts.signer,\n  );\n};\n","import { ContractTransactionReceipt, Signer } from 'ethers';\nimport { getStateChainGateway } from './utils';\nimport {\n  checkAllowance,\n  extractOverrides,\n  getTokenContractAddress,\n  TransactionOptions,\n} from '../contracts';\nimport { Assets, ChainflipNetwork } from '../enums';\nimport { assert } from '../guards';\n\nexport type FundingNetworkOptions =\n  | { network: ChainflipNetwork; signer: Signer }\n  | {\n      network: 'localnet';\n      signer: Signer;\n      stateChainGatewayContractAddress: string;\n      flipContractAddress: string;\n    };\n\nexport type PendingRedemption = {\n  amount: bigint;\n  redeemAddress: string;\n  startTime: bigint;\n  expiryTime: bigint;\n};\n\nexport const fundStateChainAccount = async (\n  accountId: `0x${string}`,\n  amount: bigint,\n  networkOpts: FundingNetworkOptions,\n  txOpts: TransactionOptions,\n): Promise<ContractTransactionReceipt> => {\n  const flipContractAddress =\n    networkOpts.network === 'localnet'\n      ? networkOpts.flipContractAddress\n      : getTokenContractAddress(Assets.FLIP, networkOpts.network);\n\n  const stateChainGateway = getStateChainGateway(networkOpts);\n\n  const { isAllowable } = await checkAllowance(\n    amount,\n    await stateChainGateway.getAddress(),\n    flipContractAddress,\n    networkOpts.signer,\n  );\n  assert(isAllowable, 'Insufficient allowance');\n\n  const transaction = await stateChainGateway.fundStateChainAccount(\n    accountId,\n    amount,\n    extractOverrides(txOpts),\n  );\n\n  return transaction.wait(txOpts.wait) as Promise<ContractTransactionReceipt>;\n};\n\nexport const executeRedemption = async (\n  accountId: `0x${string}`,\n  networkOpts: FundingNetworkOptions,\n  txOpts: TransactionOptions,\n): Promise<ContractTransactionReceipt> => {\n  const stateChainGateway = getStateChainGateway(networkOpts);\n\n  const transaction = await stateChainGateway.executeRedemption(\n    accountId,\n    extractOverrides(txOpts),\n  );\n\n  return transaction.wait(txOpts.wait) as Promise<ContractTransactionReceipt>;\n};\n\nexport const getMinimumFunding = (\n  networkOpts: FundingNetworkOptions,\n): Promise<bigint> => {\n  const stateChainGateway = getStateChainGateway(networkOpts);\n\n  return stateChainGateway.getMinimumFunding();\n};\n\nexport const getRedemptionDelay = (\n  networkOpts: FundingNetworkOptions,\n): Promise<bigint> => {\n  const stateChainGateway = getStateChainGateway(networkOpts);\n\n  return stateChainGateway.REDEMPTION_DELAY();\n};\n\nexport const getPendingRedemption = async (\n  accountId: `0x${string}`,\n  networkOpts: FundingNetworkOptions,\n): Promise<PendingRedemption | undefined> => {\n  const stateChainGateway = getStateChainGateway(networkOpts);\n  const pendingRedemption =\n    await stateChainGateway.getPendingRedemption(accountId);\n\n  // there is no null in solidity, therefore we compare against the initial value to determine if the value is set:\n  // https://www.wtf.academy/en/solidity-start/InitialValue/\n  return pendingRedemption.amount !== 0n\n    ? stateChainGateway.getPendingRedemption(accountId)\n    : undefined;\n};\n\nexport * from './approval';\n","import { u8aToHex } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport axios from 'axios';\nimport { z } from 'zod';\nimport { Asset, Assets, Chain, ChainflipNetwork } from './enums';\nimport { isNotNullish } from './guards';\nimport {\n  hexString,\n  numericString,\n  btcAddress,\n  dotAddress,\n  hexStringFromNumber,\n  unsignedInteger,\n  chainflipAssetAndChain,\n} from './parsers';\nimport { CcmMetadata, ccmMetadataSchema } from './schemas';\nimport { CamelCaseToSnakeCase, camelToSnakeCase } from './strings';\n\ntype NewSwapRequest = {\n  srcAsset: Asset;\n  destAsset: Asset;\n  srcChain: Chain;\n  destChain: Chain;\n  destAddress: string;\n  ccmMetadata?: CcmMetadata;\n};\n\ntype SnakeCaseKeys<T> = {\n  [K in keyof T as K extends string ? CamelCaseToSnakeCase<K> : K]: T[K];\n};\n\nconst transformObjToSnakeCase = <T>(\n  obj: T | undefined,\n): SnakeCaseKeys<T> | undefined => {\n  if (!obj) return undefined;\n  const newObj: Record<string, unknown> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      newObj[camelToSnakeCase(key)] = obj[key];\n    }\n  }\n  return newObj as SnakeCaseKeys<T>;\n};\n\nconst submitAddress = (asset: Asset, address: string): string => {\n  if (asset === Assets.DOT) {\n    return address.startsWith('0x')\n      ? z.string().length(66).parse(address) // we only accept 32 byte dot addresses\n      : u8aToHex(decodeAddress(address));\n  }\n  return address;\n};\n\nconst rpcResult = z.union([\n  z.object({\n    error: z.object({\n      code: z.number().optional(),\n      message: z.string().optional(),\n      data: z.unknown().optional(),\n    }),\n  }),\n  z.object({ result: z.unknown() }),\n]);\n\nconst requestValidators = (network: ChainflipNetwork) => ({\n  requestSwapDepositAddress: z\n    .tuple([\n      chainflipAssetAndChain,\n      chainflipAssetAndChain,\n      z.union([numericString, hexString, btcAddress(network)]),\n      z.number(),\n      ccmMetadataSchema\n        .merge(\n          z.object({\n            gasBudget: hexStringFromNumber, // broker expects hex encoded number\n            cfParameters: z.union([hexString, z.string()]).optional(),\n          }),\n        )\n        .optional(),\n    ])\n    .transform(([a, b, c, d, e]) =>\n      [a, b, c, d, transformObjToSnakeCase(e)].filter(isNotNullish),\n    ),\n});\n\nconst responseValidators = (network: ChainflipNetwork) => ({\n  requestSwapDepositAddress: z\n    .object({\n      address: z.union([dotAddress, hexString, btcAddress(network)]),\n      issued_block: z.number(),\n      channel_id: z.number(),\n      expiry_block: z.number().int().safe().positive().optional(),\n      source_chain_expiry_block: unsignedInteger.optional(),\n    })\n    .transform(\n      ({ address, issued_block, channel_id, source_chain_expiry_block }) => ({\n        address,\n        issuedBlock: issued_block,\n        channelId: BigInt(channel_id),\n        sourceChainExpiryBlock: source_chain_expiry_block,\n      }),\n    ),\n});\n\ntype RequestValidator = ReturnType<typeof requestValidators>;\ntype ResponseValidator = ReturnType<typeof responseValidators>;\n\nexport type DepositChannelResponse = z.infer<\n  ResponseValidator['requestSwapDepositAddress']\n>;\n\nconst makeRpcRequest = async <\n  T extends keyof RequestValidator & keyof ResponseValidator,\n>(\n  network: ChainflipNetwork,\n  url: string | URL,\n  method: T,\n  ...params: z.input<RequestValidator[T]>\n): Promise<z.output<ResponseValidator[T]>> => {\n  const res = await axios.post(url.toString(), {\n    jsonrpc: '2.0',\n    id: 1,\n    method: `broker_${method}`,\n    params: requestValidators(network)[method].parse(params),\n  });\n\n  const result = rpcResult.parse(res.data);\n\n  if ('error' in result) {\n    throw new Error(\n      `Broker responded with error code ${result.error.code}: ${result.error.message}`,\n    );\n  }\n\n  return responseValidators(network)[method].parse(result.result);\n};\n\nexport async function requestSwapDepositAddress(\n  swapRequest: NewSwapRequest,\n  opts: { url: string; commissionBps: number },\n  chainflipNetwork: ChainflipNetwork,\n): Promise<DepositChannelResponse> {\n  const { srcAsset, srcChain, destAsset, destChain, destAddress } = swapRequest;\n\n  return makeRpcRequest(\n    chainflipNetwork,\n    opts.url,\n    'requestSwapDepositAddress',\n    { asset: srcAsset, chain: srcChain },\n    { asset: destAsset, chain: destChain },\n    submitAddress(destAsset, destAddress),\n    opts.commissionBps,\n    swapRequest.ccmMetadata && {\n      ...swapRequest.ccmMetadata,\n      cfParameters: undefined,\n    },\n  );\n}\n","export type CamelCaseToSnakeCase<S extends string> =\n  S extends `${infer T}${infer U}`\n    ? `${T extends Capitalize<T>\n        ? '_'\n        : ''}${Lowercase<T>}${CamelCaseToSnakeCase<U>}`\n    : S;\n\nexport const camelToSnakeCase = <const T extends string>(\n  str: T,\n): CamelCaseToSnakeCase<T> =>\n  str.replace(\n    /[A-Z]/g,\n    (letter) => `_${letter.toLowerCase()}`,\n  ) as CamelCaseToSnakeCase<T>;\n\nexport const toUpperCase = <const T extends string>(value: T) =>\n  value.toUpperCase() as Uppercase<T>;\n\ntype ScreamingSnakeCaseToPascalCase<S extends string> =\n  S extends `${infer T}_${infer U}`\n    ? `${Capitalize<Lowercase<T>>}${ScreamingSnakeCaseToPascalCase<U>}`\n    : Capitalize<Lowercase<S>>;\n\nexport const screamingSnakeToPascalCase = <const T extends string>(value: T) =>\n  value\n    .split('_')\n    .map((word) => `${word[0].toUpperCase()}${word.slice(1).toLowerCase()}`)\n    .join('') as ScreamingSnakeCaseToPascalCase<T>;\n","import { decodeAddress } from '@polkadot/util-crypto';\nimport Redis from 'ioredis';\nimport { z } from 'zod';\nimport { sorter } from '../arrays';\nimport { type Asset, type Chain } from '../enums';\nimport { number, u128, string } from '../parsers';\n\nconst ss58ToHex = (address: string) =>\n  `0x${Buffer.from(decodeAddress(address)).toString('hex')}`;\n\nconst jsonString = string.transform((value) => JSON.parse(value));\n\nconst depositSchema = jsonString.pipe(\n  z.object({\n    amount: u128,\n    asset: string,\n    deposit_chain_block_height: number,\n  }),\n);\n\ntype Deposit = z.infer<typeof depositSchema>;\n\nconst sortDepositAscending = sorter<Deposit>('deposit_chain_block_height');\n\nconst broadcastParsers = {\n  Ethereum: z.object({\n    tx_out_id: z.object({\n      signature: z.object({\n        k_times_g_address: z.array(number),\n        s: z.array(number),\n      }),\n    }),\n  }),\n  Polkadot: z.object({ tx_out_id: z.object({ signature: string }) }),\n  Bitcoin: z.object({ tx_out_id: z.object({ hash: string }) }),\n  Arbitrum: z.object({ tx_out_id: z.object({ signature: string }) }),\n};\n\ntype ChainBroadcast<C extends Chain> = z.infer<(typeof broadcastParsers)[C]>;\n\ntype EthereumBroadcast = ChainBroadcast<'Ethereum'>;\ntype PolkadotBroadcast = ChainBroadcast<'Polkadot'>;\ntype BitcoinBroadcast = ChainBroadcast<'Bitcoin'>;\ntype ArbitrumBroadcast = ChainBroadcast<'Arbitrum'>;\ntype Broadcast = ChainBroadcast<Chain>;\n\nconst mempoolTransaction = jsonString.pipe(\n  z.object({\n    confirmations: number,\n    value: u128,\n    tx_hash: string.transform((value) => `0x${value}` as const),\n  }),\n);\n\nexport default class RedisClient {\n  private client;\n\n  constructor(url: `redis://${string}` | `rediss://${string}`) {\n    this.client = new Redis(url);\n  }\n\n  async getBroadcast(\n    chain: 'Ethereum',\n    broadcastId: number | bigint,\n  ): Promise<EthereumBroadcast | null>;\n  async getBroadcast(\n    chain: 'Polkadot',\n    broadcastId: number | bigint,\n  ): Promise<PolkadotBroadcast | null>;\n  async getBroadcast(\n    chain: 'Bitcoin',\n    broadcastId: number | bigint,\n  ): Promise<BitcoinBroadcast | null>;\n  async getBroadcast(\n    chain: Chain,\n    broadcastId: number | bigint,\n  ): Promise<Broadcast | null>;\n  async getBroadcast(\n    chain: Chain,\n    broadcastId: number | bigint,\n  ): Promise<Broadcast | null> {\n    const key = `broadcast:${chain}:${broadcastId}`;\n    const value = await this.client.get(key);\n    return value ? broadcastParsers[chain].parse(JSON.parse(value)) : null;\n  }\n\n  async getDeposits(chain: Chain, asset: Asset, address: string) {\n    const parsedAddress = chain === 'Polkadot' ? ss58ToHex(address) : address;\n    const key = `deposit:${chain}:${parsedAddress}`;\n    const deposits = await this.client.lrange(key, 0, -1);\n    return deposits\n      .map((deposit) => depositSchema.parse(deposit))\n      .filter((deposit) => deposit.asset === asset)\n      .sort(sortDepositAscending);\n  }\n\n  async getMempoolTransaction(chain: 'Bitcoin', address: string) {\n    const key = `mempool:${chain}:${address}`;\n    const value = await this.client.get(key);\n    return value ? mempoolTransaction.parse(value) : null;\n  }\n\n  quit() {\n    return this.client.quit();\n  }\n}\n","export const sorter =\n  <T>(key: keyof T, dir: 'asc' | 'desc' = 'asc') =>\n  (a: T, b: T) => {\n    let result = 0;\n\n    if (a[key] < b[key]) {\n      result = -1;\n    } else if (a[key] > b[key]) {\n      result = 1;\n    }\n\n    return dir === 'asc' ? result : -result;\n  };\n","import { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { Assets, Chains } from '@/shared/enums';\nimport { assert } from '@/shared/guards';\nimport { CcmMetadata } from '@/shared/schemas';\nimport { broker } from '../lib';\n\nexport const yargsOptions = {\n  'src-asset': {\n    choices: Object.values(Assets),\n    describe: 'The asset to swap from',\n    demandOption: true,\n  },\n  'dest-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap to',\n  },\n  'dest-address': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The address to send the swapped assets to',\n  },\n  'broker-url': {\n    type: 'string',\n    describe: 'The broker URL',\n    demandOption: true,\n  },\n  'src-chain': {\n    choices: Object.values(Chains),\n    describe: 'The chain to swap from',\n    demandOption: true,\n  },\n  'dest-chain': {\n    choices: Object.values(Chains),\n    describe: 'The chain to swap to',\n    demandOption: true,\n  },\n  message: {\n    type: 'string',\n    describe: 'The CCM message that is sent along with the swapped assets',\n  },\n  'gas-budget': {\n    type: 'string',\n    describe: 'The amount of gas that is sent with the CCM message',\n  },\n  network: {\n    type: 'string',\n    demandOption: true,\n    choices: ['mainnet', 'perseverance', 'backspin', 'sisyphos'],\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliRequestSwapDepositAddress(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  let ccmMetadata: CcmMetadata | undefined;\n\n  if (args.gasBudget || args.message) {\n    assert(args.gasBudget, 'missing gas budget');\n    assert(args.message, 'missing message');\n\n    ccmMetadata = {\n      gasBudget: args.gasBudget,\n      message: args.message as `0x${string}`,\n    };\n  }\n  const result = await broker.requestSwapDepositAddress(\n    {\n      srcAsset: args.srcAsset,\n      destAsset: args.destAsset,\n      destAddress: args.destAddress,\n      srcChain: args.srcChain,\n      destChain: args.destChain,\n      ccmMetadata,\n    },\n    {\n      url: args.brokerUrl,\n      commissionBps: 0,\n    },\n    args.network,\n  );\n\n  console.log(`Deposit address: ${result.address}`);\n  console.log(`Issued block: ${result.issuedBlock}`);\n  console.log(`Channel ID: ${result.channelId}`);\n}\n","#! /usr/bin/env node\nimport cli from './cli';\n\ncli(process.argv.slice(2));\n"]}