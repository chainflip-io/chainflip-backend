{"version":3,"sources":["../src/cli.ts","../src/commands/cliExecuteSwap.ts","../src/utils.ts","../src/commands/cliFundStateChainAccount.ts","../src/commands/cliRequestSwapDepositAddress.ts","../src/main.ts"],"names":["yargs","AlchemyProvider","getDefaultProvider","Wallet","createInterface","askForPrivateKey","rl","input","process","stdin","output","stdout","question","close","getEthNetwork","opts","chainflipNetwork","ethNetwork","ChainflipNetworks","mainnet","cliNetworks","Object","values","enum","yargsOptions","choices","Assets","demandOption","describe","default","sisyphos","amount","type","message","args","privateKey","walletPrivateKey","wallet","connect","env","ALCHEMY_KEY","networkOpts","vaultContractAddress","srcTokenContractAddress","signer","network","ccmMetadata","gasBudget","assert","receipt","executeSwap","srcChain","assetChains","srcAsset","destChain","destAsset","destAddress","console","log","hash","cliExecuteSwap","stateChainGatewayContractAddress","stateChainManagerContractAddress","flipContractAddress","flipTokenContractAddress","fundStateChainAccount","srcAccountId","BigInt","cliFundStateChainAccount","Chains","result","broker","requestSwapDepositAddress","url","brokerUrl","commissionBps","address","issuedBlock","channelId","cliRequestSwapDepositAddress","scriptName","usage","command","cliExecuteSwapOptions","cliFundStateChainAccountOptions","cliRequestSwapDepositAddressOptions","wrap","strict","help","parse","cli","argv","slice"],"mappings":"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","sourcesContent":["import yargs from 'yargs/yargs';\nimport cliExecuteSwap, {\n  yargsOptions as cliExecuteSwapOptions,\n} from './commands/cliExecuteSwap';\nimport cliFundStateChainAccount, {\n  yargsOptions as cliFundStateChainAccountOptions,\n} from './commands/cliFundStateChainAccount';\nimport cliRequestSwapDepositAddress, {\n  yargsOptions as cliRequestSwapDepositAddressOptions,\n} from './commands/cliRequestSwapDepositAddress';\n\nexport default async function cli(args: string[]) {\n  return yargs(args)\n    .scriptName('chainflip-cli')\n    .usage('$0 <cmd> [args]')\n    .command('swap', '', cliExecuteSwapOptions, cliExecuteSwap)\n    .command(\n      'fund-state-chain-account',\n      '',\n      cliFundStateChainAccountOptions,\n      cliFundStateChainAccount,\n    )\n    .command(\n      'request-swap-deposit-address',\n      '',\n      cliRequestSwapDepositAddressOptions,\n      cliRequestSwapDepositAddress,\n    )\n    .wrap(0)\n    .strict()\n    .help()\n    .parse();\n}\n","import { AlchemyProvider, getDefaultProvider, Wallet } from 'ethers';\nimport { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { assetChains, Assets, ChainflipNetworks } from '@/shared/enums';\nimport { assert } from '@/shared/guards';\nimport {\n  executeSwap,\n  type SwapNetworkOptions,\n  type ExecuteSwapParams,\n} from '@/shared/vault';\nimport { askForPrivateKey, getEthNetwork, cliNetworks } from '../utils';\n\nexport const yargsOptions = {\n  'src-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap from',\n  },\n  'dest-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap to',\n  },\n  'chainflip-network': {\n    choices: cliNetworks,\n    describe: 'The Chainflip network to execute the swap on',\n    default: ChainflipNetworks.sisyphos,\n  },\n  amount: {\n    type: 'string',\n    demandOption: true,\n    describe: 'The amount to swap',\n  },\n  'dest-address': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The address to send the swapped assets to',\n  },\n  message: {\n    type: 'string',\n    describe: 'The message that is sent along with the swapped assets',\n  },\n  'gas-budget': {\n    type: 'string',\n    describe: 'The amount of gas that is sent with the message',\n  },\n  'wallet-private-key': {\n    type: 'string',\n    describe: 'The private key of the wallet to use',\n  },\n  'src-token-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the token to swap from when `chainflip-network` is `localnet`',\n  },\n  'vault-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the vault when `chainflip-network` is `localnet`',\n  },\n  'eth-network': {\n    type: 'string',\n    describe:\n      'The eth network URL to use when `chainflip-network` is `localnet`',\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliExecuteSwap(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  const privateKey = args.walletPrivateKey ?? (await askForPrivateKey());\n\n  const ethNetwork = getEthNetwork(args);\n\n  const wallet = new Wallet(privateKey).connect(\n    process.env.ALCHEMY_KEY\n      ? new AlchemyProvider(ethNetwork, process.env.ALCHEMY_KEY)\n      : getDefaultProvider(ethNetwork),\n  );\n\n  const networkOpts: SwapNetworkOptions =\n    args.chainflipNetwork === 'localnet'\n      ? {\n          vaultContractAddress: args.vaultContractAddress as string,\n          srcTokenContractAddress: args.srcTokenContractAddress as string,\n          signer: wallet,\n          network: args.chainflipNetwork,\n        }\n      : { network: args.chainflipNetwork, signer: wallet };\n\n  let ccmMetadata;\n  if (args.gasBudget || args.message) {\n    assert(args.gasBudget, 'missing gas budget');\n    assert(args.message, 'missing message');\n    ccmMetadata = {\n      message: args.message,\n      gasBudget: args.gasBudget,\n    };\n  }\n\n  const receipt = await executeSwap(\n    {\n      srcChain: assetChains[args.srcAsset],\n      srcAsset: args.srcAsset,\n      destChain: assetChains[args.destAsset],\n      destAsset: args.destAsset,\n      amount: args.amount,\n      destAddress: args.destAddress,\n      ccmMetadata,\n    } as ExecuteSwapParams,\n    networkOpts,\n    {},\n  );\n\n  console.log(`Swap executed. Transaction hash: ${receipt.hash}`);\n}\n","import { createInterface } from 'node:readline/promises';\nimport { ChainflipNetworks } from '@/shared/enums';\nimport { chainflipNetwork } from '@/shared/parsers';\nimport { ChainflipNetwork } from './enums';\n\nexport const askForPrivateKey = async () => {\n  const rl = createInterface({ input: process.stdin, output: process.stdout });\n\n  try {\n    return await rl.question(\"Please enter your wallet's private key: \");\n  } finally {\n    rl.close();\n  }\n};\n\ntype GetEthNetworkOptions =\n  | { chainflipNetwork: 'localnet'; ethNetwork?: string }\n  | { chainflipNetwork: ChainflipNetwork };\n\nexport function getEthNetwork(opts: GetEthNetworkOptions) {\n  if (opts.chainflipNetwork === 'localnet') return opts.ethNetwork as string;\n  if (opts.chainflipNetwork === ChainflipNetworks.mainnet) return 'mainnet';\n  return 'goerli';\n}\n\nexport const cliNetworks = [\n  ...Object.values(chainflipNetwork.enum),\n  'localnet',\n] as const;\n","import { AlchemyProvider, Wallet, getDefaultProvider } from 'ethers';\nimport { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { ChainflipNetworks } from '@/shared/enums';\nimport { FundingNetworkOptions, fundStateChainAccount } from '../lib';\nimport { askForPrivateKey, getEthNetwork, cliNetworks } from '../utils';\n\nexport const yargsOptions = {\n  'src-account-id': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The account ID for the validator to be funded',\n  },\n  'chainflip-network': {\n    choices: cliNetworks,\n    describe: 'The Chainflip network to execute the swap on',\n    default: ChainflipNetworks.sisyphos,\n  },\n  amount: {\n    type: 'string',\n    demandOption: true,\n    describe: 'The amount in Flipperino to fund',\n  },\n  'wallet-private-key': {\n    type: 'string',\n    describe: 'The private key of the wallet to use',\n  },\n  'state-chain-manager-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the state chain manager when `chainflip-network` is `localnet`',\n  },\n  'flip-token-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address for the FLIP token when `chainflip-network` is `localnet`',\n  },\n  'eth-network': {\n    type: 'string',\n    describe:\n      'The eth network URL to use when `chainflip-network` is `localnet`',\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliFundStateChainAccount(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  const privateKey = args.walletPrivateKey ?? (await askForPrivateKey());\n\n  const ethNetwork = getEthNetwork(args);\n\n  const wallet = new Wallet(privateKey).connect(\n    process.env.ALCHEMY_KEY\n      ? new AlchemyProvider(ethNetwork, process.env.ALCHEMY_KEY)\n      : getDefaultProvider(ethNetwork),\n  );\n\n  const networkOpts: FundingNetworkOptions =\n    args.chainflipNetwork === 'localnet'\n      ? {\n          stateChainGatewayContractAddress:\n            args.stateChainManagerContractAddress as string,\n          flipContractAddress: args.flipTokenContractAddress as string,\n          signer: wallet,\n          network: args.chainflipNetwork,\n        }\n      : { network: args.chainflipNetwork, signer: wallet };\n\n  const receipt = await fundStateChainAccount(\n    args.srcAccountId as `0x${string}`,\n    BigInt(args.amount),\n    networkOpts,\n    {},\n  );\n\n  console.log(`Call executed. Transaction hash: ${receipt.hash}`);\n}\n","import { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { Assets, Chains } from '@/shared/enums';\nimport { assert } from '@/shared/guards';\nimport { CcmMetadata } from '@/shared/schemas';\nimport { broker } from '../lib';\n\nexport const yargsOptions = {\n  'src-asset': {\n    choices: Object.values(Assets),\n    describe: 'The asset to swap from',\n    demandOption: true,\n  },\n  'dest-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap to',\n  },\n  'dest-address': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The address to send the swapped assets to',\n  },\n  'broker-url': {\n    type: 'string',\n    describe: 'The broker URL',\n    demandOption: true,\n  },\n  'src-chain': {\n    choices: Object.values(Chains),\n    describe: 'The chain to swap from',\n    demandOption: true,\n  },\n  'dest-chain': {\n    choices: Object.values(Chains),\n    describe: 'The chain to swap to',\n    demandOption: true,\n  },\n  message: {\n    type: 'string',\n    describe: 'The CCM message that is sent along with the swapped assets',\n  },\n  'gas-budget': {\n    type: 'string',\n    describe: 'The amount of gas that is sent with the CCM message',\n  },\n  network: {\n    type: 'string',\n    demandOption: true,\n    choices: ['mainnet', 'perseverance', 'backspin', 'sisyphos'],\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliRequestSwapDepositAddress(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  let ccmMetadata: CcmMetadata | undefined;\n\n  if (args.gasBudget || args.message) {\n    assert(args.gasBudget, 'missing gas budget');\n    assert(args.message, 'missing message');\n\n    ccmMetadata = {\n      gasBudget: args.gasBudget,\n      message: args.message as `0x${string}`,\n    };\n  }\n  const result = await broker.requestSwapDepositAddress(\n    {\n      srcAsset: args.srcAsset,\n      destAsset: args.destAsset,\n      destAddress: args.destAddress,\n      srcChain: args.srcChain,\n      destChain: args.destChain,\n      ccmMetadata,\n    },\n    {\n      url: args.brokerUrl,\n      commissionBps: 0,\n    },\n    args.network,\n  );\n\n  console.log(`Deposit address: ${result.address}`);\n  console.log(`Issued block: ${result.issuedBlock}`);\n  console.log(`Channel ID: ${result.channelId}`);\n}\n","#! /usr/bin/env node\nimport cli from './cli';\n\ncli(process.argv.slice(2));\n"]}