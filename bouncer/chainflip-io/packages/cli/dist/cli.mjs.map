{"version":3,"sources":["../src/cli.ts","../src/commands/cliExecuteCall.ts","../src/utils.ts","../src/commands/cliExecuteSwap.ts","../src/commands/cliFundStateChainAccount.ts","../src/commands/cliRequestSwapDepositAddress.ts","../src/main.ts"],"names":["yargs","getDefaultProvider","providers","Wallet","createInterface","askForPrivateKey","rl","input","process","stdin","output","stdout","question","close","getEthNetwork","opts","chainflipNetwork","ethNetwork","ChainflipNetworks","mainnet","cliNetworks","Object","values","enum","yargsOptions","choices","Assets","demandOption","describe","default","sisyphos","amount","type","message","args","privateKey","walletPrivateKey","wallet","connect","env","ALCHEMY_KEY","AlchemyProvider","vaultContractAddress","srcTokenContractAddress","signer","network","receipt","executeCall","srcChain","assetChains","srcAsset","destChain","destAsset","destAddress","gasAmount","console","log","transactionHash","cliExecuteCall","executeSwap","cliExecuteSwap","stateChainGatewayContractAddress","stateChainManagerContractAddress","flipContractAddress","flipTokenContractAddress","fundStateChainAccount","srcAccountId","cliFundStateChainAccount","Chains","client","BrokerClient","create","url","brokerUrl","result","requestSwapDepositAddress","address","issuedBlock","expiryBlock","channelId","cliRequestSwapDepositAddress","scriptName","usage","command","cliExecuteSwapOptions","cliExecuteCallOptions","cliFundStateChainAccountOptions","cliRequestSwapDepositAddressOptions","wrap","strict","help","parse","cli","argv","slice"],"mappings":"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","sourcesContent":["import yargs from 'yargs/yargs';\nimport cliExecuteCall, {\n  yargsOptions as cliExecuteCallOptions,\n} from './commands/cliExecuteCall';\nimport cliExecuteSwap, {\n  yargsOptions as cliExecuteSwapOptions,\n} from './commands/cliExecuteSwap';\nimport cliFundStateChainAccount, {\n  yargsOptions as cliFundStateChainAccountOptions,\n} from './commands/cliFundStateChainAccount';\nimport cliRequestSwapDepositAddress, {\n  yargsOptions as cliRequestSwapDepositAddressOptions,\n} from './commands/cliRequestSwapDepositAddress';\n\nexport default async function cli(args: string[]) {\n  return yargs(args)\n    .scriptName('chainflip-cli')\n    .usage('$0 <cmd> [args]')\n    .command('swap', '', cliExecuteSwapOptions, cliExecuteSwap)\n    .command('call', '', cliExecuteCallOptions, cliExecuteCall)\n    .command(\n      'fund-state-chain-account',\n      '',\n      cliFundStateChainAccountOptions,\n      cliFundStateChainAccount,\n    )\n    .command(\n      'request-swap-deposit-address',\n      '',\n      cliRequestSwapDepositAddressOptions,\n      cliRequestSwapDepositAddress,\n    )\n    .wrap(0)\n    .strict()\n    .help()\n    .parse();\n}\n","import { getDefaultProvider, providers, Wallet } from 'ethers';\nimport { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { assetChains, Assets, ChainflipNetworks } from '@/shared/enums';\nimport {\n  type ExecuteOptions,\n  executeCall,\n  type ExecuteCallParams,\n} from '@/shared/vault';\nimport { askForPrivateKey, getEthNetwork, cliNetworks } from '../utils';\n\nexport const yargsOptions = {\n  'src-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap from',\n  },\n  'dest-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap to',\n  },\n  'chainflip-network': {\n    choices: cliNetworks,\n    describe: 'The Chainflip network to execute the swap on',\n    default: ChainflipNetworks.sisyphos,\n  },\n  amount: {\n    type: 'string',\n    demandOption: true,\n    describe: 'The amount to swap',\n  },\n  'dest-address': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The address to send the swapped assets to',\n  },\n  message: {\n    type: 'string',\n    demandOption: true,\n    describe: 'The message that is sent along with the swapped assets',\n  },\n  'gas-amount': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The maximum gas amount that is sent with the message',\n  },\n  'wallet-private-key': {\n    type: 'string',\n    describe: 'The private key of the wallet to use',\n  },\n  'src-token-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the token to swap from when `chainflip-network` is `localnet`',\n  },\n  'vault-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the vault when `chainflip-network` is `localnet`',\n  },\n  'eth-network': {\n    type: 'string',\n    describe:\n      'The eth network URL to use when `chainflip-network` is `localnet`',\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliExecuteCall(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  const privateKey = args.walletPrivateKey ?? (await askForPrivateKey());\n\n  const ethNetwork = getEthNetwork(args);\n\n  const wallet = new Wallet(privateKey).connect(\n    process.env.ALCHEMY_KEY\n      ? new providers.AlchemyProvider(ethNetwork, process.env.ALCHEMY_KEY)\n      : getDefaultProvider(ethNetwork),\n  );\n\n  const opts: ExecuteOptions =\n    args.chainflipNetwork === 'localnet'\n      ? {\n          vaultContractAddress: args.vaultContractAddress as string,\n          srcTokenContractAddress: args.srcTokenContractAddress as string,\n          signer: wallet,\n          network: args.chainflipNetwork,\n        }\n      : { network: args.chainflipNetwork, signer: wallet };\n\n  const receipt = await executeCall(\n    {\n      srcChain: assetChains[args.srcAsset],\n      srcAsset: args.srcAsset,\n      destChain: assetChains[args.destAsset],\n      destAsset: args.destAsset,\n      amount: args.amount,\n      destAddress: args.destAddress,\n      message: args.message,\n      gasAmount: args.gasAmount,\n    } as ExecuteCallParams,\n    opts,\n  );\n\n  console.log(`Call executed. Transaction hash: ${receipt.transactionHash}`);\n}\n","import { createInterface } from 'node:readline/promises';\nimport { ChainflipNetworks } from '@/shared/enums';\nimport { chainflipNetwork } from '@/shared/parsers';\nimport { ChainflipNetwork } from './enums';\n\nexport const askForPrivateKey = async () => {\n  const rl = createInterface({ input: process.stdin, output: process.stdout });\n\n  try {\n    return await rl.question(\"Please enter your wallet's private key: \");\n  } finally {\n    rl.close();\n  }\n};\n\ntype GetEthNetworkOptions =\n  | { chainflipNetwork: 'localnet'; ethNetwork?: string }\n  | { chainflipNetwork: ChainflipNetwork };\n\nexport function getEthNetwork(opts: GetEthNetworkOptions) {\n  if (opts.chainflipNetwork === 'localnet') return opts.ethNetwork;\n  if (opts.chainflipNetwork === ChainflipNetworks.mainnet) return 'mainnet';\n  return 'goerli';\n}\n\nexport const cliNetworks = [\n  ...Object.values(chainflipNetwork.enum),\n  'localnet',\n] as const;\n","import { getDefaultProvider, providers, Wallet } from 'ethers';\nimport { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { assetChains, Assets, ChainflipNetworks } from '@/shared/enums';\nimport {\n  executeSwap,\n  type ExecuteOptions,\n  type ExecuteSwapParams,\n} from '@/shared/vault';\nimport { askForPrivateKey, getEthNetwork, cliNetworks } from '../utils';\n\nexport const yargsOptions = {\n  'src-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap from',\n  },\n  'dest-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap to',\n  },\n  'chainflip-network': {\n    choices: cliNetworks,\n    describe: 'The Chainflip network to execute the swap on',\n    default: ChainflipNetworks.sisyphos,\n  },\n  amount: {\n    type: 'string',\n    demandOption: true,\n    describe: 'The amount to swap',\n  },\n  'dest-address': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The address to send the swapped assets to',\n  },\n  'wallet-private-key': {\n    type: 'string',\n    describe: 'The private key of the wallet to use',\n  },\n  'src-token-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the token to swap from when `chainflip-network` is `localnet`',\n  },\n  'vault-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the vault when `chainflip-network` is `localnet`',\n  },\n  'eth-network': {\n    type: 'string',\n    describe:\n      'The eth network URL to use when `chainflip-network` is `localnet`',\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliExecuteSwap(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  const privateKey = args.walletPrivateKey ?? (await askForPrivateKey());\n\n  const ethNetwork = getEthNetwork(args);\n\n  const wallet = new Wallet(privateKey).connect(\n    process.env.ALCHEMY_KEY\n      ? new providers.AlchemyProvider(ethNetwork, process.env.ALCHEMY_KEY)\n      : getDefaultProvider(ethNetwork),\n  );\n\n  const opts: ExecuteOptions =\n    args.chainflipNetwork === 'localnet'\n      ? {\n          vaultContractAddress: args.vaultContractAddress as string,\n          srcTokenContractAddress: args.srcTokenContractAddress as string,\n          signer: wallet,\n          network: args.chainflipNetwork,\n        }\n      : { network: args.chainflipNetwork, signer: wallet };\n\n  const receipt = await executeSwap(\n    {\n      srcChain: assetChains[args.srcAsset],\n      srcAsset: args.srcAsset,\n      destChain: assetChains[args.destAsset],\n      destAsset: args.destAsset,\n      amount: args.amount,\n      destAddress: args.destAddress,\n    } as ExecuteSwapParams,\n    opts,\n  );\n\n  console.log(`Swap executed. Transaction hash: ${receipt.transactionHash}`);\n}\n","import { Wallet, getDefaultProvider, providers } from 'ethers';\nimport { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { ChainflipNetworks } from '@/shared/enums';\nimport { FundStateChainAccountOptions } from '@/shared/stateChainGateway';\nimport { fundStateChainAccount } from '../lib';\nimport { askForPrivateKey, getEthNetwork, cliNetworks } from '../utils';\n\nexport const yargsOptions = {\n  'src-account-id': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The account ID for the validator to be funded',\n  },\n  'chainflip-network': {\n    choices: cliNetworks,\n    describe: 'The Chainflip network to execute the swap on',\n    default: ChainflipNetworks.sisyphos,\n  },\n  amount: {\n    type: 'string',\n    demandOption: true,\n    describe: 'The amount in Flipperino to fund',\n  },\n  'wallet-private-key': {\n    type: 'string',\n    describe: 'The private key of the wallet to use',\n  },\n  'state-chain-manager-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address of the state chain manager when `chainflip-network` is `localnet`',\n  },\n  'flip-token-contract-address': {\n    type: 'string',\n    describe:\n      'The contract address for the FLIP token when `chainflip-network` is `localnet`',\n  },\n  'eth-network': {\n    type: 'string',\n    describe:\n      'The eth network URL to use when `chainflip-network` is `localnet`',\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliFundStateChainAccount(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  const privateKey = args.walletPrivateKey ?? (await askForPrivateKey());\n\n  const ethNetwork = getEthNetwork(args);\n\n  const wallet = new Wallet(privateKey).connect(\n    process.env.ALCHEMY_KEY\n      ? new providers.AlchemyProvider(ethNetwork, process.env.ALCHEMY_KEY)\n      : getDefaultProvider(ethNetwork),\n  );\n\n  const opts: FundStateChainAccountOptions =\n    args.chainflipNetwork === 'localnet'\n      ? {\n          stateChainGatewayContractAddress:\n            args.stateChainManagerContractAddress as string,\n          flipContractAddress: args.flipTokenContractAddress as string,\n          signer: wallet,\n          network: args.chainflipNetwork,\n        }\n      : { network: args.chainflipNetwork, signer: wallet };\n\n  const receipt = await fundStateChainAccount(\n    args.srcAccountId as `0x${string}`,\n    args.amount,\n    opts,\n  );\n\n  console.log(`Call executed. Transaction hash: ${receipt.transactionHash}`);\n}\n","import { ArgumentsCamelCase, InferredOptionTypes, Options } from 'yargs';\nimport { Assets, Chains } from '@/shared/enums';\nimport { BrokerClient } from '../lib';\n\nexport const yargsOptions = {\n  'src-asset': {\n    choices: Object.values(Assets),\n    describe: 'The asset to swap from',\n    demandOption: true,\n  },\n  'dest-asset': {\n    choices: Object.values(Assets),\n    demandOption: true,\n    describe: 'The asset to swap to',\n  },\n  'dest-address': {\n    type: 'string',\n    demandOption: true,\n    describe: 'The address to send the swapped assets to',\n  },\n  'broker-url': {\n    type: 'string',\n    describe: 'The broker URL',\n    demandOption: true,\n  },\n  'src-chain': {\n    choices: Object.values(Chains),\n    describe: 'The chain to swap from',\n    demandOption: true,\n  },\n  'dest-chain': {\n    choices: Object.values(Chains),\n    describe: 'The chain to swap to',\n    demandOption: true,\n  },\n} as const satisfies { [key: string]: Options };\n\nexport default async function cliRequestSwapDepositAddress(\n  args: ArgumentsCamelCase<InferredOptionTypes<typeof yargsOptions>>,\n) {\n  const client = await BrokerClient.create({ url: args.brokerUrl });\n\n  const result = await client.requestSwapDepositAddress({\n    srcAsset: args.srcAsset,\n    destAsset: args.destAsset,\n    destAddress: args.destAddress,\n    srcChain: args.srcChain,\n    destChain: args.destChain,\n  });\n\n  console.log(`Deposit address: ${result.address}`);\n  console.log(`Issued block: ${result.issuedBlock}`);\n  console.log(`Expiry block: ${result.expiryBlock}`);\n  console.log(`Channel ID: ${result.channelId}`);\n\n  await client.close();\n}\n","#! /usr/bin/env node\nimport cli from './cli';\n\ncli(process.argv.slice(2));\n"]}