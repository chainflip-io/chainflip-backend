// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// `pnpm prisma format` after changes :)

generator client {
  provider        = "prisma-client-js"
  // https://github.com/prisma/prisma/issues/2584#issuecomment-646414549
  // https://github.com/prisma/prisma/issues/6603#issuecomment-849979849
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "private"]
}

enum Chain {
  Polkadot
  Ethereum
  Bitcoin

  @@schema("public")
}

enum Asset {
  FLIP
  USDC
  DOT
  ETH
  BTC

  @@schema("public")
}

model SwapDepositChannel {
  id                    BigInt   @id @default(autoincrement())
  channelId             BigInt
  srcChain              Chain
  srcAsset              Asset
  depositAddress        String
  expectedDepositAmount Decimal  @db.Decimal(30, 0)
  destAsset             Asset
  destAddress           String
  expiryBlock           Int
  issuedBlock           Int
  createdAt             DateTime @default(now())
  swaps                 Swap[]

  @@unique([issuedBlock, srcChain, channelId])
  @@index([depositAddress])
  @@schema("public")
}

model Swap {
  id                        BigInt              @id @default(autoincrement())
  /// the swap id on the state chain
  nativeId                  BigInt              @unique
  srcAsset                  Asset
  depositAmount             Decimal             @db.Decimal(30, 0)
  intermediateAmount        Decimal?            @db.Decimal(30, 0)
  egressAmount              Decimal?            @db.Decimal(30, 0)
  destAsset                 Asset
  destAddress               String
  depositReceivedAt         DateTime
  depositReceivedBlockIndex String
  swapExecutedAt            DateTime?
  swapExecutedBlockIndex    String?
  swapDepositChannel        SwapDepositChannel? @relation(fields: [swapDepositChannelId], references: [id])
  swapDepositChannelId      BigInt?
  txHash                    String?
  egress                    Egress?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @default(now()) @updatedAt

  @@schema("public")
}

model Egress {
  id                  BigInt     @id @default(autoincrement())
  /// the egress id on the state chain
  nativeId            BigInt
  chain               Chain
  amount              Decimal    @db.Decimal(30, 0)
  scheduledAt         DateTime
  scheduledBlockIndex String
  swap                Swap?      @relation(fields: [swapId], references: [id])
  swapId              BigInt?    @unique
  broadcast           Broadcast? @relation(fields: [broadcastId], references: [id])
  broadcastId         BigInt?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @default(now()) @updatedAt

  @@unique([nativeId, chain])
  @@schema("public")
}

model Broadcast {
  id                  BigInt    @id @default(autoincrement())
  /// the broadcast id on the state chain
  nativeId            BigInt
  chain               Chain
  egresses            Egress[]
  requestedAt         DateTime
  requestedBlockIndex String
  succeededAt         DateTime?
  succeededBlockIndex String?
  abortedAt           DateTime?
  abortedBlockIndex   String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt

  @@unique([nativeId, chain])
  @@schema("public")
}

model State {
  id     Int @id @default(autoincrement())
  height Int @default(0)

  @@schema("private")
}

model MarketMaker {
  id        Int    @id @default(autoincrement())
  name      String @unique
  publicKey String

  @@schema("private")
}

enum ThirdPartyProtocol {
  lifi
  squid

  @@schema("public")
}

model ThirdPartySwap {
  id            BigInt             @id @default(autoincrement())
  uuid          String             @unique
  protocol      ThirdPartyProtocol
  routeResponse Json
  txHash        String
  txLink        String
  createdAt     DateTime           @default(now())

  @@schema("public")
}
