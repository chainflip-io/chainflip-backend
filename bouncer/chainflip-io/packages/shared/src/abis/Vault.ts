/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IShared {
  export type SigDataStruct = {
    sig: BigNumberish;
    nonce: BigNumberish;
    kTimesGAddress: string;
  };

  export type SigDataStructOutput = [BigNumber, BigNumber, string] & {
    sig: BigNumber;
    nonce: BigNumber;
    kTimesGAddress: string;
  };

  export type DeployFetchParamsStruct = { swapID: BytesLike; token: string };

  export type DeployFetchParamsStructOutput = [string, string] & {
    swapID: string;
    token: string;
  };

  export type FetchParamsStruct = { fetchContract: string; token: string };

  export type FetchParamsStructOutput = [string, string] & {
    fetchContract: string;
    token: string;
  };

  export type TransferParamsStruct = {
    token: string;
    recipient: string;
    amount: BigNumberish;
  };

  export type TransferParamsStructOutput = [string, string, BigNumber] & {
    token: string;
    recipient: string;
    amount: BigNumber;
  };
}

export declare namespace IMulticall {
  export type CallStruct = {
    callType: BigNumberish;
    target: string;
    value: BigNumberish;
    callData: BytesLike;
    payload: BytesLike;
  };

  export type CallStructOutput = [number, string, BigNumber, string, string] & {
    callType: number;
    target: string;
    value: BigNumber;
    callData: string;
    payload: string;
  };
}

export interface VaultInterface extends utils.Interface {
  functions: {
    "addGasNative(bytes32)": FunctionFragment;
    "addGasToken(bytes32,uint256,address)": FunctionFragment;
    "allBatch((uint256,uint256,address),(bytes32,address)[],(address,address)[],(address,address,uint256)[])": FunctionFragment;
    "deployAndFetchBatch((uint256,uint256,address),(bytes32,address)[])": FunctionFragment;
    "disableCommunityGuard()": FunctionFragment;
    "enableCommunityGuard()": FunctionFragment;
    "executeActions((uint256,uint256,address),(address,address,uint256),(uint8,address,uint256,bytes,bytes)[],uint256)": FunctionFragment;
    "executexCall((uint256,uint256,address),address,uint32,bytes,bytes)": FunctionFragment;
    "executexSwapAndCall((uint256,uint256,address),(address,address,uint256),uint32,bytes,bytes)": FunctionFragment;
    "fetchBatch((uint256,uint256,address),(address,address)[])": FunctionFragment;
    "getCommunityGuardDisabled()": FunctionFragment;
    "getCommunityKey()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getKeyManager()": FunctionFragment;
    "getSuspendedState()": FunctionFragment;
    "govWithdraw(address[])": FunctionFragment;
    "resume()": FunctionFragment;
    "suspend()": FunctionFragment;
    "transfer((uint256,uint256,address),(address,address,uint256))": FunctionFragment;
    "transferBatch((uint256,uint256,address),(address,address,uint256)[])": FunctionFragment;
    "updateKeyManager((uint256,uint256,address),address,bool)": FunctionFragment;
    "xCallNative(uint32,bytes,uint32,bytes,uint256,bytes)": FunctionFragment;
    "xCallToken(uint32,bytes,uint32,bytes,uint256,address,uint256,bytes)": FunctionFragment;
    "xSwapNative(uint32,bytes,uint32,bytes)": FunctionFragment;
    "xSwapToken(uint32,bytes,uint32,address,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGasNative"
      | "addGasToken"
      | "allBatch"
      | "deployAndFetchBatch"
      | "disableCommunityGuard"
      | "enableCommunityGuard"
      | "executeActions"
      | "executexCall"
      | "executexSwapAndCall"
      | "fetchBatch"
      | "getCommunityGuardDisabled"
      | "getCommunityKey"
      | "getGovernor"
      | "getKeyManager"
      | "getSuspendedState"
      | "govWithdraw"
      | "resume"
      | "suspend"
      | "transfer"
      | "transferBatch"
      | "updateKeyManager"
      | "xCallNative"
      | "xCallToken"
      | "xSwapNative"
      | "xSwapToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGasNative",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addGasToken",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allBatch",
    values: [
      IShared.SigDataStruct,
      IShared.DeployFetchParamsStruct[],
      IShared.FetchParamsStruct[],
      IShared.TransferParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAndFetchBatch",
    values: [IShared.SigDataStruct, IShared.DeployFetchParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disableCommunityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableCommunityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeActions",
    values: [
      IShared.SigDataStruct,
      IShared.TransferParamsStruct,
      IMulticall.CallStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executexCall",
    values: [IShared.SigDataStruct, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executexSwapAndCall",
    values: [
      IShared.SigDataStruct,
      IShared.TransferParamsStruct,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchBatch",
    values: [IShared.SigDataStruct, IShared.FetchParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityGuardDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuspendedState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govWithdraw",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(functionFragment: "suspend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [IShared.SigDataStruct, IShared.TransferParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBatch",
    values: [IShared.SigDataStruct, IShared.TransferParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyManager",
    values: [IShared.SigDataStruct, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "xCallNative",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xCallToken",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xSwapNative",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xSwapToken",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGasNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployAndFetchBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableCommunityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCommunityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executexCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executexSwapAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityGuardDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuspendedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "suspend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xCallNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xCallToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xSwapNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xSwapToken", data: BytesLike): Result;

  events: {
    "AddGasNative(bytes32,uint256)": EventFragment;
    "AddGasToken(bytes32,uint256,address)": EventFragment;
    "CommunityGuardDisabled(bool)": EventFragment;
    "ExecuteActionsFailed(address,uint256,address,bytes)": EventFragment;
    "Suspended(bool)": EventFragment;
    "SwapNative(uint32,bytes,uint32,uint256,address,bytes)": EventFragment;
    "SwapToken(uint32,bytes,uint32,address,uint256,address,bytes)": EventFragment;
    "TransferNativeFailed(address,uint256)": EventFragment;
    "TransferTokenFailed(address,uint256,address,bytes)": EventFragment;
    "UpdatedKeyManager(address)": EventFragment;
    "XCallNative(uint32,bytes,uint32,uint256,address,bytes,uint256,bytes)": EventFragment;
    "XCallToken(uint32,bytes,uint32,address,uint256,address,bytes,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddGasNative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddGasToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityGuardDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteActionsFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Suspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapNative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferNativeFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTokenFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedKeyManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XCallNative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XCallToken"): EventFragment;
}

export interface AddGasNativeEventObject {
  swapID: string;
  amount: BigNumber;
}
export type AddGasNativeEvent = TypedEvent<
  [string, BigNumber],
  AddGasNativeEventObject
>;

export type AddGasNativeEventFilter = TypedEventFilter<AddGasNativeEvent>;

export interface AddGasTokenEventObject {
  swapID: string;
  amount: BigNumber;
  token: string;
}
export type AddGasTokenEvent = TypedEvent<
  [string, BigNumber, string],
  AddGasTokenEventObject
>;

export type AddGasTokenEventFilter = TypedEventFilter<AddGasTokenEvent>;

export interface CommunityGuardDisabledEventObject {
  communityGuardDisabled: boolean;
}
export type CommunityGuardDisabledEvent = TypedEvent<
  [boolean],
  CommunityGuardDisabledEventObject
>;

export type CommunityGuardDisabledEventFilter =
  TypedEventFilter<CommunityGuardDisabledEvent>;

export interface ExecuteActionsFailedEventObject {
  multicallAddress: string;
  amount: BigNumber;
  token: string;
  reason: string;
}
export type ExecuteActionsFailedEvent = TypedEvent<
  [string, BigNumber, string, string],
  ExecuteActionsFailedEventObject
>;

export type ExecuteActionsFailedEventFilter =
  TypedEventFilter<ExecuteActionsFailedEvent>;

export interface SuspendedEventObject {
  suspended: boolean;
}
export type SuspendedEvent = TypedEvent<[boolean], SuspendedEventObject>;

export type SuspendedEventFilter = TypedEventFilter<SuspendedEvent>;

export interface SwapNativeEventObject {
  dstChain: number;
  dstAddress: string;
  dstToken: number;
  amount: BigNumber;
  sender: string;
  cfParameters: string;
}
export type SwapNativeEvent = TypedEvent<
  [number, string, number, BigNumber, string, string],
  SwapNativeEventObject
>;

export type SwapNativeEventFilter = TypedEventFilter<SwapNativeEvent>;

export interface SwapTokenEventObject {
  dstChain: number;
  dstAddress: string;
  dstToken: number;
  srcToken: string;
  amount: BigNumber;
  sender: string;
  cfParameters: string;
}
export type SwapTokenEvent = TypedEvent<
  [number, string, number, string, BigNumber, string, string],
  SwapTokenEventObject
>;

export type SwapTokenEventFilter = TypedEventFilter<SwapTokenEvent>;

export interface TransferNativeFailedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type TransferNativeFailedEvent = TypedEvent<
  [string, BigNumber],
  TransferNativeFailedEventObject
>;

export type TransferNativeFailedEventFilter =
  TypedEventFilter<TransferNativeFailedEvent>;

export interface TransferTokenFailedEventObject {
  recipient: string;
  amount: BigNumber;
  token: string;
  reason: string;
}
export type TransferTokenFailedEvent = TypedEvent<
  [string, BigNumber, string, string],
  TransferTokenFailedEventObject
>;

export type TransferTokenFailedEventFilter =
  TypedEventFilter<TransferTokenFailedEvent>;

export interface UpdatedKeyManagerEventObject {
  keyManager: string;
}
export type UpdatedKeyManagerEvent = TypedEvent<
  [string],
  UpdatedKeyManagerEventObject
>;

export type UpdatedKeyManagerEventFilter =
  TypedEventFilter<UpdatedKeyManagerEvent>;

export interface XCallNativeEventObject {
  dstChain: number;
  dstAddress: string;
  dstToken: number;
  amount: BigNumber;
  sender: string;
  message: string;
  gasAmount: BigNumber;
  cfParameters: string;
}
export type XCallNativeEvent = TypedEvent<
  [number, string, number, BigNumber, string, string, BigNumber, string],
  XCallNativeEventObject
>;

export type XCallNativeEventFilter = TypedEventFilter<XCallNativeEvent>;

export interface XCallTokenEventObject {
  dstChain: number;
  dstAddress: string;
  dstToken: number;
  srcToken: string;
  amount: BigNumber;
  sender: string;
  message: string;
  gasAmount: BigNumber;
  cfParameters: string;
}
export type XCallTokenEvent = TypedEvent<
  [
    number,
    string,
    number,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    string
  ],
  XCallTokenEventObject
>;

export type XCallTokenEventFilter = TypedEventFilter<XCallTokenEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGasNative(
      swapID: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    addGasToken(
      swapID: BytesLike,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allBatch(
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      fetchParamsArray: IShared.FetchParamsStruct[],
      transferParamsArray: IShared.TransferParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployAndFetchBatch(
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    disableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeActions(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      calls: IMulticall.CallStruct[],
      gasMulticall: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executexCall(
      sigData: IShared.SigDataStruct,
      recipient: string,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executexSwapAndCall(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fetchBatch(
      sigData: IShared.SigDataStruct,
      fetchParamsArray: IShared.FetchParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCommunityGuardDisabled(overrides?: CallOverrides): Promise<[boolean]>;

    getCommunityKey(overrides?: CallOverrides): Promise<[string]>;

    getGovernor(overrides?: CallOverrides): Promise<[string]>;

    getKeyManager(overrides?: CallOverrides): Promise<[string]>;

    getSuspendedState(overrides?: CallOverrides): Promise<[boolean]>;

    govWithdraw(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    suspend(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transfer(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferBatch(
      sigData: IShared.SigDataStruct,
      transferParamsArray: IShared.TransferParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateKeyManager(
      sigData: IShared.SigDataStruct,
      keyManager: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    xCallNative(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    xCallToken(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      srcToken: string,
      amount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    xSwapNative(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      cfParameters: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    xSwapToken(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      srcToken: string,
      amount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addGasNative(
    swapID: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  addGasToken(
    swapID: BytesLike,
    amount: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allBatch(
    sigData: IShared.SigDataStruct,
    deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
    fetchParamsArray: IShared.FetchParamsStruct[],
    transferParamsArray: IShared.TransferParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployAndFetchBatch(
    sigData: IShared.SigDataStruct,
    deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  disableCommunityGuard(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableCommunityGuard(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeActions(
    sigData: IShared.SigDataStruct,
    transferParams: IShared.TransferParamsStruct,
    calls: IMulticall.CallStruct[],
    gasMulticall: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executexCall(
    sigData: IShared.SigDataStruct,
    recipient: string,
    srcChain: BigNumberish,
    srcAddress: BytesLike,
    message: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executexSwapAndCall(
    sigData: IShared.SigDataStruct,
    transferParams: IShared.TransferParamsStruct,
    srcChain: BigNumberish,
    srcAddress: BytesLike,
    message: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fetchBatch(
    sigData: IShared.SigDataStruct,
    fetchParamsArray: IShared.FetchParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCommunityGuardDisabled(overrides?: CallOverrides): Promise<boolean>;

  getCommunityKey(overrides?: CallOverrides): Promise<string>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  getKeyManager(overrides?: CallOverrides): Promise<string>;

  getSuspendedState(overrides?: CallOverrides): Promise<boolean>;

  govWithdraw(
    tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  suspend(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transfer(
    sigData: IShared.SigDataStruct,
    transferParams: IShared.TransferParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferBatch(
    sigData: IShared.SigDataStruct,
    transferParamsArray: IShared.TransferParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateKeyManager(
    sigData: IShared.SigDataStruct,
    keyManager: string,
    omitChecks: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  xCallNative(
    dstChain: BigNumberish,
    dstAddress: BytesLike,
    dstToken: BigNumberish,
    message: BytesLike,
    gasAmount: BigNumberish,
    cfParameters: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  xCallToken(
    dstChain: BigNumberish,
    dstAddress: BytesLike,
    dstToken: BigNumberish,
    message: BytesLike,
    gasAmount: BigNumberish,
    srcToken: string,
    amount: BigNumberish,
    cfParameters: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  xSwapNative(
    dstChain: BigNumberish,
    dstAddress: BytesLike,
    dstToken: BigNumberish,
    cfParameters: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  xSwapToken(
    dstChain: BigNumberish,
    dstAddress: BytesLike,
    dstToken: BigNumberish,
    srcToken: string,
    amount: BigNumberish,
    cfParameters: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGasNative(swapID: BytesLike, overrides?: CallOverrides): Promise<void>;

    addGasToken(
      swapID: BytesLike,
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allBatch(
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      fetchParamsArray: IShared.FetchParamsStruct[],
      transferParamsArray: IShared.TransferParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    deployAndFetchBatch(
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    disableCommunityGuard(overrides?: CallOverrides): Promise<void>;

    enableCommunityGuard(overrides?: CallOverrides): Promise<void>;

    executeActions(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      calls: IMulticall.CallStruct[],
      gasMulticall: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executexCall(
      sigData: IShared.SigDataStruct,
      recipient: string,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executexSwapAndCall(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchBatch(
      sigData: IShared.SigDataStruct,
      fetchParamsArray: IShared.FetchParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCommunityGuardDisabled(overrides?: CallOverrides): Promise<boolean>;

    getCommunityKey(overrides?: CallOverrides): Promise<string>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    getKeyManager(overrides?: CallOverrides): Promise<string>;

    getSuspendedState(overrides?: CallOverrides): Promise<boolean>;

    govWithdraw(tokens: string[], overrides?: CallOverrides): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    suspend(overrides?: CallOverrides): Promise<void>;

    transfer(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferBatch(
      sigData: IShared.SigDataStruct,
      transferParamsArray: IShared.TransferParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateKeyManager(
      sigData: IShared.SigDataStruct,
      keyManager: string,
      omitChecks: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    xCallNative(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    xCallToken(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      srcToken: string,
      amount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    xSwapNative(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      cfParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    xSwapToken(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      srcToken: string,
      amount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddGasNative(bytes32,uint256)"(
      swapID?: null,
      amount?: null
    ): AddGasNativeEventFilter;
    AddGasNative(swapID?: null, amount?: null): AddGasNativeEventFilter;

    "AddGasToken(bytes32,uint256,address)"(
      swapID?: null,
      amount?: null,
      token?: null
    ): AddGasTokenEventFilter;
    AddGasToken(
      swapID?: null,
      amount?: null,
      token?: null
    ): AddGasTokenEventFilter;

    "CommunityGuardDisabled(bool)"(
      communityGuardDisabled?: null
    ): CommunityGuardDisabledEventFilter;
    CommunityGuardDisabled(
      communityGuardDisabled?: null
    ): CommunityGuardDisabledEventFilter;

    "ExecuteActionsFailed(address,uint256,address,bytes)"(
      multicallAddress?: string | null,
      amount?: null,
      token?: string | null,
      reason?: null
    ): ExecuteActionsFailedEventFilter;
    ExecuteActionsFailed(
      multicallAddress?: string | null,
      amount?: null,
      token?: string | null,
      reason?: null
    ): ExecuteActionsFailedEventFilter;

    "Suspended(bool)"(suspended?: null): SuspendedEventFilter;
    Suspended(suspended?: null): SuspendedEventFilter;

    "SwapNative(uint32,bytes,uint32,uint256,address,bytes)"(
      dstChain?: null,
      dstAddress?: null,
      dstToken?: null,
      amount?: null,
      sender?: string | null,
      cfParameters?: null
    ): SwapNativeEventFilter;
    SwapNative(
      dstChain?: null,
      dstAddress?: null,
      dstToken?: null,
      amount?: null,
      sender?: string | null,
      cfParameters?: null
    ): SwapNativeEventFilter;

    "SwapToken(uint32,bytes,uint32,address,uint256,address,bytes)"(
      dstChain?: null,
      dstAddress?: null,
      dstToken?: null,
      srcToken?: null,
      amount?: null,
      sender?: string | null,
      cfParameters?: null
    ): SwapTokenEventFilter;
    SwapToken(
      dstChain?: null,
      dstAddress?: null,
      dstToken?: null,
      srcToken?: null,
      amount?: null,
      sender?: string | null,
      cfParameters?: null
    ): SwapTokenEventFilter;

    "TransferNativeFailed(address,uint256)"(
      recipient?: string | null,
      amount?: null
    ): TransferNativeFailedEventFilter;
    TransferNativeFailed(
      recipient?: string | null,
      amount?: null
    ): TransferNativeFailedEventFilter;

    "TransferTokenFailed(address,uint256,address,bytes)"(
      recipient?: string | null,
      amount?: null,
      token?: string | null,
      reason?: null
    ): TransferTokenFailedEventFilter;
    TransferTokenFailed(
      recipient?: string | null,
      amount?: null,
      token?: string | null,
      reason?: null
    ): TransferTokenFailedEventFilter;

    "UpdatedKeyManager(address)"(
      keyManager?: null
    ): UpdatedKeyManagerEventFilter;
    UpdatedKeyManager(keyManager?: null): UpdatedKeyManagerEventFilter;

    "XCallNative(uint32,bytes,uint32,uint256,address,bytes,uint256,bytes)"(
      dstChain?: null,
      dstAddress?: null,
      dstToken?: null,
      amount?: null,
      sender?: string | null,
      message?: null,
      gasAmount?: null,
      cfParameters?: null
    ): XCallNativeEventFilter;
    XCallNative(
      dstChain?: null,
      dstAddress?: null,
      dstToken?: null,
      amount?: null,
      sender?: string | null,
      message?: null,
      gasAmount?: null,
      cfParameters?: null
    ): XCallNativeEventFilter;

    "XCallToken(uint32,bytes,uint32,address,uint256,address,bytes,uint256,bytes)"(
      dstChain?: null,
      dstAddress?: null,
      dstToken?: null,
      srcToken?: null,
      amount?: null,
      sender?: string | null,
      message?: null,
      gasAmount?: null,
      cfParameters?: null
    ): XCallTokenEventFilter;
    XCallToken(
      dstChain?: null,
      dstAddress?: null,
      dstToken?: null,
      srcToken?: null,
      amount?: null,
      sender?: string | null,
      message?: null,
      gasAmount?: null,
      cfParameters?: null
    ): XCallTokenEventFilter;
  };

  estimateGas: {
    addGasNative(
      swapID: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    addGasToken(
      swapID: BytesLike,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allBatch(
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      fetchParamsArray: IShared.FetchParamsStruct[],
      transferParamsArray: IShared.TransferParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployAndFetchBatch(
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    disableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeActions(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      calls: IMulticall.CallStruct[],
      gasMulticall: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executexCall(
      sigData: IShared.SigDataStruct,
      recipient: string,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executexSwapAndCall(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fetchBatch(
      sigData: IShared.SigDataStruct,
      fetchParamsArray: IShared.FetchParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCommunityGuardDisabled(overrides?: CallOverrides): Promise<BigNumber>;

    getCommunityKey(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    getKeyManager(overrides?: CallOverrides): Promise<BigNumber>;

    getSuspendedState(overrides?: CallOverrides): Promise<BigNumber>;

    govWithdraw(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    resume(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    suspend(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    transfer(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferBatch(
      sigData: IShared.SigDataStruct,
      transferParamsArray: IShared.TransferParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateKeyManager(
      sigData: IShared.SigDataStruct,
      keyManager: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    xCallNative(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    xCallToken(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      srcToken: string,
      amount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    xSwapNative(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      cfParameters: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    xSwapToken(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      srcToken: string,
      amount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGasNative(
      swapID: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addGasToken(
      swapID: BytesLike,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allBatch(
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      fetchParamsArray: IShared.FetchParamsStruct[],
      transferParamsArray: IShared.TransferParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployAndFetchBatch(
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    disableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeActions(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      calls: IMulticall.CallStruct[],
      gasMulticall: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executexCall(
      sigData: IShared.SigDataStruct,
      recipient: string,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executexSwapAndCall(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fetchBatch(
      sigData: IShared.SigDataStruct,
      fetchParamsArray: IShared.FetchParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCommunityGuardDisabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommunityKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSuspendedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govWithdraw(
      tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    suspend(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transfer(
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferBatch(
      sigData: IShared.SigDataStruct,
      transferParamsArray: IShared.TransferParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateKeyManager(
      sigData: IShared.SigDataStruct,
      keyManager: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    xCallNative(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    xCallToken(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      srcToken: string,
      amount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    xSwapNative(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      cfParameters: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    xSwapToken(
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      srcToken: string,
      amount: BigNumberish,
      cfParameters: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
