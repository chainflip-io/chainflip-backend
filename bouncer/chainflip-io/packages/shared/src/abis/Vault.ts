/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IShared {
  export type SigDataStruct = {
    sig: BigNumberish;
    nonce: BigNumberish;
    kTimesGAddress: AddressLike;
  };

  export type SigDataStructOutput = [
    sig: bigint,
    nonce: bigint,
    kTimesGAddress: string
  ] & { sig: bigint; nonce: bigint; kTimesGAddress: string };

  export type DeployFetchParamsStruct = {
    swapID: BytesLike;
    token: AddressLike;
  };

  export type DeployFetchParamsStructOutput = [
    swapID: string,
    token: string
  ] & { swapID: string; token: string };

  export type FetchParamsStruct = {
    fetchContract: AddressLike;
    token: AddressLike;
  };

  export type FetchParamsStructOutput = [
    fetchContract: string,
    token: string
  ] & { fetchContract: string; token: string };

  export type TransferParamsStruct = {
    token: AddressLike;
    recipient: AddressLike;
    amount: BigNumberish;
  };

  export type TransferParamsStructOutput = [
    token: string,
    recipient: string,
    amount: bigint
  ] & { token: string; recipient: string; amount: bigint };
}

export declare namespace IMulticall {
  export type CallStruct = {
    callType: BigNumberish;
    target: AddressLike;
    value: BigNumberish;
    callData: BytesLike;
    payload: BytesLike;
  };

  export type CallStructOutput = [
    callType: bigint,
    target: string,
    value: bigint,
    callData: string,
    payload: string
  ] & {
    callType: bigint;
    target: string;
    value: bigint;
    callData: string;
    payload: string;
  };
}

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addGasNative"
      | "addGasToken"
      | "allBatch"
      | "deployAndFetchBatch"
      | "disableCommunityGuard"
      | "enableCommunityGuard"
      | "executeActions"
      | "executexCall"
      | "executexSwapAndCall"
      | "fetchBatch"
      | "getCommunityGuardDisabled"
      | "getCommunityKey"
      | "getGovernor"
      | "getKeyManager"
      | "getSuspendedState"
      | "govWithdraw"
      | "resume"
      | "suspend"
      | "transfer"
      | "transferBatch"
      | "updateKeyManager"
      | "xCallNative"
      | "xCallToken"
      | "xSwapNative"
      | "xSwapToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddGasNative"
      | "AddGasToken"
      | "CommunityGuardDisabled"
      | "ExecuteActionsFailed"
      | "Suspended"
      | "SwapNative"
      | "SwapToken"
      | "TransferNativeFailed"
      | "TransferTokenFailed"
      | "UpdatedKeyManager"
      | "XCallNative"
      | "XCallToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addGasNative",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addGasToken",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allBatch",
    values: [
      IShared.SigDataStruct,
      IShared.DeployFetchParamsStruct[],
      IShared.FetchParamsStruct[],
      IShared.TransferParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAndFetchBatch",
    values: [IShared.SigDataStruct, IShared.DeployFetchParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disableCommunityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableCommunityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeActions",
    values: [
      IShared.SigDataStruct,
      IShared.TransferParamsStruct,
      IMulticall.CallStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executexCall",
    values: [
      IShared.SigDataStruct,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executexSwapAndCall",
    values: [
      IShared.SigDataStruct,
      IShared.TransferParamsStruct,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchBatch",
    values: [IShared.SigDataStruct, IShared.FetchParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityGuardDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuspendedState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govWithdraw",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(functionFragment: "suspend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [IShared.SigDataStruct, IShared.TransferParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBatch",
    values: [IShared.SigDataStruct, IShared.TransferParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyManager",
    values: [IShared.SigDataStruct, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "xCallNative",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xCallToken",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xSwapNative",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xSwapToken",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGasNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployAndFetchBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableCommunityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCommunityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executexCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executexSwapAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityGuardDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuspendedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "suspend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xCallNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xCallToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xSwapNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xSwapToken", data: BytesLike): Result;
}

export namespace AddGasNativeEvent {
  export type InputTuple = [swapID: BytesLike, amount: BigNumberish];
  export type OutputTuple = [swapID: string, amount: bigint];
  export interface OutputObject {
    swapID: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddGasTokenEvent {
  export type InputTuple = [
    swapID: BytesLike,
    amount: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [swapID: string, amount: bigint, token: string];
  export interface OutputObject {
    swapID: string;
    amount: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommunityGuardDisabledEvent {
  export type InputTuple = [communityGuardDisabled: boolean];
  export type OutputTuple = [communityGuardDisabled: boolean];
  export interface OutputObject {
    communityGuardDisabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteActionsFailedEvent {
  export type InputTuple = [
    multicallAddress: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    reason: BytesLike
  ];
  export type OutputTuple = [
    multicallAddress: string,
    amount: bigint,
    token: string,
    reason: string
  ];
  export interface OutputObject {
    multicallAddress: string;
    amount: bigint;
    token: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuspendedEvent {
  export type InputTuple = [suspended: boolean];
  export type OutputTuple = [suspended: boolean];
  export interface OutputObject {
    suspended: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapNativeEvent {
  export type InputTuple = [
    dstChain: BigNumberish,
    dstAddress: BytesLike,
    dstToken: BigNumberish,
    amount: BigNumberish,
    sender: AddressLike,
    cfParameters: BytesLike
  ];
  export type OutputTuple = [
    dstChain: bigint,
    dstAddress: string,
    dstToken: bigint,
    amount: bigint,
    sender: string,
    cfParameters: string
  ];
  export interface OutputObject {
    dstChain: bigint;
    dstAddress: string;
    dstToken: bigint;
    amount: bigint;
    sender: string;
    cfParameters: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapTokenEvent {
  export type InputTuple = [
    dstChain: BigNumberish,
    dstAddress: BytesLike,
    dstToken: BigNumberish,
    srcToken: AddressLike,
    amount: BigNumberish,
    sender: AddressLike,
    cfParameters: BytesLike
  ];
  export type OutputTuple = [
    dstChain: bigint,
    dstAddress: string,
    dstToken: bigint,
    srcToken: string,
    amount: bigint,
    sender: string,
    cfParameters: string
  ];
  export interface OutputObject {
    dstChain: bigint;
    dstAddress: string;
    dstToken: bigint;
    srcToken: string;
    amount: bigint;
    sender: string;
    cfParameters: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferNativeFailedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferTokenFailedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    reason: BytesLike
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    token: string,
    reason: string
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    token: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedKeyManagerEvent {
  export type InputTuple = [keyManager: AddressLike];
  export type OutputTuple = [keyManager: string];
  export interface OutputObject {
    keyManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XCallNativeEvent {
  export type InputTuple = [
    dstChain: BigNumberish,
    dstAddress: BytesLike,
    dstToken: BigNumberish,
    amount: BigNumberish,
    sender: AddressLike,
    message: BytesLike,
    gasAmount: BigNumberish,
    cfParameters: BytesLike
  ];
  export type OutputTuple = [
    dstChain: bigint,
    dstAddress: string,
    dstToken: bigint,
    amount: bigint,
    sender: string,
    message: string,
    gasAmount: bigint,
    cfParameters: string
  ];
  export interface OutputObject {
    dstChain: bigint;
    dstAddress: string;
    dstToken: bigint;
    amount: bigint;
    sender: string;
    message: string;
    gasAmount: bigint;
    cfParameters: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XCallTokenEvent {
  export type InputTuple = [
    dstChain: BigNumberish,
    dstAddress: BytesLike,
    dstToken: BigNumberish,
    srcToken: AddressLike,
    amount: BigNumberish,
    sender: AddressLike,
    message: BytesLike,
    gasAmount: BigNumberish,
    cfParameters: BytesLike
  ];
  export type OutputTuple = [
    dstChain: bigint,
    dstAddress: string,
    dstToken: bigint,
    srcToken: string,
    amount: bigint,
    sender: string,
    message: string,
    gasAmount: bigint,
    cfParameters: string
  ];
  export interface OutputObject {
    dstChain: bigint;
    dstAddress: string;
    dstToken: bigint;
    srcToken: string;
    amount: bigint;
    sender: string;
    message: string;
    gasAmount: bigint;
    cfParameters: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addGasNative: TypedContractMethod<[swapID: BytesLike], [void], "payable">;

  addGasToken: TypedContractMethod<
    [swapID: BytesLike, amount: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;

  allBatch: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      fetchParamsArray: IShared.FetchParamsStruct[],
      transferParamsArray: IShared.TransferParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;

  deployAndFetchBatch: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;

  disableCommunityGuard: TypedContractMethod<[], [void], "nonpayable">;

  enableCommunityGuard: TypedContractMethod<[], [void], "nonpayable">;

  executeActions: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      calls: IMulticall.CallStruct[],
      gasMulticall: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  executexCall: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      recipient: AddressLike,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  executexSwapAndCall: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  fetchBatch: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      fetchParamsArray: IShared.FetchParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getCommunityGuardDisabled: TypedContractMethod<[], [boolean], "view">;

  getCommunityKey: TypedContractMethod<[], [string], "view">;

  getGovernor: TypedContractMethod<[], [string], "view">;

  getKeyManager: TypedContractMethod<[], [string], "view">;

  getSuspendedState: TypedContractMethod<[], [boolean], "view">;

  govWithdraw: TypedContractMethod<
    [tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  resume: TypedContractMethod<[], [void], "nonpayable">;

  suspend: TypedContractMethod<[], [void], "nonpayable">;

  transfer: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  transferBatch: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      transferParamsArray: IShared.TransferParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;

  updateKeyManager: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      keyManager: AddressLike,
      omitChecks: boolean
    ],
    [void],
    "nonpayable"
  >;

  xCallNative: TypedContractMethod<
    [
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      cfParameters: BytesLike
    ],
    [void],
    "payable"
  >;

  xCallToken: TypedContractMethod<
    [
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      srcToken: AddressLike,
      amount: BigNumberish,
      cfParameters: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  xSwapNative: TypedContractMethod<
    [
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      cfParameters: BytesLike
    ],
    [void],
    "payable"
  >;

  xSwapToken: TypedContractMethod<
    [
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      srcToken: AddressLike,
      amount: BigNumberish,
      cfParameters: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addGasNative"
  ): TypedContractMethod<[swapID: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "addGasToken"
  ): TypedContractMethod<
    [swapID: BytesLike, amount: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allBatch"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[],
      fetchParamsArray: IShared.FetchParamsStruct[],
      transferParamsArray: IShared.TransferParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployAndFetchBatch"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      deployFetchParamsArray: IShared.DeployFetchParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableCommunityGuard"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableCommunityGuard"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeActions"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      calls: IMulticall.CallStruct[],
      gasMulticall: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executexCall"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      recipient: AddressLike,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executexSwapAndCall"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct,
      srcChain: BigNumberish,
      srcAddress: BytesLike,
      message: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fetchBatch"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      fetchParamsArray: IShared.FetchParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCommunityGuardDisabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCommunityKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getKeyManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSuspendedState"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "govWithdraw"
  ): TypedContractMethod<[tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resume"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "suspend"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      transferParams: IShared.TransferParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferBatch"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      transferParamsArray: IShared.TransferParamsStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateKeyManager"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      keyManager: AddressLike,
      omitChecks: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xCallNative"
  ): TypedContractMethod<
    [
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      cfParameters: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "xCallToken"
  ): TypedContractMethod<
    [
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      message: BytesLike,
      gasAmount: BigNumberish,
      srcToken: AddressLike,
      amount: BigNumberish,
      cfParameters: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xSwapNative"
  ): TypedContractMethod<
    [
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      cfParameters: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "xSwapToken"
  ): TypedContractMethod<
    [
      dstChain: BigNumberish,
      dstAddress: BytesLike,
      dstToken: BigNumberish,
      srcToken: AddressLike,
      amount: BigNumberish,
      cfParameters: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddGasNative"
  ): TypedContractEvent<
    AddGasNativeEvent.InputTuple,
    AddGasNativeEvent.OutputTuple,
    AddGasNativeEvent.OutputObject
  >;
  getEvent(
    key: "AddGasToken"
  ): TypedContractEvent<
    AddGasTokenEvent.InputTuple,
    AddGasTokenEvent.OutputTuple,
    AddGasTokenEvent.OutputObject
  >;
  getEvent(
    key: "CommunityGuardDisabled"
  ): TypedContractEvent<
    CommunityGuardDisabledEvent.InputTuple,
    CommunityGuardDisabledEvent.OutputTuple,
    CommunityGuardDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteActionsFailed"
  ): TypedContractEvent<
    ExecuteActionsFailedEvent.InputTuple,
    ExecuteActionsFailedEvent.OutputTuple,
    ExecuteActionsFailedEvent.OutputObject
  >;
  getEvent(
    key: "Suspended"
  ): TypedContractEvent<
    SuspendedEvent.InputTuple,
    SuspendedEvent.OutputTuple,
    SuspendedEvent.OutputObject
  >;
  getEvent(
    key: "SwapNative"
  ): TypedContractEvent<
    SwapNativeEvent.InputTuple,
    SwapNativeEvent.OutputTuple,
    SwapNativeEvent.OutputObject
  >;
  getEvent(
    key: "SwapToken"
  ): TypedContractEvent<
    SwapTokenEvent.InputTuple,
    SwapTokenEvent.OutputTuple,
    SwapTokenEvent.OutputObject
  >;
  getEvent(
    key: "TransferNativeFailed"
  ): TypedContractEvent<
    TransferNativeFailedEvent.InputTuple,
    TransferNativeFailedEvent.OutputTuple,
    TransferNativeFailedEvent.OutputObject
  >;
  getEvent(
    key: "TransferTokenFailed"
  ): TypedContractEvent<
    TransferTokenFailedEvent.InputTuple,
    TransferTokenFailedEvent.OutputTuple,
    TransferTokenFailedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedKeyManager"
  ): TypedContractEvent<
    UpdatedKeyManagerEvent.InputTuple,
    UpdatedKeyManagerEvent.OutputTuple,
    UpdatedKeyManagerEvent.OutputObject
  >;
  getEvent(
    key: "XCallNative"
  ): TypedContractEvent<
    XCallNativeEvent.InputTuple,
    XCallNativeEvent.OutputTuple,
    XCallNativeEvent.OutputObject
  >;
  getEvent(
    key: "XCallToken"
  ): TypedContractEvent<
    XCallTokenEvent.InputTuple,
    XCallTokenEvent.OutputTuple,
    XCallTokenEvent.OutputObject
  >;

  filters: {
    "AddGasNative(bytes32,uint256)": TypedContractEvent<
      AddGasNativeEvent.InputTuple,
      AddGasNativeEvent.OutputTuple,
      AddGasNativeEvent.OutputObject
    >;
    AddGasNative: TypedContractEvent<
      AddGasNativeEvent.InputTuple,
      AddGasNativeEvent.OutputTuple,
      AddGasNativeEvent.OutputObject
    >;

    "AddGasToken(bytes32,uint256,address)": TypedContractEvent<
      AddGasTokenEvent.InputTuple,
      AddGasTokenEvent.OutputTuple,
      AddGasTokenEvent.OutputObject
    >;
    AddGasToken: TypedContractEvent<
      AddGasTokenEvent.InputTuple,
      AddGasTokenEvent.OutputTuple,
      AddGasTokenEvent.OutputObject
    >;

    "CommunityGuardDisabled(bool)": TypedContractEvent<
      CommunityGuardDisabledEvent.InputTuple,
      CommunityGuardDisabledEvent.OutputTuple,
      CommunityGuardDisabledEvent.OutputObject
    >;
    CommunityGuardDisabled: TypedContractEvent<
      CommunityGuardDisabledEvent.InputTuple,
      CommunityGuardDisabledEvent.OutputTuple,
      CommunityGuardDisabledEvent.OutputObject
    >;

    "ExecuteActionsFailed(address,uint256,address,bytes)": TypedContractEvent<
      ExecuteActionsFailedEvent.InputTuple,
      ExecuteActionsFailedEvent.OutputTuple,
      ExecuteActionsFailedEvent.OutputObject
    >;
    ExecuteActionsFailed: TypedContractEvent<
      ExecuteActionsFailedEvent.InputTuple,
      ExecuteActionsFailedEvent.OutputTuple,
      ExecuteActionsFailedEvent.OutputObject
    >;

    "Suspended(bool)": TypedContractEvent<
      SuspendedEvent.InputTuple,
      SuspendedEvent.OutputTuple,
      SuspendedEvent.OutputObject
    >;
    Suspended: TypedContractEvent<
      SuspendedEvent.InputTuple,
      SuspendedEvent.OutputTuple,
      SuspendedEvent.OutputObject
    >;

    "SwapNative(uint32,bytes,uint32,uint256,address,bytes)": TypedContractEvent<
      SwapNativeEvent.InputTuple,
      SwapNativeEvent.OutputTuple,
      SwapNativeEvent.OutputObject
    >;
    SwapNative: TypedContractEvent<
      SwapNativeEvent.InputTuple,
      SwapNativeEvent.OutputTuple,
      SwapNativeEvent.OutputObject
    >;

    "SwapToken(uint32,bytes,uint32,address,uint256,address,bytes)": TypedContractEvent<
      SwapTokenEvent.InputTuple,
      SwapTokenEvent.OutputTuple,
      SwapTokenEvent.OutputObject
    >;
    SwapToken: TypedContractEvent<
      SwapTokenEvent.InputTuple,
      SwapTokenEvent.OutputTuple,
      SwapTokenEvent.OutputObject
    >;

    "TransferNativeFailed(address,uint256)": TypedContractEvent<
      TransferNativeFailedEvent.InputTuple,
      TransferNativeFailedEvent.OutputTuple,
      TransferNativeFailedEvent.OutputObject
    >;
    TransferNativeFailed: TypedContractEvent<
      TransferNativeFailedEvent.InputTuple,
      TransferNativeFailedEvent.OutputTuple,
      TransferNativeFailedEvent.OutputObject
    >;

    "TransferTokenFailed(address,uint256,address,bytes)": TypedContractEvent<
      TransferTokenFailedEvent.InputTuple,
      TransferTokenFailedEvent.OutputTuple,
      TransferTokenFailedEvent.OutputObject
    >;
    TransferTokenFailed: TypedContractEvent<
      TransferTokenFailedEvent.InputTuple,
      TransferTokenFailedEvent.OutputTuple,
      TransferTokenFailedEvent.OutputObject
    >;

    "UpdatedKeyManager(address)": TypedContractEvent<
      UpdatedKeyManagerEvent.InputTuple,
      UpdatedKeyManagerEvent.OutputTuple,
      UpdatedKeyManagerEvent.OutputObject
    >;
    UpdatedKeyManager: TypedContractEvent<
      UpdatedKeyManagerEvent.InputTuple,
      UpdatedKeyManagerEvent.OutputTuple,
      UpdatedKeyManagerEvent.OutputObject
    >;

    "XCallNative(uint32,bytes,uint32,uint256,address,bytes,uint256,bytes)": TypedContractEvent<
      XCallNativeEvent.InputTuple,
      XCallNativeEvent.OutputTuple,
      XCallNativeEvent.OutputObject
    >;
    XCallNative: TypedContractEvent<
      XCallNativeEvent.InputTuple,
      XCallNativeEvent.OutputTuple,
      XCallNativeEvent.OutputObject
    >;

    "XCallToken(uint32,bytes,uint32,address,uint256,address,bytes,uint256,bytes)": TypedContractEvent<
      XCallTokenEvent.InputTuple,
      XCallTokenEvent.OutputTuple,
      XCallTokenEvent.OutputObject
    >;
    XCallToken: TypedContractEvent<
      XCallTokenEvent.InputTuple,
      XCallTokenEvent.OutputTuple,
      XCallTokenEvent.OutputObject
    >;
  };
}
