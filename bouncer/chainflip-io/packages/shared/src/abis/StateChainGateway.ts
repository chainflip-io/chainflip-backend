/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IStateChainGateway {
  export type RedemptionStruct = {
    amount: BigNumberish;
    redeemAddress: string;
    startTime: BigNumberish;
    expiryTime: BigNumberish;
  };

  export type RedemptionStructOutput = [BigNumber, string, number, number] & {
    amount: BigNumber;
    redeemAddress: string;
    startTime: number;
    expiryTime: number;
  };
}

export declare namespace IShared {
  export type SigDataStruct = {
    sig: BigNumberish;
    nonce: BigNumberish;
    kTimesGAddress: string;
  };

  export type SigDataStructOutput = [BigNumber, BigNumber, string] & {
    sig: BigNumber;
    nonce: BigNumber;
    kTimesGAddress: string;
  };
}

export interface StateChainGatewayInterface extends utils.Interface {
  functions: {
    "REDEMPTION_DELAY()": FunctionFragment;
    "disableCommunityGuard()": FunctionFragment;
    "enableCommunityGuard()": FunctionFragment;
    "executeRedemption(bytes32)": FunctionFragment;
    "fundStateChainAccount(bytes32,uint256)": FunctionFragment;
    "getCommunityGuardDisabled()": FunctionFragment;
    "getCommunityKey()": FunctionFragment;
    "getFLIP()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getKeyManager()": FunctionFragment;
    "getLastSupplyUpdateBlockNumber()": FunctionFragment;
    "getMinimumFunding()": FunctionFragment;
    "getPendingRedemption(bytes32)": FunctionFragment;
    "getSuspendedState()": FunctionFragment;
    "govUpdateFlipIssuer()": FunctionFragment;
    "govWithdraw()": FunctionFragment;
    "registerRedemption((uint256,uint256,address),bytes32,uint256,address,uint48)": FunctionFragment;
    "resume()": FunctionFragment;
    "setFlip(address)": FunctionFragment;
    "setMinFunding(uint256)": FunctionFragment;
    "suspend()": FunctionFragment;
    "updateFlipIssuer((uint256,uint256,address),address,bool)": FunctionFragment;
    "updateFlipSupply((uint256,uint256,address),uint256,uint256)": FunctionFragment;
    "updateKeyManager((uint256,uint256,address),address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REDEMPTION_DELAY"
      | "disableCommunityGuard"
      | "enableCommunityGuard"
      | "executeRedemption"
      | "fundStateChainAccount"
      | "getCommunityGuardDisabled"
      | "getCommunityKey"
      | "getFLIP"
      | "getGovernor"
      | "getKeyManager"
      | "getLastSupplyUpdateBlockNumber"
      | "getMinimumFunding"
      | "getPendingRedemption"
      | "getSuspendedState"
      | "govUpdateFlipIssuer"
      | "govWithdraw"
      | "registerRedemption"
      | "resume"
      | "setFlip"
      | "setMinFunding"
      | "suspend"
      | "updateFlipIssuer"
      | "updateFlipSupply"
      | "updateKeyManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REDEMPTION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableCommunityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableCommunityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRedemption",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundStateChainAccount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityGuardDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityKey",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFLIP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSupplyUpdateBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRedemption",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuspendedState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govUpdateFlipIssuer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerRedemption",
    values: [
      IShared.SigDataStruct,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(functionFragment: "setFlip", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMinFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "suspend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFlipIssuer",
    values: [IShared.SigDataStruct, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlipSupply",
    values: [IShared.SigDataStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyManager",
    values: [IShared.SigDataStruct, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "REDEMPTION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableCommunityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCommunityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundStateChainAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityGuardDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFLIP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSupplyUpdateBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuspendedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govUpdateFlipIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFlip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "suspend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFlipIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlipSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyManager",
    data: BytesLike
  ): Result;

  events: {
    "CommunityGuardDisabled(bool)": EventFragment;
    "FLIPSet(address)": EventFragment;
    "FlipSupplyUpdated(uint256,uint256,uint256)": EventFragment;
    "Funded(bytes32,uint256,address)": EventFragment;
    "GovernanceWithdrawal(address,uint256)": EventFragment;
    "MinFundingChanged(uint256,uint256)": EventFragment;
    "RedemptionExecuted(bytes32,uint256)": EventFragment;
    "RedemptionExpired(bytes32,uint256)": EventFragment;
    "RedemptionRegistered(bytes32,uint256,address,uint48,uint48)": EventFragment;
    "Suspended(bool)": EventFragment;
    "UpdatedKeyManager(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommunityGuardDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FLIPSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlipSupplyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinFundingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Suspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedKeyManager"): EventFragment;
}

export interface CommunityGuardDisabledEventObject {
  communityGuardDisabled: boolean;
}
export type CommunityGuardDisabledEvent = TypedEvent<
  [boolean],
  CommunityGuardDisabledEventObject
>;

export type CommunityGuardDisabledEventFilter =
  TypedEventFilter<CommunityGuardDisabledEvent>;

export interface FLIPSetEventObject {
  flip: string;
}
export type FLIPSetEvent = TypedEvent<[string], FLIPSetEventObject>;

export type FLIPSetEventFilter = TypedEventFilter<FLIPSetEvent>;

export interface FlipSupplyUpdatedEventObject {
  oldSupply: BigNumber;
  newSupply: BigNumber;
  stateChainBlockNumber: BigNumber;
}
export type FlipSupplyUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FlipSupplyUpdatedEventObject
>;

export type FlipSupplyUpdatedEventFilter =
  TypedEventFilter<FlipSupplyUpdatedEvent>;

export interface FundedEventObject {
  nodeID: string;
  amount: BigNumber;
  funder: string;
}
export type FundedEvent = TypedEvent<
  [string, BigNumber, string],
  FundedEventObject
>;

export type FundedEventFilter = TypedEventFilter<FundedEvent>;

export interface GovernanceWithdrawalEventObject {
  to: string;
  amount: BigNumber;
}
export type GovernanceWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  GovernanceWithdrawalEventObject
>;

export type GovernanceWithdrawalEventFilter =
  TypedEventFilter<GovernanceWithdrawalEvent>;

export interface MinFundingChangedEventObject {
  oldMinFunding: BigNumber;
  newMinFunding: BigNumber;
}
export type MinFundingChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinFundingChangedEventObject
>;

export type MinFundingChangedEventFilter =
  TypedEventFilter<MinFundingChangedEvent>;

export interface RedemptionExecutedEventObject {
  nodeID: string;
  amount: BigNumber;
}
export type RedemptionExecutedEvent = TypedEvent<
  [string, BigNumber],
  RedemptionExecutedEventObject
>;

export type RedemptionExecutedEventFilter =
  TypedEventFilter<RedemptionExecutedEvent>;

export interface RedemptionExpiredEventObject {
  nodeID: string;
  amount: BigNumber;
}
export type RedemptionExpiredEvent = TypedEvent<
  [string, BigNumber],
  RedemptionExpiredEventObject
>;

export type RedemptionExpiredEventFilter =
  TypedEventFilter<RedemptionExpiredEvent>;

export interface RedemptionRegisteredEventObject {
  nodeID: string;
  amount: BigNumber;
  redeemAddress: string;
  startTime: number;
  expiryTime: number;
}
export type RedemptionRegisteredEvent = TypedEvent<
  [string, BigNumber, string, number, number],
  RedemptionRegisteredEventObject
>;

export type RedemptionRegisteredEventFilter =
  TypedEventFilter<RedemptionRegisteredEvent>;

export interface SuspendedEventObject {
  suspended: boolean;
}
export type SuspendedEvent = TypedEvent<[boolean], SuspendedEventObject>;

export type SuspendedEventFilter = TypedEventFilter<SuspendedEvent>;

export interface UpdatedKeyManagerEventObject {
  keyManager: string;
}
export type UpdatedKeyManagerEvent = TypedEvent<
  [string],
  UpdatedKeyManagerEventObject
>;

export type UpdatedKeyManagerEventFilter =
  TypedEventFilter<UpdatedKeyManagerEvent>;

export interface StateChainGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StateChainGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REDEMPTION_DELAY(overrides?: CallOverrides): Promise<[number]>;

    disableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeRedemption(
      nodeID: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fundStateChainAccount(
      nodeID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCommunityGuardDisabled(overrides?: CallOverrides): Promise<[boolean]>;

    getCommunityKey(overrides?: CallOverrides): Promise<[string]>;

    getFLIP(overrides?: CallOverrides): Promise<[string]>;

    getGovernor(overrides?: CallOverrides): Promise<[string]>;

    getKeyManager(overrides?: CallOverrides): Promise<[string]>;

    getLastSupplyUpdateBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingRedemption(
      nodeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[IStateChainGateway.RedemptionStructOutput]>;

    getSuspendedState(overrides?: CallOverrides): Promise<[boolean]>;

    govUpdateFlipIssuer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    govWithdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerRedemption(
      sigData: IShared.SigDataStruct,
      nodeID: BytesLike,
      amount: BigNumberish,
      redeemAddress: string,
      expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFlip(
      flip: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinFunding(
      newMinFunding: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    suspend(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateFlipIssuer(
      sigData: IShared.SigDataStruct,
      newIssuer: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateFlipSupply(
      sigData: IShared.SigDataStruct,
      newTotalSupply: BigNumberish,
      stateChainBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateKeyManager(
      sigData: IShared.SigDataStruct,
      keyManager: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  REDEMPTION_DELAY(overrides?: CallOverrides): Promise<number>;

  disableCommunityGuard(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableCommunityGuard(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeRedemption(
    nodeID: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fundStateChainAccount(
    nodeID: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCommunityGuardDisabled(overrides?: CallOverrides): Promise<boolean>;

  getCommunityKey(overrides?: CallOverrides): Promise<string>;

  getFLIP(overrides?: CallOverrides): Promise<string>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  getKeyManager(overrides?: CallOverrides): Promise<string>;

  getLastSupplyUpdateBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimumFunding(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingRedemption(
    nodeID: BytesLike,
    overrides?: CallOverrides
  ): Promise<IStateChainGateway.RedemptionStructOutput>;

  getSuspendedState(overrides?: CallOverrides): Promise<boolean>;

  govUpdateFlipIssuer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  govWithdraw(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerRedemption(
    sigData: IShared.SigDataStruct,
    nodeID: BytesLike,
    amount: BigNumberish,
    redeemAddress: string,
    expiryTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFlip(
    flip: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinFunding(
    newMinFunding: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  suspend(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateFlipIssuer(
    sigData: IShared.SigDataStruct,
    newIssuer: string,
    omitChecks: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateFlipSupply(
    sigData: IShared.SigDataStruct,
    newTotalSupply: BigNumberish,
    stateChainBlockNumber: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateKeyManager(
    sigData: IShared.SigDataStruct,
    keyManager: string,
    omitChecks: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    REDEMPTION_DELAY(overrides?: CallOverrides): Promise<number>;

    disableCommunityGuard(overrides?: CallOverrides): Promise<void>;

    enableCommunityGuard(overrides?: CallOverrides): Promise<void>;

    executeRedemption(
      nodeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fundStateChainAccount(
      nodeID: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCommunityGuardDisabled(overrides?: CallOverrides): Promise<boolean>;

    getCommunityKey(overrides?: CallOverrides): Promise<string>;

    getFLIP(overrides?: CallOverrides): Promise<string>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    getKeyManager(overrides?: CallOverrides): Promise<string>;

    getLastSupplyUpdateBlockNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumFunding(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRedemption(
      nodeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<IStateChainGateway.RedemptionStructOutput>;

    getSuspendedState(overrides?: CallOverrides): Promise<boolean>;

    govUpdateFlipIssuer(overrides?: CallOverrides): Promise<void>;

    govWithdraw(overrides?: CallOverrides): Promise<void>;

    registerRedemption(
      sigData: IShared.SigDataStruct,
      nodeID: BytesLike,
      amount: BigNumberish,
      redeemAddress: string,
      expiryTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    setFlip(flip: string, overrides?: CallOverrides): Promise<void>;

    setMinFunding(
      newMinFunding: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    suspend(overrides?: CallOverrides): Promise<void>;

    updateFlipIssuer(
      sigData: IShared.SigDataStruct,
      newIssuer: string,
      omitChecks: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFlipSupply(
      sigData: IShared.SigDataStruct,
      newTotalSupply: BigNumberish,
      stateChainBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKeyManager(
      sigData: IShared.SigDataStruct,
      keyManager: string,
      omitChecks: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CommunityGuardDisabled(bool)"(
      communityGuardDisabled?: null
    ): CommunityGuardDisabledEventFilter;
    CommunityGuardDisabled(
      communityGuardDisabled?: null
    ): CommunityGuardDisabledEventFilter;

    "FLIPSet(address)"(flip?: null): FLIPSetEventFilter;
    FLIPSet(flip?: null): FLIPSetEventFilter;

    "FlipSupplyUpdated(uint256,uint256,uint256)"(
      oldSupply?: null,
      newSupply?: null,
      stateChainBlockNumber?: null
    ): FlipSupplyUpdatedEventFilter;
    FlipSupplyUpdated(
      oldSupply?: null,
      newSupply?: null,
      stateChainBlockNumber?: null
    ): FlipSupplyUpdatedEventFilter;

    "Funded(bytes32,uint256,address)"(
      nodeID?: BytesLike | null,
      amount?: null,
      funder?: null
    ): FundedEventFilter;
    Funded(
      nodeID?: BytesLike | null,
      amount?: null,
      funder?: null
    ): FundedEventFilter;

    "GovernanceWithdrawal(address,uint256)"(
      to?: null,
      amount?: null
    ): GovernanceWithdrawalEventFilter;
    GovernanceWithdrawal(
      to?: null,
      amount?: null
    ): GovernanceWithdrawalEventFilter;

    "MinFundingChanged(uint256,uint256)"(
      oldMinFunding?: null,
      newMinFunding?: null
    ): MinFundingChangedEventFilter;
    MinFundingChanged(
      oldMinFunding?: null,
      newMinFunding?: null
    ): MinFundingChangedEventFilter;

    "RedemptionExecuted(bytes32,uint256)"(
      nodeID?: BytesLike | null,
      amount?: null
    ): RedemptionExecutedEventFilter;
    RedemptionExecuted(
      nodeID?: BytesLike | null,
      amount?: null
    ): RedemptionExecutedEventFilter;

    "RedemptionExpired(bytes32,uint256)"(
      nodeID?: BytesLike | null,
      amount?: null
    ): RedemptionExpiredEventFilter;
    RedemptionExpired(
      nodeID?: BytesLike | null,
      amount?: null
    ): RedemptionExpiredEventFilter;

    "RedemptionRegistered(bytes32,uint256,address,uint48,uint48)"(
      nodeID?: BytesLike | null,
      amount?: null,
      redeemAddress?: string | null,
      startTime?: null,
      expiryTime?: null
    ): RedemptionRegisteredEventFilter;
    RedemptionRegistered(
      nodeID?: BytesLike | null,
      amount?: null,
      redeemAddress?: string | null,
      startTime?: null,
      expiryTime?: null
    ): RedemptionRegisteredEventFilter;

    "Suspended(bool)"(suspended?: null): SuspendedEventFilter;
    Suspended(suspended?: null): SuspendedEventFilter;

    "UpdatedKeyManager(address)"(
      keyManager?: null
    ): UpdatedKeyManagerEventFilter;
    UpdatedKeyManager(keyManager?: null): UpdatedKeyManagerEventFilter;
  };

  estimateGas: {
    REDEMPTION_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    disableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeRedemption(
      nodeID: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fundStateChainAccount(
      nodeID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCommunityGuardDisabled(overrides?: CallOverrides): Promise<BigNumber>;

    getCommunityKey(overrides?: CallOverrides): Promise<BigNumber>;

    getFLIP(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    getKeyManager(overrides?: CallOverrides): Promise<BigNumber>;

    getLastSupplyUpdateBlockNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumFunding(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRedemption(
      nodeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSuspendedState(overrides?: CallOverrides): Promise<BigNumber>;

    govUpdateFlipIssuer(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    govWithdraw(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    registerRedemption(
      sigData: IShared.SigDataStruct,
      nodeID: BytesLike,
      amount: BigNumberish,
      redeemAddress: string,
      expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    resume(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setFlip(
      flip: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinFunding(
      newMinFunding: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    suspend(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateFlipIssuer(
      sigData: IShared.SigDataStruct,
      newIssuer: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateFlipSupply(
      sigData: IShared.SigDataStruct,
      newTotalSupply: BigNumberish,
      stateChainBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateKeyManager(
      sigData: IShared.SigDataStruct,
      keyManager: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REDEMPTION_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableCommunityGuard(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeRedemption(
      nodeID: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fundStateChainAccount(
      nodeID: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCommunityGuardDisabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommunityKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFLIP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastSupplyUpdateBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingRedemption(
      nodeID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSuspendedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govUpdateFlipIssuer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    govWithdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerRedemption(
      sigData: IShared.SigDataStruct,
      nodeID: BytesLike,
      amount: BigNumberish,
      redeemAddress: string,
      expiryTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFlip(
      flip: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinFunding(
      newMinFunding: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    suspend(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateFlipIssuer(
      sigData: IShared.SigDataStruct,
      newIssuer: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateFlipSupply(
      sigData: IShared.SigDataStruct,
      newTotalSupply: BigNumberish,
      stateChainBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateKeyManager(
      sigData: IShared.SigDataStruct,
      keyManager: string,
      omitChecks: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
