/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IStateChainGateway {
  export type RedemptionStruct = {
    amount: BigNumberish;
    redeemAddress: AddressLike;
    startTime: BigNumberish;
    expiryTime: BigNumberish;
  };

  export type RedemptionStructOutput = [
    amount: bigint,
    redeemAddress: string,
    startTime: bigint,
    expiryTime: bigint
  ] & {
    amount: bigint;
    redeemAddress: string;
    startTime: bigint;
    expiryTime: bigint;
  };
}

export declare namespace IShared {
  export type SigDataStruct = {
    sig: BigNumberish;
    nonce: BigNumberish;
    kTimesGAddress: AddressLike;
  };

  export type SigDataStructOutput = [
    sig: bigint,
    nonce: bigint,
    kTimesGAddress: string
  ] & { sig: bigint; nonce: bigint; kTimesGAddress: string };
}

export interface StateChainGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REDEMPTION_DELAY"
      | "disableCommunityGuard"
      | "enableCommunityGuard"
      | "executeRedemption"
      | "fundStateChainAccount"
      | "getCommunityGuardDisabled"
      | "getCommunityKey"
      | "getFLIP"
      | "getGovernor"
      | "getKeyManager"
      | "getLastSupplyUpdateBlockNumber"
      | "getMinimumFunding"
      | "getPendingRedemption"
      | "getSuspendedState"
      | "govUpdateFlipIssuer"
      | "govWithdraw"
      | "registerRedemption"
      | "resume"
      | "setFlip"
      | "setMinFunding"
      | "suspend"
      | "updateFlipIssuer"
      | "updateFlipSupply"
      | "updateKeyManager"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommunityGuardDisabled"
      | "FLIPSet"
      | "FlipSupplyUpdated"
      | "Funded"
      | "GovernanceWithdrawal"
      | "MinFundingChanged"
      | "RedemptionExecuted"
      | "RedemptionExpired"
      | "RedemptionRegistered"
      | "Suspended"
      | "UpdatedKeyManager"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "REDEMPTION_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableCommunityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableCommunityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRedemption",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundStateChainAccount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityGuardDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityKey",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFLIP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSupplyUpdateBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRedemption",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuspendedState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govUpdateFlipIssuer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerRedemption",
    values: [
      IShared.SigDataStruct,
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFlip",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "suspend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFlipIssuer",
    values: [IShared.SigDataStruct, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlipSupply",
    values: [IShared.SigDataStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyManager",
    values: [IShared.SigDataStruct, AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "REDEMPTION_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableCommunityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCommunityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundStateChainAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityGuardDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFLIP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSupplyUpdateBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuspendedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govUpdateFlipIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFlip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "suspend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFlipIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlipSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyManager",
    data: BytesLike
  ): Result;
}

export namespace CommunityGuardDisabledEvent {
  export type InputTuple = [communityGuardDisabled: boolean];
  export type OutputTuple = [communityGuardDisabled: boolean];
  export interface OutputObject {
    communityGuardDisabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FLIPSetEvent {
  export type InputTuple = [flip: AddressLike];
  export type OutputTuple = [flip: string];
  export interface OutputObject {
    flip: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlipSupplyUpdatedEvent {
  export type InputTuple = [
    oldSupply: BigNumberish,
    newSupply: BigNumberish,
    stateChainBlockNumber: BigNumberish
  ];
  export type OutputTuple = [
    oldSupply: bigint,
    newSupply: bigint,
    stateChainBlockNumber: bigint
  ];
  export interface OutputObject {
    oldSupply: bigint;
    newSupply: bigint;
    stateChainBlockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundedEvent {
  export type InputTuple = [
    nodeID: BytesLike,
    amount: BigNumberish,
    funder: AddressLike
  ];
  export type OutputTuple = [nodeID: string, amount: bigint, funder: string];
  export interface OutputObject {
    nodeID: string;
    amount: bigint;
    funder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceWithdrawalEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinFundingChangedEvent {
  export type InputTuple = [
    oldMinFunding: BigNumberish,
    newMinFunding: BigNumberish
  ];
  export type OutputTuple = [oldMinFunding: bigint, newMinFunding: bigint];
  export interface OutputObject {
    oldMinFunding: bigint;
    newMinFunding: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionExecutedEvent {
  export type InputTuple = [nodeID: BytesLike, amount: BigNumberish];
  export type OutputTuple = [nodeID: string, amount: bigint];
  export interface OutputObject {
    nodeID: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionExpiredEvent {
  export type InputTuple = [nodeID: BytesLike, amount: BigNumberish];
  export type OutputTuple = [nodeID: string, amount: bigint];
  export interface OutputObject {
    nodeID: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionRegisteredEvent {
  export type InputTuple = [
    nodeID: BytesLike,
    amount: BigNumberish,
    redeemAddress: AddressLike,
    startTime: BigNumberish,
    expiryTime: BigNumberish
  ];
  export type OutputTuple = [
    nodeID: string,
    amount: bigint,
    redeemAddress: string,
    startTime: bigint,
    expiryTime: bigint
  ];
  export interface OutputObject {
    nodeID: string;
    amount: bigint;
    redeemAddress: string;
    startTime: bigint;
    expiryTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuspendedEvent {
  export type InputTuple = [suspended: boolean];
  export type OutputTuple = [suspended: boolean];
  export interface OutputObject {
    suspended: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedKeyManagerEvent {
  export type InputTuple = [keyManager: AddressLike];
  export type OutputTuple = [keyManager: string];
  export interface OutputObject {
    keyManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StateChainGateway extends BaseContract {
  connect(runner?: ContractRunner | null): StateChainGateway;
  waitForDeployment(): Promise<this>;

  interface: StateChainGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REDEMPTION_DELAY: TypedContractMethod<[], [bigint], "view">;

  disableCommunityGuard: TypedContractMethod<[], [void], "nonpayable">;

  enableCommunityGuard: TypedContractMethod<[], [void], "nonpayable">;

  executeRedemption: TypedContractMethod<
    [nodeID: BytesLike],
    [void],
    "nonpayable"
  >;

  fundStateChainAccount: TypedContractMethod<
    [nodeID: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCommunityGuardDisabled: TypedContractMethod<[], [boolean], "view">;

  getCommunityKey: TypedContractMethod<[], [string], "view">;

  getFLIP: TypedContractMethod<[], [string], "view">;

  getGovernor: TypedContractMethod<[], [string], "view">;

  getKeyManager: TypedContractMethod<[], [string], "view">;

  getLastSupplyUpdateBlockNumber: TypedContractMethod<[], [bigint], "view">;

  getMinimumFunding: TypedContractMethod<[], [bigint], "view">;

  getPendingRedemption: TypedContractMethod<
    [nodeID: BytesLike],
    [IStateChainGateway.RedemptionStructOutput],
    "view"
  >;

  getSuspendedState: TypedContractMethod<[], [boolean], "view">;

  govUpdateFlipIssuer: TypedContractMethod<[], [void], "nonpayable">;

  govWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  registerRedemption: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      nodeID: BytesLike,
      amount: BigNumberish,
      redeemAddress: AddressLike,
      expiryTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  resume: TypedContractMethod<[], [void], "nonpayable">;

  setFlip: TypedContractMethod<[flip: AddressLike], [void], "nonpayable">;

  setMinFunding: TypedContractMethod<
    [newMinFunding: BigNumberish],
    [void],
    "nonpayable"
  >;

  suspend: TypedContractMethod<[], [void], "nonpayable">;

  updateFlipIssuer: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      newIssuer: AddressLike,
      omitChecks: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateFlipSupply: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      newTotalSupply: BigNumberish,
      stateChainBlockNumber: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateKeyManager: TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      keyManager: AddressLike,
      omitChecks: boolean
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REDEMPTION_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disableCommunityGuard"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableCommunityGuard"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeRedemption"
  ): TypedContractMethod<[nodeID: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundStateChainAccount"
  ): TypedContractMethod<
    [nodeID: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCommunityGuardDisabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCommunityKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFLIP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getKeyManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastSupplyUpdateBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumFunding"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingRedemption"
  ): TypedContractMethod<
    [nodeID: BytesLike],
    [IStateChainGateway.RedemptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSuspendedState"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "govUpdateFlipIssuer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "govWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerRedemption"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      nodeID: BytesLike,
      amount: BigNumberish,
      redeemAddress: AddressLike,
      expiryTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resume"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFlip"
  ): TypedContractMethod<[flip: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinFunding"
  ): TypedContractMethod<[newMinFunding: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "suspend"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFlipIssuer"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      newIssuer: AddressLike,
      omitChecks: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFlipSupply"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      newTotalSupply: BigNumberish,
      stateChainBlockNumber: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateKeyManager"
  ): TypedContractMethod<
    [
      sigData: IShared.SigDataStruct,
      keyManager: AddressLike,
      omitChecks: boolean
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CommunityGuardDisabled"
  ): TypedContractEvent<
    CommunityGuardDisabledEvent.InputTuple,
    CommunityGuardDisabledEvent.OutputTuple,
    CommunityGuardDisabledEvent.OutputObject
  >;
  getEvent(
    key: "FLIPSet"
  ): TypedContractEvent<
    FLIPSetEvent.InputTuple,
    FLIPSetEvent.OutputTuple,
    FLIPSetEvent.OutputObject
  >;
  getEvent(
    key: "FlipSupplyUpdated"
  ): TypedContractEvent<
    FlipSupplyUpdatedEvent.InputTuple,
    FlipSupplyUpdatedEvent.OutputTuple,
    FlipSupplyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceWithdrawal"
  ): TypedContractEvent<
    GovernanceWithdrawalEvent.InputTuple,
    GovernanceWithdrawalEvent.OutputTuple,
    GovernanceWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "MinFundingChanged"
  ): TypedContractEvent<
    MinFundingChangedEvent.InputTuple,
    MinFundingChangedEvent.OutputTuple,
    MinFundingChangedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionExecuted"
  ): TypedContractEvent<
    RedemptionExecutedEvent.InputTuple,
    RedemptionExecutedEvent.OutputTuple,
    RedemptionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionExpired"
  ): TypedContractEvent<
    RedemptionExpiredEvent.InputTuple,
    RedemptionExpiredEvent.OutputTuple,
    RedemptionExpiredEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionRegistered"
  ): TypedContractEvent<
    RedemptionRegisteredEvent.InputTuple,
    RedemptionRegisteredEvent.OutputTuple,
    RedemptionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Suspended"
  ): TypedContractEvent<
    SuspendedEvent.InputTuple,
    SuspendedEvent.OutputTuple,
    SuspendedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedKeyManager"
  ): TypedContractEvent<
    UpdatedKeyManagerEvent.InputTuple,
    UpdatedKeyManagerEvent.OutputTuple,
    UpdatedKeyManagerEvent.OutputObject
  >;

  filters: {
    "CommunityGuardDisabled(bool)": TypedContractEvent<
      CommunityGuardDisabledEvent.InputTuple,
      CommunityGuardDisabledEvent.OutputTuple,
      CommunityGuardDisabledEvent.OutputObject
    >;
    CommunityGuardDisabled: TypedContractEvent<
      CommunityGuardDisabledEvent.InputTuple,
      CommunityGuardDisabledEvent.OutputTuple,
      CommunityGuardDisabledEvent.OutputObject
    >;

    "FLIPSet(address)": TypedContractEvent<
      FLIPSetEvent.InputTuple,
      FLIPSetEvent.OutputTuple,
      FLIPSetEvent.OutputObject
    >;
    FLIPSet: TypedContractEvent<
      FLIPSetEvent.InputTuple,
      FLIPSetEvent.OutputTuple,
      FLIPSetEvent.OutputObject
    >;

    "FlipSupplyUpdated(uint256,uint256,uint256)": TypedContractEvent<
      FlipSupplyUpdatedEvent.InputTuple,
      FlipSupplyUpdatedEvent.OutputTuple,
      FlipSupplyUpdatedEvent.OutputObject
    >;
    FlipSupplyUpdated: TypedContractEvent<
      FlipSupplyUpdatedEvent.InputTuple,
      FlipSupplyUpdatedEvent.OutputTuple,
      FlipSupplyUpdatedEvent.OutputObject
    >;

    "Funded(bytes32,uint256,address)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "GovernanceWithdrawal(address,uint256)": TypedContractEvent<
      GovernanceWithdrawalEvent.InputTuple,
      GovernanceWithdrawalEvent.OutputTuple,
      GovernanceWithdrawalEvent.OutputObject
    >;
    GovernanceWithdrawal: TypedContractEvent<
      GovernanceWithdrawalEvent.InputTuple,
      GovernanceWithdrawalEvent.OutputTuple,
      GovernanceWithdrawalEvent.OutputObject
    >;

    "MinFundingChanged(uint256,uint256)": TypedContractEvent<
      MinFundingChangedEvent.InputTuple,
      MinFundingChangedEvent.OutputTuple,
      MinFundingChangedEvent.OutputObject
    >;
    MinFundingChanged: TypedContractEvent<
      MinFundingChangedEvent.InputTuple,
      MinFundingChangedEvent.OutputTuple,
      MinFundingChangedEvent.OutputObject
    >;

    "RedemptionExecuted(bytes32,uint256)": TypedContractEvent<
      RedemptionExecutedEvent.InputTuple,
      RedemptionExecutedEvent.OutputTuple,
      RedemptionExecutedEvent.OutputObject
    >;
    RedemptionExecuted: TypedContractEvent<
      RedemptionExecutedEvent.InputTuple,
      RedemptionExecutedEvent.OutputTuple,
      RedemptionExecutedEvent.OutputObject
    >;

    "RedemptionExpired(bytes32,uint256)": TypedContractEvent<
      RedemptionExpiredEvent.InputTuple,
      RedemptionExpiredEvent.OutputTuple,
      RedemptionExpiredEvent.OutputObject
    >;
    RedemptionExpired: TypedContractEvent<
      RedemptionExpiredEvent.InputTuple,
      RedemptionExpiredEvent.OutputTuple,
      RedemptionExpiredEvent.OutputObject
    >;

    "RedemptionRegistered(bytes32,uint256,address,uint48,uint48)": TypedContractEvent<
      RedemptionRegisteredEvent.InputTuple,
      RedemptionRegisteredEvent.OutputTuple,
      RedemptionRegisteredEvent.OutputObject
    >;
    RedemptionRegistered: TypedContractEvent<
      RedemptionRegisteredEvent.InputTuple,
      RedemptionRegisteredEvent.OutputTuple,
      RedemptionRegisteredEvent.OutputObject
    >;

    "Suspended(bool)": TypedContractEvent<
      SuspendedEvent.InputTuple,
      SuspendedEvent.OutputTuple,
      SuspendedEvent.OutputObject
    >;
    Suspended: TypedContractEvent<
      SuspendedEvent.InputTuple,
      SuspendedEvent.OutputTuple,
      SuspendedEvent.OutputObject
    >;

    "UpdatedKeyManager(address)": TypedContractEvent<
      UpdatedKeyManagerEvent.InputTuple,
      UpdatedKeyManagerEvent.OutputTuple,
      UpdatedKeyManagerEvent.OutputObject
    >;
    UpdatedKeyManager: TypedContractEvent<
      UpdatedKeyManagerEvent.InputTuple,
      UpdatedKeyManagerEvent.OutputTuple,
      UpdatedKeyManagerEvent.OutputObject
    >;
  };
}
