on:
  workflow_call:
    inputs:
      profile:
        default: release
        description: Profile to build
        type: string
      is-mainnet:
        default: false
        description: Whether to build for mainnet (currently just for verifying dylibs)
        type: boolean
      upload-name:
        default: chainflip-backend-bin
        description: Name of the folder to upload the binaries to
        type: string
      binary-subdir:
        default: release
        type: string
        description: Subdirectory of the target folder to upload
      ci-runner:
        default: rust-builder
        description: The CI runner to use
        type: string

env:
  FORCE_COLOR: 1
  COMMIT_HASH: ${{ github.sha }}
  CF_MAINNET_GPG_KEY_ID: "4E506212E4EF4E0D3E37E568596FBDCACBBCDD37"

jobs:
  compile:
    runs-on: namespace-profile-${{ inputs.ci-runner }}
    container:
      image: "nscr.io/n0ie27k9ikobs/chainflip-backend/rust-base:nightly-2025-01-1"
      volumes:
        - /cache:/cache
      options: --cap-add=SYS_ADMIN
      env:
        NSC_CACHE_PATH: "/cache"

    steps:
      - name: Checkout 🛒
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      - name: Set up Rust cache 🦀💰
        if: contains(inputs.ci-runner, 'no-cache') == false
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          cache: rust

      # This is a workaround for the issue with Git ownership that prevents cargo from executing git commands to get commit hash for `--version`
      - name: Configure Git 🛠️
        run: git config --global --add safe.directory "${GITHUB_WORKSPACE}"

      - name: Import GPG key from Ubuntu key server 🔑
        if: inputs.is-mainnet
        run: |
          gpg --keyserver keyserver.ubuntu.com --recv-keys $CF_MAINNET_GPG_KEY_ID
          gpg --list-keys

      - name: Verify GPG key import ✅
        if: inputs.is-mainnet
        run: |
          gpg --list-keys | grep -q "$CF_MAINNET_GPG_KEY_ID"
          if [ $? -eq 0 ]; then
            echo "GPG key successfully imported"
          else
            echo "Failed to import GPG key"
            exit 1
          fi

      - name: Build chainflip binaries 🏗️
        run: |
          if [ "${{ inputs.is-mainnet }}" = "true" ]; then
            export IS_MAINNET=true
          fi
          cargo cf-build-${{ inputs.profile }} --locked

      - name: ls directory
        run: |
          ls -la ./target/${{ inputs.binary-subdir }}

      # We flatten the structure so upload-artifact uploads a flattened structure
      - name: Prepare binaries for upload
        run: |
          mkdir -p ./target/${{ inputs.binary-subdir }}
          cp ./target/${{ inputs.binary-subdir }}/deps/libchainflip_engine_v*.so ./target/${{ inputs.binary-subdir }}/ || true

      - name: Upload binary artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: ${{ inputs.upload-name }}
          path: |
            ./target/${{ inputs.binary-subdir }}/chainflip-node
            ./target/${{ inputs.binary-subdir }}/chainflip-cli
            ./target/${{ inputs.binary-subdir }}/generate-genesis-keys
            ./target/${{ inputs.binary-subdir }}/chainflip-broker-api
            ./target/${{ inputs.binary-subdir }}/chainflip-lp-api
            ./target/${{ inputs.binary-subdir }}/chainflip-ingress-egress-tracker
            ./target/${{ inputs.binary-subdir }}/libchainflip_engine_v*.so
            ./target/${{ inputs.binary-subdir }}/engine-runner

      - name: Upload runtime artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: chainflip-node-runtime-${{ inputs.profile }}
          path: |
            ./target/${{ inputs.binary-subdir }}/wbuild/state-chain-runtime/state_chain_runtime*.wasm
