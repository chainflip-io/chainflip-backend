on:
  workflow_call:
    inputs:
      network:
        description: Network being released
        required: true
        type: string
      environment:
        description: Prod of dev
        required: true
        type: string
jobs:
  get-date-time:
    runs-on: ubuntu-20.04
    outputs:
      date: ${{ steps.date.outputs.date }}
      time: ${{ steps.date.outputs.time }}
    steps:
      - name: Get the date and time
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"
          echo "time=$(date +'%H:%M:%S')" >> "$GITHUB_OUTPUT"

  set-dockerfile-name:
    runs-on: ubuntu-20.04
    outputs:
      dockerfile_path: ${{ steps.dockerfile.outputs.dockerfile_path }}
    steps:
      - name: Set dockerfile name
        id: dockerfile
        run: |
          if [[ "${{ inputs.environment }}" == "prod" || "${{ inputs.network }}" == "sisyphos" || "${{ inputs.network }}" == "perseverance" ]] ; then
            echo "dockerfile_path=ci/docker/prod" >> "$GITHUB_OUTPUT"
          else
            echo "dockerfile_path=ci/docker/dev" >> "$GITHUB_OUTPUT"
          fi

  chainflip-binaries:
    needs: [get-date-time, set-dockerfile-name]
    env:
      DOCKER_REPO: ghcr.io/${{ github.repository }}
    strategy:
      matrix:
        target:
          - chainflip-node
          - chainflip-engine
          - chainflip-cli
          - chainflip-broker-api
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Update Docker repo for production images
        if: inputs.environment == 'prod'
        run:
          echo "DOCKER_REPO=ghcr.io/chainflip-io" >> $GITHUB_ENV

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: chainflip-backend-bin-ubuntu-20.04

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REPO }}/${{ matrix.target }}
          flavor: |
            latest=true
          tags: |
            type=schedule,pattern={{date 'YYYY-MM-DD'}},prefix=nightly-
            type=pep440,pattern={{version}},prefix=${{ inputs.network }}-
            type=raw,value=${{ github.sha }}
            type=raw,value=${{ inputs.network }}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: Login to Github Container Registry ðŸ”‘
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ needs.set-dockerfile-name.outputs.dockerfile_path }}/${{ matrix.target }}.Dockerfile
          build-args: |
            BUILD_DATETIME=${{ needs.get-date-time.outputs.date }} ${{ needs.get-date-time.outputs.time }}
            VCS_REF=${{ github.sha }}
            CHAINSPEC=${{ inputs.network }}

  chainflip-tools:
    needs: [get-date-time, set-dockerfile-name]
    if: inputs.environment != 'prod'
    env:
      DOCKER_REPO: ghcr.io/${{ github.repository }}
    strategy:
      matrix:
        target:
          - generate-genesis-keys
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Update Docker repo for production images
        if: inputs.environment == 'prod'
        run:
          echo "DOCKER_REPO=ghcr.io/chainflip-io" >> $GITHUB_ENV

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: chainflip-backend-bin-ubuntu-20.04

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REPO }}/${{ matrix.target }}
          flavor: |
            latest=true
          tags: |
            type=schedule,pattern={{date 'YYYY-MM-DD'}},prefix=nightly-
            type=pep440,pattern={{version}},prefix=${{ inputs.network }}-
            type=raw,value=${{ github.sha }}
            type=raw,value=${{ inputs.network }}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: Login to Github Container Registry ðŸ”‘
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ needs.set-dockerfile-name.outputs.dockerfile_path }}/${{ matrix.target }}.Dockerfile
          build-args: |
            BUILD_DATETIME=${{ needs.get-date-time.outputs.date }} ${{ needs.get-date-time.outputs.time }}
            VCS_REF=${{ github.sha }}
            CHAINSPEC=${{ inputs.network }}