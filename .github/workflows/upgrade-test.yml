name: Test upgrade from latest release to main

on:
  workflow_dispatch:
    inputs:
      upgrade-from-release:
        description: 'The release we want to upgrade *from*: "sisyphos", "perseverance" or "berghain"'
        required: true
        default: "perseverance"
      upgrade-to-workflow-name:
        description: "Name of the workflow to pull the upgrade-to artefacts from"
        required: true
        default: "ci-main.yml"
      upgrade-to-commit:
        description: "Commit to run the upgrade test against. Leave blank to use the latest workflow run."
        required: false

  workflow_call:
    inputs:
      upgrade-from-release:
        type: string
        description: 'The release we want to upgrade *from*: "perseverance" or "berghain"'
        default: "perseverance"
      upgrade-to-workflow-name:
        type: string
        description: "Name of the workflow to pull the upgrade-to artefacts from"
        default: "ci-main.yml"
      upgrade-to-commit:
        type: string
        description: "Commit to run the upgrade test against. Leave blank to use the latest successful workflow run."
        required: false

env:
  FORCE_COLOR: 1

permissions:
  packages: read
  contents: read

jobs:
  upgrade_test:
    runs-on: digitalocean
    # conservatively 1.5 hours. 2 bouncer runs need to occur.
    timeout-minutes: 90
    steps:
      - name: Checkout chainflip-backend 🛒
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          fetch-depth: 0

      - name: Get upgrade-to-commit SHA 📜
        uses: ./.github/actions/get-workflow-commit
        id: get-upgrade-to-commit
        with:
          workflow-name: ${{ inputs.upgrade-to-workflow-name }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set upgrade-to-commit 📲
        run: |
          if [ -z "${{ inputs.upgrade-to-commit }}" ]; then
            echo "UPGRADE_TO_COMMIT=${{ steps.get-upgrade-to-commit.outputs.commit-sha }}" >> $GITHUB_ENV
          else
            echo "UPGRADE_TO_COMMIT=${{ inputs.upgrade-to-commit }}" >> $GITHUB_ENV
          fi

      - name: Login to Github Container Registry 🔑
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub 🔑
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          username: ${{ secrets.CF_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CF_DOCKERHUB_TOKEN }}

      - name: Configure NodeJS 🛠️
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: "bouncer/pnpm-lock.yaml"

      - name: Install system packages 💿
        run: |
          sudo apt update
          sudo apt install -y bc xxd

      - name: Install wscat 🐈
        run: |
          npm install -g wscat

      - name: Download try-runtime binary 📥
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: paritytech/try-runtime-cli
          tag: v0.5.0
          extension-matching: disable
          rename-to: try-runtime
          chmod: 0755

      - name: Get upgrade-from-commit 📜
        uses: ./.github/actions/get-workflow-commit
        id: get-upgrade-from-commit
        with:
          workflow-name: release-${{ inputs.upgrade-from-release }}.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: echo upgrade from commit 🔊
        run: |
          echo "The upgrade-from-commit is: ${{ steps.get-upgrade-from-commit.outputs.commit-sha }}"

      - name: Download latest release binaries 📥
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: release-${{ inputs.upgrade-from-release }}.yml
          name: chainflip-backend-bin-ubuntu-22.04
          github_token: ${{ secrets.CF_BACKEND_GITHUB_TOKEN }}
          path: latest-release-bins

      - name: Permissions for latest binaries 🛡️
        run: |
          chmod +x ./latest-release-bins/chainflip-*

      - name: Get version of the latest release ✍️
        run: |
          set -x
          RELEASE_VERSION=$(./latest-release-bins/chainflip-node --version)
          echo $RELEASE_VERSION
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Download latest main binaries 📥
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ inputs.upgrade-to-workflow-name }}
          name: chainflip-backend-bin-try-runtime
          path: upgrade-to-bins
          commit: ${{ env.UPGRADE_TO_COMMIT }}

      - name: Download latest main runtime 📥
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ inputs.upgrade-to-workflow-name }}
          name: chainflip-node-runtime-try-runtime
          path: main-runtime
          commit: ${{ env.UPGRADE_TO_COMMIT }}

      - name: Permissions for latest binaries 🛡️
        run: |
          chmod +x ./upgrade-to-bins/chainflip-*
          chmod +x ./upgrade-to-bins/engine-runner

      - name: Get version of latest main ✍️
        run: |
          set -x
          MAIN_VERSION=$(./upgrade-to-bins/chainflip-node --version)
          echo $MAIN_VERSION

      - name: Start a localnet from current release 🚀
        env:
          BINARY_ROOT_PATH: ./latest-release-bins
          DEBUG_OUTPUT_DESTINATION: /tmp/chainflip/debug.*log
        run: |
          git checkout ${{ steps.get-upgrade-from-commit.outputs.commit-sha }}
          set -x
          mkdir -p /tmp/chainflip/bashful
          mkdir -p /tmp/chainflip/doc
          mkdir -p /tmp/chainflip/dopey
          touch /tmp/chainflip/debug.log
          chmod +x ${{ env.BINARY_ROOT_PATH }}/chainflip-*
          touch ./localnet/.setup_complete
          ./localnet/manage.sh

      - name: Run bouncer on latest release 🙅‍♂️
        id: pre-upgrade-bouncer
        run: |
          git checkout ${{ steps.get-upgrade-from-commit.outputs.commit-sha }}
          git rev-parse HEAD
          cd bouncer
          pnpm install --frozen-lockfile
          ./run.sh

      # we need to be sure that when this fails, we catch the error, any panics etc. that occur
      # TODO: Run swaps simultaneously to the upgrade - we could do that inside the `upgrade_network` command itself.
      - name: Upgrade network 🚀
        shell: bash
        id: upgrade-network
        run: |
          git checkout ${{ github.sha }}
          git rev-parse HEAD
          cd bouncer
          mv ./../upgrade-to-bins/*.so ./../old-engine-dylib/
          pnpm install --frozen-lockfile
          ./commands/upgrade_network.ts prebuilt \
            --runtime ./../main-runtime/state_chain_runtime.compact.compressed.wasm \
            --bins ./../upgrade-to-bins \
            --localnet_init ./../localnet/init \
            --oldVersion "${{ env.RELEASE_VERSION }}"

      - name: Run bouncer after upgrade 🙅‍♂️
        id: post-upgrade-bouncer
        run: |
          git checkout ${{ env.UPGRADE_TO_COMMIT }}
          git rev-parse HEAD
          cd bouncer
          pnpm install --frozen-lockfile
          ./commands/setup_swaps.ts
          ./tests/all_concurrent_tests.ts

      - name: Print chainflip-engine logs 🚗
        if: always()
        run: |
          cat /tmp/chainflip/*/chainflip-engine.*log

      - name: Print new pre-upgrade chainflip-engine logs 🚗
        if: always()
        run: |
          cat /tmp/chainflip/*/chainflip-engine-pre-upgrade.*log

      - name: Print new post-upgrade chainflip-engine logs 🚗
        if: always()
        run: |
          cat /tmp/chainflip/*/chainflip-engine-post-upgrade.*log

      - name: Print chainflip-node logs 📡
        if: always()
        run: |
          cat /tmp/chainflip/*/chainflip-node.*log

      - name: Print chainflip-broker-api logs 💼
        if: always()
        run: |
          cat /tmp/chainflip/chainflip-broker-api.*log

      - name: Print chainflip-lp-api logs 🤑
        if: always()
        run: |
          cat /tmp/chainflip/chainflip-lp-api.*log

      - name: Print localnet init debug logs 🕵️‍♂️
        if: always()
        run: |
          cat /tmp/chainflip/debug.log

      - name: Upload Localnet Logs 💾
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: localnet-logs
          path: |
            /tmp/chainflip/*/chainflip-*.*log

      - name: Upload Chainflip Logs 💾
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: chainflip-logs
          path: |
            /tmp/chainflip/logs/*.log

      - name: Upload Snapshots 💾
        if: failure()
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: failure-snapshots
          path: |
            /tmp/chainflip/snapshots/*.snap

      - name: Clean Up docker containers 🧹
        if: always()
        continue-on-error: true
        run: |
          ls -alR /tmp/chainflip
          docker compose -f localnet/docker-compose.yml -p "chainflip-localnet" logs
          docker compose -f localnet/docker-compose.yml -p "chainflip-localnet" down --rmi all --volumes --remove-orphans

      - name: Notify on failed upgrade test 🚨
        if: failure() && github.ref_name == 'main' || cancelled() && github.ref_name == 'main'
        env:
          DISCORD_USERNAME: "Upgrade Test"
          DISCORD_WEBHOOK: ${{ secrets.CF_DISCORD_ALERTS_CRITICAL }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: |
            ❗️❗️❗️❗️ Sorry **${{ github.actor }}**, The Upgrade Test has not passed ❗️❗️❗️❗️
            👾 Link to job: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>
