[package]
name = 'cf-chains'
version = '0.1.0'
authors = ['Chainflip <https://chainflip.io>']
edition = '2021'
description = 'Shared Chain-specific functionality for use in the substrate runtime.'

[lints]
workspace = true

[dependencies]
cf-primitives = { path = '../primitives', default-features = false }
cf-utilities = { package = 'utilities', path = '../../utilities', default-features = false }
cf-runtime-utilities = { path = '../runtime-utilities', default-features = false }

# Cryptography
digest = { version = "0.10" }
libsecp256k1 = { workspace = true, features = [
  'static-context',
] }
sha2 = { workspace = true }

# Solana
sol-prim = { path = "../../foreign-chains/solana/sol-prim", default-features = false, features = [
  "pda",
  "str",
  "serde",
  "scale",
] }

# Ethereum
ethabi = { default-features = false, version = '18.0' }
ethereum-types = { default-features = false, version = '0.14.1' }
ethereum = { workspace = true }
rlp = { workspace = true }

# Bitcoin
bech32 = { default-features = false, version = '0.9.1' }

# Solana
borsh = { version = "1.2.1", default-features = false, features = [
  "derive",
  "unstable__schema",
  "hashbrown",
] }
serde_with = { version = "2.3.3", default-features = false, features = [
  "macros",
] }
generic-array = { workspace = true, features = [
  "serde",
] }
bs58 = { workspace = true, features = ["alloc"] }
bincode = { version = "2.0.0-rc.3", default-features = false, features = [
  "alloc",
  "serde",
] }
curve25519-dalek = { workspace = true, optional = true }
sha2-const = { version = "0.1.2", default-features = false }
ed25519-dalek = { workspace = true, optional = true }

# Other
anyhow = { workspace = true, optional = true }
hex = { workspace = true, features = ["serde"] }
hex-literal = { workspace = true }
serde = { workspace = true, features = ["derive", "alloc"] }
serde_bytes = { workspace = true }
log = { workspace = true }
itertools = { workspace = true }
arrayref = { workspace = true }
strum = { workspace = true }
thiserror = { workspace = true, optional = true }
rand = { workspace = true, optional = true }

# Substrate packages
ss58-registry = { version = "1.41", optional = true }
codec = { workspace = true, features = [
  "derive",
] }
scale-info = { workspace = true, features = [
  "derive",
] }
frame-support = { git = "https://github.com/chainflip-io/polkadot-sdk.git", tag = "chainflip-substrate-1.15.2+2", default-features = false }
sp-std = { git = "https://github.com/chainflip-io/polkadot-sdk.git", tag = "chainflip-substrate-1.15.2+2", default-features = false }
sp-core = { git = "https://github.com/chainflip-io/polkadot-sdk.git", tag = "chainflip-substrate-1.15.2+2", default-features = false }
sp-io = { git = "https://github.com/chainflip-io/polkadot-sdk.git", tag = "chainflip-substrate-1.15.2+2", default-features = false }
sp-runtime = { git = "https://github.com/chainflip-io/polkadot-sdk.git", tag = "chainflip-substrate-1.15.2+2", default-features = false }

[dev-dependencies]
cf-test-utilities = { path = '../test-utilities' }
serde_json = { workspace = true }
heck = "0.5.0"
rand = { workspace = true }
ed25519-dalek = { workspace = true, features = ["rand_core"] }

[features]
default = ['std']
std = [
  "bech32/std",
  "cf-primitives/std",
  "cf-utilities/std",
  "scale-info/std",
  "codec/std",
  "ethabi/full-serde",
  "ethereum/std",
  "ethereum-types/std",
  "frame-support/std",
  "hex/std",
  "hex/serde",
  "libsecp256k1/std",
  "log/std",
  "rlp/std",
  "serde/std",
  "sp-std/std",
  "sp-core/std",
  "sp-core/full_crypto",
  "sp-io/std",
  "dep:ss58-registry",
  "dep:thiserror",
  "dep:anyhow",
  "strum/std",
  "sp-runtime/std",
  "anyhow?/std",
  "bincode/std",
  "bs58/std",
  "cf-runtime-utilities/std",
  "digest/std",
  "ethabi/std",
  "serde_bytes/std",
  "serde_with/std",
  "sha2/std",
  "sol-prim/std",
  "itertools/use_std",
  # "borsh/std" not needed, it conflicts with borsh/hashbrown.
]
runtime-benchmarks = [
  'frame-support/runtime-benchmarks',
  'sp-runtime/runtime-benchmarks',
]
try-runtime = ["frame-support/try-runtime", "sp-runtime/try-runtime"]

runtime-integration-tests = ['std', 'dep:rand', 'ed25519-dalek/rand_core']
