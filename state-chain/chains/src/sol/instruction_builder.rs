//! This file contains a Instruction builder for the Solana chain.
//!
//! The builder is used to build single Solana Instruction used for Vault Swap.
//!
//! Such Instruction can be signed and sent to the Program on Solana directly to invoke
//! certain functions.

use sol_prim::consts::{SOL_USDC_DECIMAL, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID};

use crate::{
	address::EncodedAddress,
	sol::{
		sol_tx_core::program_instructions::swap_endpoints::{
			SwapEndpointProgram, SwapNativeParams, SwapTokenParams,
		},
		SolAddress, SolAmount, SolApiEnvironment, SolInstruction, SolPubkey,
	},
	CcmChannelMetadata,
};
use cf_primitives::chains::assets::any::Asset;
use sp_std::vec::Vec;

fn system_program_id() -> SolAddress {
	SYSTEM_PROGRAM_ID
}

fn token_program_id() -> SolAddress {
	TOKEN_PROGRAM_ID
}

pub struct SolanaInstructionBuilder;

impl SolanaInstructionBuilder {
	pub fn x_swap_native(
		api_environment: SolApiEnvironment,
		agg_key: SolPubkey,
		destination_asset: Asset,
		destination_address: EncodedAddress,
		from: SolPubkey,
		event_data_account: SolPubkey,
		input_amount: SolAmount,
		cf_parameters: Vec<u8>,
		ccm: Option<CcmChannelMetadata>,
	) -> SolInstruction {
		SwapEndpointProgram::with_id(api_environment.swap_endpoint_program).x_swap_native(
			SwapNativeParams {
				amount: input_amount,
				dst_chain: destination_address.chain() as u32,
				dst_address: destination_address.into_vec(),
				dst_token: destination_asset as u32,
				ccm_parameters: ccm.map(|metadata| metadata.into()),
				cf_parameters,
			},
			api_environment.vault_program_data_account,
			agg_key,
			from,
			event_data_account,
			api_environment.swap_endpoint_program_data_account,
			system_program_id(),
		)
	}

	pub fn x_swap_usdc(
		api_environment: SolApiEnvironment,
		destination_asset: Asset,
		destination_address: EncodedAddress,
		from: SolPubkey,
		from_token_account: SolPubkey,
		event_data_account: SolPubkey,
		token_supported_account: SolPubkey,
		input_amount: SolAmount,
		cf_parameters: Vec<u8>,
		ccm: Option<CcmChannelMetadata>,
	) -> SolInstruction {
		SwapEndpointProgram::with_id(api_environment.swap_endpoint_program).x_swap_token(
			SwapTokenParams {
				amount: input_amount,
				dst_chain: destination_address.chain() as u32,
				dst_address: destination_address.into_vec(),
				dst_token: destination_asset as u32,
				ccm_parameters: ccm.map(|metadata| metadata.into()),
				cf_parameters,
				decimals: SOL_USDC_DECIMAL,
			},
			api_environment.vault_program_data_account,
			api_environment.usdc_token_vault_ata,
			from,
			from_token_account,
			event_data_account,
			api_environment.swap_endpoint_program_data_account,
			token_supported_account,
			token_program_id(),
			api_environment.usdc_token_mint_pubkey,
			system_program_id(),
		)
	}
}

#[cfg(test)]
mod test {
	use super::*;
	use crate::{
		cf_parameters::build_cf_parameters,
		sol::{
			signing_key::SolSigningKey, sol_tx_core::sol_test_values::*, SolAddress, SolHash,
			SolMessage, SolTransaction,
		},
		ChannelRefundParametersDecoded, ForeignChainAddress,
	};
	use cf_primitives::{
		AccountId, AffiliateAndFee, AffiliateShortId, BasisPoints, DcaParameters, MAX_AFFILIATES,
	};
	use sol_prim::consts::{const_address, MAX_TRANSACTION_LENGTH};
	use sp_core::ConstU32;
	use sp_runtime::BoundedVec;

	// private key: ead22312d80f573924a27595271bd2ec0aa20a270587c8a399136166561ea58c
	const DESTINATION_ADDRESS_ETH: EncodedAddress =
		EncodedAddress::Eth(hex_literal::hex!("756FBdE9c71EaE05C2f7169f816b0Bd11D978020"));

	// Test Solana accounts. Generated by
	// ```rust
	// let key = SolSigningKey.new();
	// key.print_pub_and_private_keys();
	// ```

	//const DESTINATION_ADDRESS_KEY_BYTES: [u8; 32] = [242, 33, 23, 21, 58, 254, 23, 134, 199, 91,
	// 117, 2, 20, 116, 174, 15, 191, 69, 254, 42, 135, 88, 210, 88, 225, 158, 31, 184, 181, 50, 16,
	// 195];
	const DESTINATION_ADDRESS_SOL: SolAddress =
		const_address("BdyHK5DckpAFGcbZveGLPjjMEaADGfNeqcRXKoyd33kA");

	const FROM_KEY_BYTES: [u8; 32] = [
		130, 14, 62, 77, 129, 146, 185, 187, 159, 15, 165, 161, 93, 111, 249, 198, 145, 149, 193,
		229, 147, 69, 73, 190, 10, 208, 151, 131, 194, 205, 116, 232,
	];
	const FROM: SolAddress = const_address("EwgZksaPybTUyhcEMn3aR46HZokR4NH6d1Wy8d51qZ6G");

	const EVENT_DATA_ACCOUNT_KEY_BYTES: [u8; 32] = [
		133, 220, 70, 223, 197, 127, 106, 46, 178, 73, 164, 200, 88, 128, 97, 144, 20, 132, 211,
		34, 196, 159, 28, 118, 5, 209, 12, 245, 241, 223, 8, 67,
	];
	const EVENT_DATA_ACCOUNT: SolAddress =
		const_address("9acHwMGmeoMr5o8Cw1V2U4HjMQwhced3eQP31yYEhYDU");

	//const TOKEN_SUPPORTED_ACCOUNT_KEY_BYTES: [u8; 32] = [0, 81, 206, 126, 204, 53, 163, 79, 5,
	// 119, 184, 1, 97, 237, 114, 120, 23, 6, 227, 206, 239, 132, 130, 212, 241, 12, 21, 185, 66,
	// 252, 127, 8];
	const TOKEN_SUPPORTED_ACCOUNT: SolAddress =
		const_address("48vfkGMyVDUNq689aocfYQsoqubZjjme7cja21cbnMnK");

	const BROKER_COMMISSION: BasisPoints = 1u16;
	const BOOST_FEE: u8 = 2u8;
	const INPUT_AMOUNT: SolAmount = 1_234_567_890u64;

	const BLOCKHASH: SolHash = SolHash([0x00; 32]);

	// Sisyphos broker account: 0xa622ebf634ff6cdafe1b7912d8699b34a4d9a08598af0b0c90eaf1e912de1f19
	fn broker_id() -> AccountId {
		AccountId::from(hex_literal::hex!(
			"a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e"
		))
	}

	fn channel_refund_parameters() -> ChannelRefundParametersDecoded {
		ChannelRefundParametersDecoded {
			min_price: sp_core::U256::default(),
			refund_address: ForeignChainAddress::Sol(DESTINATION_ADDRESS_SOL),
			retry_duration: 10u32,
		}
	}

	fn affiliate_and_fees() -> BoundedVec<AffiliateAndFee, ConstU32<MAX_AFFILIATES>> {
		vec![
			AffiliateAndFee { affiliate: AffiliateShortId(1u8), fee: 10u8 },
			AffiliateAndFee { affiliate: AffiliateShortId(2u8), fee: 20u8 },
		]
		.try_into()
		.unwrap()
	}

	fn dca_parameters() -> DcaParameters {
		DcaParameters { number_of_chunks: 10u32, chunk_interval: 20u32 }
	}

	fn cf_parameter(with_ccm: bool) -> Vec<u8> {
		build_cf_parameters(
			channel_refund_parameters(),
			Some(dca_parameters()),
			BOOST_FEE,
			broker_id(),
			BROKER_COMMISSION,
			affiliate_and_fees(),
			with_ccm.then_some(&ccm_parameter().channel_metadata),
		)
	}

	fn into_transaction(instructions: SolInstruction, payer: SolPubkey) -> SolTransaction {
		// Build mock Transaction for testing.
		let transaction =
			SolTransaction::new_unsigned(SolMessage::new(&[instructions], Some(&payer)));

		let mock_serialized_tx = transaction
			.clone()
			.finalize_and_serialize()
			.expect("Transaction building must succeed.");

		assert!(
			mock_serialized_tx.len() < MAX_TRANSACTION_LENGTH,
			"Transaction exceeded max length"
		);

		transaction
	}

	#[test]
	fn can_build_x_swap_native_instruction_no_ccm() {
		let transaction = into_transaction(
			SolanaInstructionBuilder::x_swap_native(
				api_env(),
				agg_key().into(),
				Asset::Eth,
				DESTINATION_ADDRESS_ETH,
				FROM.into(),
				EVENT_DATA_ACCOUNT.into(),
				INPUT_AMOUNT,
				cf_parameter(false),
				None,
			),
			FROM.into(),
		);

		let expected_serialized_tx = hex_literal::hex!("02fd3e32179e2999e2ae3bda58c9e0dee61bcf2a67674dd3f0fe58bd0c161eba05c2680605235cd00b7b8d2dea51201457cee297e0c0b6ef338baa9592bab72209ad58557eab2fd47c1713c850a45fffde67c2d323876df46307d36fd50997a1f9448f6d98b76aaec44b3143518e86868115375a985b5867c4aae991eebf15f40f02000307cf2a079e1506b29d02c8feac98d589a9059a740891dcd3dab6c64b3160bc28317f799121d6c125f312c5f423a51959ce1d41df06af977e9a17f48b2c82ecf89f1c1f0efc91eeb48bb80c90cf97775cd5d843a96f16500266cee2c20d053152d2f79d5e026f12edc6443a534b2cdd5072233989b415d7596573e743f3e5b386fb00000000000000000000000000000000000000000000000000000000000000001ef91c791d2aa8492c90f12540abd10056ce5dd8d9ab08461476c1dcc1622938a1e031c8bc9bec3b610cf7b36eb3bf3aa40237c9e5be2c7893878578439eb00b0000000000000000000000000000000000000000000000000000000000000000010506060300010204ac01a3265ce2f3698dc4d2029649000000000100000014000000756fbde9c71eae05c2f7169f816b0bd11d978020010000000077000000000a000000049e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0000000000000000000000000000000000000000000000000000000000000000010a0000001400000002a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e010008010a0214").to_vec();

		let from_signing_key = SolSigningKey::from_bytes(&FROM_KEY_BYTES).unwrap();
		let event_data_account_signing_key =
			SolSigningKey::from_bytes(&EVENT_DATA_ACCOUNT_KEY_BYTES).unwrap();

		test_constructed_transaction_with_signer(
			transaction,
			expected_serialized_tx,
			vec![from_signing_key, event_data_account_signing_key].into(),
			BLOCKHASH.into(),
		);
	}

	#[test]
	fn can_build_x_swap_native_instruction_with_ccm() {
		let transaction = into_transaction(
			SolanaInstructionBuilder::x_swap_native(
				api_env(),
				agg_key().into(),
				Asset::SolUsdc,
				EncodedAddress::Sol(DESTINATION_ADDRESS_SOL.0),
				FROM.into(),
				EVENT_DATA_ACCOUNT.into(),
				INPUT_AMOUNT,
				cf_parameter(true),
				Some(ccm_parameter().channel_metadata),
			),
			FROM.into(),
		);

		let expected_serialized_tx = hex_literal::hex!("02bbf3ca52ee11d2e8fa7bdec12f1099dc6ebd68b33ec490e6805d2f37396fe22b7e04ce39f58f2ac276a8ca53c261a86d9f0b0f6d15bd0c2a71c529fbc04d8c04ad36b9b7e45512eb9de33761013387dc3ce8115713d4086fed0e6b1752c5102da951f5b1f2e31c4185c865c948c27ac312019af07cce26ae598c1678110e1f0702000307cf2a079e1506b29d02c8feac98d589a9059a740891dcd3dab6c64b3160bc28317f799121d6c125f312c5f423a51959ce1d41df06af977e9a17f48b2c82ecf89f1c1f0efc91eeb48bb80c90cf97775cd5d843a96f16500266cee2c20d053152d2f79d5e026f12edc6443a534b2cdd5072233989b415d7596573e743f3e5b386fb00000000000000000000000000000000000000000000000000000000000000001ef91c791d2aa8492c90f12540abd10056ce5dd8d9ab08461476c1dcc1622938a1e031c8bc9bec3b610cf7b36eb3bf3aa40237c9e5be2c7893878578439eb00b0000000000000000000000000000000000000000000000000000000000000000010506060300010204ad02a3265ce2f3698dc4d20296490000000005000000200000009e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0a00000001040000007c1d0f070000000000000000dc000000008d017417da8b99d7748127a76b03d61fee69c80dfef73ad2d5503737beedc5a9ed480104a73bdf31e341218a693b8772c43ecfcecd4cf35fada09a87ea0f860d028168e50090e0b0f5b60147b325842c1fc68f6c90fe26419ea7c4afeb982f71f1f54b5b440a000000049e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0000000000000000000000000000000000000000000000000000000000000000010a0000001400000002a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e010008010a0214").to_vec();

		let from_signing_key = SolSigningKey::from_bytes(&FROM_KEY_BYTES).unwrap();
		let event_data_account_signing_key =
			SolSigningKey::from_bytes(&EVENT_DATA_ACCOUNT_KEY_BYTES).unwrap();

		test_constructed_transaction_with_signer(
			transaction,
			expected_serialized_tx,
			vec![from_signing_key, event_data_account_signing_key].into(),
			BLOCKHASH.into(),
		);
	}

	#[test]
	fn can_build_x_swap_token_instruction_no_ccm() {
		let from_usdc_account =
			crate::sol::sol_tx_core::address_derivation::derive_associated_token_account(
				FROM,
				api_env().usdc_token_mint_pubkey,
			)
			.unwrap()
			.address
			.into();

		let transaction = into_transaction(
			SolanaInstructionBuilder::x_swap_usdc(
				api_env(),
				Asset::Eth,
				DESTINATION_ADDRESS_ETH,
				FROM.into(),
				from_usdc_account,
				EVENT_DATA_ACCOUNT.into(),
				TOKEN_SUPPORTED_ACCOUNT.into(),
				INPUT_AMOUNT,
				cf_parameter(false),
				None,
			),
			FROM.into(),
		);

		let expected_serialized_tx = hex_literal::hex!("025bf721731dad87d86d866ce5d5ae67464837ea82ed143c1b7938b8c80cfa21648ffa8b3f3b6e4c6ffbb98e882a731ba6515aa82ce424c8be77a6868b71d4e903baa3dbe690708ccb8ede793064c778f714cc692789a631ad0ae2a53ee5fa4bc23db51709c77056f76e8818359d4079d1add6ed568b073a4369e8e790d64034070200060bcf2a079e1506b29d02c8feac98d589a9059a740891dcd3dab6c64b3160bc28317f799121d6c125f312c5f423a51959ce1d41df06af977e9a17f48b2c82ecf89f1c1f0efc91eeb48bb80c90cf97775cd5d843a96f16500266cee2c20d053152d227fefc7ec198ef3eacb0f17871e1fad81f07a40cd55f4f364c3915877d89bd8ae91372b3d301c202a633da0a92365a736e462131aecfad1fac47322cf8863ada000000000000000000000000000000000000000000000000000000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90fb9ba52b1f09445f1e3a7508d59f0797923acf744fbe2da303fb06da859ee871ef91c791d2aa8492c90f12540abd10056ce5dd8d9ab08461476c1dcc16229382e9acf1ff8568fbe655e616a167591aeedc250afbc88d759ec959b1982e8769ca1e031c8bc9bec3b610cf7b36eb3bf3aa40237c9e5be2c7893878578439eb00b000000000000000000000000000000000000000000000000000000000000000001080a0a040003010209060705ad014532fc63e55377ebd2029649000000000100000014000000756fbde9c71eae05c2f7169f816b0bd11d978020010000000077000000000a000000049e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0000000000000000000000000000000000000000000000000000000000000000010a0000001400000002a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e010008010a021406").to_vec();

		let from_signing_key = SolSigningKey::from_bytes(&FROM_KEY_BYTES).unwrap();
		let event_data_account_signing_key =
			SolSigningKey::from_bytes(&EVENT_DATA_ACCOUNT_KEY_BYTES).unwrap();

		test_constructed_transaction_with_signer(
			transaction,
			expected_serialized_tx,
			vec![from_signing_key, event_data_account_signing_key].into(),
			BLOCKHASH.into(),
		);
	}

	#[test]
	fn can_build_x_swap_token_instruction_with_ccm() {
		let from_usdc_account =
			crate::sol::sol_tx_core::address_derivation::derive_associated_token_account(
				FROM,
				api_env().usdc_token_mint_pubkey,
			)
			.unwrap()
			.address
			.into();

		let transaction = into_transaction(
			SolanaInstructionBuilder::x_swap_usdc(
				api_env(),
				Asset::Sol,
				EncodedAddress::Sol(DESTINATION_ADDRESS_SOL.0),
				FROM.into(),
				from_usdc_account,
				EVENT_DATA_ACCOUNT.into(),
				TOKEN_SUPPORTED_ACCOUNT.into(),
				INPUT_AMOUNT,
				cf_parameter(true),
				Some(ccm_parameter().channel_metadata),
			),
			FROM.into(),
		);

		let expected_serialized_tx = hex_literal::hex!("023e5b1a678b28f8b654115fd642b2cc79787987801e1b1dc1a0ef70a0152d9031bee0790147cca8ecaadd97a8e59b4526782f0f37ec399e5247bd5cd5f6838b07509dedd300d554befdee2208f5b634b1c34200aecaf632a072e3afe36a9afd75f0dc66b0cc5a8a89c0cc40ab81762d959f473c16fb7afad098e6a6b7429219000200060bcf2a079e1506b29d02c8feac98d589a9059a740891dcd3dab6c64b3160bc28317f799121d6c125f312c5f423a51959ce1d41df06af977e9a17f48b2c82ecf89f1c1f0efc91eeb48bb80c90cf97775cd5d843a96f16500266cee2c20d053152d227fefc7ec198ef3eacb0f17871e1fad81f07a40cd55f4f364c3915877d89bd8ae91372b3d301c202a633da0a92365a736e462131aecfad1fac47322cf8863ada000000000000000000000000000000000000000000000000000000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90fb9ba52b1f09445f1e3a7508d59f0797923acf744fbe2da303fb06da859ee871ef91c791d2aa8492c90f12540abd10056ce5dd8d9ab08461476c1dcc16229382e9acf1ff8568fbe655e616a167591aeedc250afbc88d759ec959b1982e8769ca1e031c8bc9bec3b610cf7b36eb3bf3aa40237c9e5be2c7893878578439eb00b000000000000000000000000000000000000000000000000000000000000000001080a0a040003010209060705ae024532fc63e55377ebd20296490000000005000000200000009e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0900000001040000007c1d0f070000000000000000dc000000008d017417da8b99d7748127a76b03d61fee69c80dfef73ad2d5503737beedc5a9ed480104a73bdf31e341218a693b8772c43ecfcecd4cf35fada09a87ea0f860d028168e50090e0b0f5b60147b325842c1fc68f6c90fe26419ea7c4afeb982f71f1f54b5b440a000000049e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0000000000000000000000000000000000000000000000000000000000000000010a0000001400000002a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e010008010a021406").to_vec();

		let from_signing_key = SolSigningKey::from_bytes(&FROM_KEY_BYTES).unwrap();
		let event_data_account_signing_key =
			SolSigningKey::from_bytes(&EVENT_DATA_ACCOUNT_KEY_BYTES).unwrap();

		test_constructed_transaction_with_signer(
			transaction,
			expected_serialized_tx,
			vec![from_signing_key, event_data_account_signing_key].into(),
			BLOCKHASH.into(),
		);
	}
}
