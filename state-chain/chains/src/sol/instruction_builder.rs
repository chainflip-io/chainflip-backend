// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! This file contains a Instruction builder for the Solana chain.
//!
//! The builder is used to build single Solana Instruction used for Vault Swap.
//!
//! Such Instruction can be signed and sent to the Program on Solana directly to invoke
//! certain functions.

use crate::{
	address::EncodedAddress,
	sol::{
		sol_tx_core::{
			consts::{SOL_USDC_DECIMAL, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID},
			program_instructions::swap_endpoints::{
				SwapEndpointProgram, SwapNativeParams, SwapTokenParams,
			},
		},
		SolAddress, SolAmount, SolApiEnvironment, SolInstruction, SolPubkey,
	},
	CcmChannelMetadata,
};
use cf_primitives::chains::assets::any::Asset;
use sp_std::vec::Vec;

fn system_program_id() -> SolAddress {
	SYSTEM_PROGRAM_ID
}

fn token_program_id() -> SolAddress {
	TOKEN_PROGRAM_ID
}

pub struct SolanaInstructionBuilder;

impl SolanaInstructionBuilder {
	pub fn x_swap_native(
		api_environment: SolApiEnvironment,
		swap_endpoint_native_vault: SolPubkey,
		destination_asset: Asset,
		destination_address: EncodedAddress,
		from: SolPubkey,
		event_data_account: SolPubkey,
		input_amount: SolAmount,
		cf_parameters: Vec<u8>,
		ccm: Option<CcmChannelMetadata>,
	) -> SolInstruction {
		SwapEndpointProgram::with_id(api_environment.swap_endpoint_program).x_swap_native(
			SwapNativeParams {
				amount: input_amount,
				dst_chain: destination_address.chain() as u32,
				dst_address: destination_address.into_vec(),
				dst_token: destination_asset as u32,
				ccm_parameters: ccm.map(|metadata| metadata.into()),
				cf_parameters,
			},
			api_environment.vault_program_data_account,
			swap_endpoint_native_vault,
			from,
			event_data_account,
			api_environment.swap_endpoint_program_data_account,
			system_program_id(),
		)
	}

	pub fn x_swap_usdc(
		api_environment: SolApiEnvironment,
		destination_asset: Asset,
		destination_address: EncodedAddress,
		from: SolPubkey,
		from_token_account: SolPubkey,
		event_data_account: SolPubkey,
		token_supported_account: SolPubkey,
		input_amount: SolAmount,
		cf_parameters: Vec<u8>,
		ccm: Option<CcmChannelMetadata>,
	) -> SolInstruction {
		SwapEndpointProgram::with_id(api_environment.swap_endpoint_program).x_swap_token(
			SwapTokenParams {
				amount: input_amount,
				dst_chain: destination_address.chain() as u32,
				dst_address: destination_address.into_vec(),
				dst_token: destination_asset as u32,
				ccm_parameters: ccm.map(|metadata| metadata.into()),
				cf_parameters,
				decimals: SOL_USDC_DECIMAL,
			},
			api_environment.vault_program_data_account,
			api_environment.usdc_token_vault_ata,
			from,
			from_token_account,
			event_data_account,
			api_environment.swap_endpoint_program_data_account,
			token_supported_account,
			token_program_id(),
			api_environment.usdc_token_mint_pubkey,
			system_program_id(),
		)
	}
}

#[cfg(test)]
mod test {
	use super::*;
	use crate::{
		cf_parameters::build_cf_parameters,
		sol::{
			signing_key::SolSigningKey,
			sol_tx_core::{
				consts::{const_address, MAX_TRANSACTION_LENGTH},
				sol_test_values::*,
			},
			SolAddress, SolHash, SolLegacyMessage, SolLegacyTransaction,
		},
		ChannelRefundParameters,
	};
	use cf_primitives::{
		chains::Solana, AccountId, AffiliateAndFee, AffiliateShortId, BasisPoints, DcaParameters,
		MAX_AFFILIATES,
	};
	use sp_core::ConstU32;
	use sp_runtime::BoundedVec;

	// private key: ead22312d80f573924a27595271bd2ec0aa20a270587c8a399136166561ea58c
	const DESTINATION_ADDRESS_ETH: EncodedAddress =
		EncodedAddress::Eth(hex_literal::hex!("756FBdE9c71EaE05C2f7169f816b0Bd11D978020"));

	// Test Solana accounts. Generated by
	// ```rust
	// let key = SolSigningKey.new();
	// key.print_pub_and_private_keys();
	// ```

	//const DESTINATION_ADDRESS_KEY_BYTES: [u8; 32] = [242, 33, 23, 21, 58, 254, 23, 134, 199, 91,
	// 117, 2, 20, 116, 174, 15, 191, 69, 254, 42, 135, 88, 210, 88, 225, 158, 31, 184, 181, 50, 16,
	// 195];
	const DESTINATION_ADDRESS_SOL: SolAddress =
		const_address("BdyHK5DckpAFGcbZveGLPjjMEaADGfNeqcRXKoyd33kA");

	const FROM_KEY_BYTES: [u8; 32] = [
		130, 14, 62, 77, 129, 146, 185, 187, 159, 15, 165, 161, 93, 111, 249, 198, 145, 149, 193,
		229, 147, 69, 73, 190, 10, 208, 151, 131, 194, 205, 116, 232,
	];
	const FROM: SolAddress = const_address("EwgZksaPybTUyhcEMn3aR46HZokR4NH6d1Wy8d51qZ6G");

	const EVENT_DATA_ACCOUNT_KEY_BYTES: [u8; 32] = [
		133, 220, 70, 223, 197, 127, 106, 46, 178, 73, 164, 200, 88, 128, 97, 144, 20, 132, 211,
		34, 196, 159, 28, 118, 5, 209, 12, 245, 241, 223, 8, 67,
	];
	const EVENT_DATA_ACCOUNT: SolAddress =
		const_address("9acHwMGmeoMr5o8Cw1V2U4HjMQwhced3eQP31yYEhYDU");

	//const TOKEN_SUPPORTED_ACCOUNT_KEY_BYTES: [u8; 32] = [0, 81, 206, 126, 204, 53, 163, 79, 5,
	// 119, 184, 1, 97, 237, 114, 120, 23, 6, 227, 206, 239, 132, 130, 212, 241, 12, 21, 185, 66,
	// 252, 127, 8];
	const TOKEN_SUPPORTED_ACCOUNT: SolAddress =
		const_address("48vfkGMyVDUNq689aocfYQsoqubZjjme7cja21cbnMnK");

	const BROKER_COMMISSION: BasisPoints = 1u16;
	const BOOST_FEE: u8 = 2u8;
	const INPUT_AMOUNT: SolAmount = 1_234_567_890u64;

	const BLOCKHASH: SolHash = SolHash([0x00; 32]);

	// Sisyphos broker account: 0xa622ebf634ff6cdafe1b7912d8699b34a4d9a08598af0b0c90eaf1e912de1f19
	fn broker_id() -> AccountId {
		AccountId::from(hex_literal::hex!(
			"a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e"
		))
	}

	fn channel_refund_parameters() -> ChannelRefundParameters<SolAddress> {
		ChannelRefundParameters {
			min_price: sp_core::U256::default(),
			refund_address: DESTINATION_ADDRESS_SOL,
			retry_duration: 10u32,
		}
	}

	fn affiliate_and_fees() -> BoundedVec<AffiliateAndFee, ConstU32<MAX_AFFILIATES>> {
		vec![
			AffiliateAndFee { affiliate: AffiliateShortId(1u8), fee: 10u8 },
			AffiliateAndFee { affiliate: AffiliateShortId(2u8), fee: 20u8 },
		]
		.try_into()
		.unwrap()
	}

	fn dca_parameters() -> DcaParameters {
		DcaParameters { number_of_chunks: 10u32, chunk_interval: 20u32 }
	}

	fn cf_parameter(with_ccm: bool) -> Vec<u8> {
		build_cf_parameters::<Solana>(
			channel_refund_parameters(),
			Some(dca_parameters()),
			BOOST_FEE,
			broker_id(),
			BROKER_COMMISSION,
			affiliate_and_fees(),
			with_ccm.then_some(&ccm_parameter().channel_metadata),
		)
	}

	fn into_transaction(instructions: SolInstruction, payer: SolPubkey) -> SolLegacyTransaction {
		// Build mock Transaction for testing.
		let transaction = SolLegacyTransaction::new_unsigned(SolLegacyMessage::new(
			&[instructions],
			Some(&payer),
		));

		let mock_serialized_tx = transaction
			.clone()
			.finalize_and_serialize()
			.expect("Transaction building must succeed.");

		assert!(
			mock_serialized_tx.len() < MAX_TRANSACTION_LENGTH,
			"Transaction exceeded max length"
		);

		transaction
	}

	#[test]
	fn can_build_x_swap_native_instruction_no_ccm() {
		let transaction = into_transaction(
			SolanaInstructionBuilder::x_swap_native(
				api_env(),
				agg_key().into(),
				Asset::Eth,
				DESTINATION_ADDRESS_ETH,
				FROM.into(),
				EVENT_DATA_ACCOUNT.into(),
				INPUT_AMOUNT,
				cf_parameter(false),
				None,
			),
			FROM.into(),
		);

		let expected_serialized_tx = hex_literal::hex!("021d485a1e6df1d3b4dcee7f4c1442443d61c33ba047556e5461cfa14fdccf7eb4b16b1bfad0428704b01dc85e46ac29f19a8f4e82620c6c6cc87cc1a1e5fb1908baa3bed94d223389107f6fff96ce9b85d646ab64f95394f6d4be7455f27571030edc6746ed42c9b8a16abdfd6efc4fbc7e1df5c8f9fc24e5b7ff3ccd8ca0ca0c02000307cf2a079e1506b29d02c8feac98d589a9059a740891dcd3dab6c64b3160bc28317f799121d6c125f312c5f423a51959ce1d41df06af977e9a17f48b2c82ecf89f1c1f0efc91eeb48bb80c90cf97775cd5d843a96f16500266cee2c20d053152d2f79d5e026f12edc6443a534b2cdd5072233989b415d7596573e743f3e5b386fb00000000000000000000000000000000000000000000000000000000000000001ef91c791d2aa8492c90f12540abd10056ce5dd8d9ab08461476c1dcc1622938a1e031c8bc9bec3b610cf7b36eb3bf3aa40237c9e5be2c7893878578439eb00b0000000000000000000000000000000000000000000000000000000000000000010506060300010204ab01a3265ce2f3698dc4d2029649000000000100000014000000756fbde9c71eae05c2f7169f816b0bd11d978020010000000076000000000a0000009e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0000000000000000000000000000000000000000000000000000000000000000010a0000001400000002a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e010008010a0214").to_vec();

		let from_signing_key = SolSigningKey::from_bytes(&FROM_KEY_BYTES).unwrap();
		let event_data_account_signing_key =
			SolSigningKey::from_bytes(&EVENT_DATA_ACCOUNT_KEY_BYTES).unwrap();

		test_constructed_transaction_with_signer(
			transaction,
			expected_serialized_tx,
			vec![from_signing_key, event_data_account_signing_key].into(),
			BLOCKHASH.into(),
		);
	}

	#[test]
	fn can_build_x_swap_native_instruction_with_ccm() {
		let transaction = into_transaction(
			SolanaInstructionBuilder::x_swap_native(
				api_env(),
				agg_key().into(),
				Asset::SolUsdc,
				EncodedAddress::Sol(DESTINATION_ADDRESS_SOL.0),
				FROM.into(),
				EVENT_DATA_ACCOUNT.into(),
				INPUT_AMOUNT,
				cf_parameter(true),
				Some(ccm_parameter().channel_metadata),
			),
			FROM.into(),
		);

		let expected_serialized_tx = hex_literal::hex!("026b0befc47440952c815d5c94691b3ffab988b83e02ee74731b420cf1e572d8f06774330f43a7639528aa004435e10ec49accee16bd3cb73733a502d61fb10e07d4b8cbf900562ab1f613d70be1b28142c869c3d47bfacb6742dd50fa61e6820ce4ec8f10b2a2f330fdd0a351935fecd850323123223af2acb8bbed4b7e86970102000307cf2a079e1506b29d02c8feac98d589a9059a740891dcd3dab6c64b3160bc28317f799121d6c125f312c5f423a51959ce1d41df06af977e9a17f48b2c82ecf89f1c1f0efc91eeb48bb80c90cf97775cd5d843a96f16500266cee2c20d053152d2f79d5e026f12edc6443a534b2cdd5072233989b415d7596573e743f3e5b386fb00000000000000000000000000000000000000000000000000000000000000001ef91c791d2aa8492c90f12540abd10056ce5dd8d9ab08461476c1dcc1622938a1e031c8bc9bec3b610cf7b36eb3bf3aa40237c9e5be2c7893878578439eb00b0000000000000000000000000000000000000000000000000000000000000000010506060300010204ad02a3265ce2f3698dc4d20296490000000005000000200000009e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0a00000001040000007c1d0f070000000000000000dc000000009101007417da8b99d7748127a76b03d61fee69c80dfef73ad2d5503737beedc5a9ed480104a73bdf31e341218a693b8772c43ecfcecd4cf35fada09a87ea0f860d028168e50090e0b0f5b60147b325842c1fc68f6c90fe26419ea7c4afeb982f71f1f54b5b440a0000009e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0000000000000000000000000000000000000000000000000000000000000000010a0000001400000002a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e010008010a0214").to_vec();

		let from_signing_key = SolSigningKey::from_bytes(&FROM_KEY_BYTES).unwrap();
		let event_data_account_signing_key =
			SolSigningKey::from_bytes(&EVENT_DATA_ACCOUNT_KEY_BYTES).unwrap();

		test_constructed_transaction_with_signer(
			transaction,
			expected_serialized_tx,
			vec![from_signing_key, event_data_account_signing_key].into(),
			BLOCKHASH.into(),
		);
	}

	#[test]
	fn can_build_x_swap_token_instruction_no_ccm() {
		let from_usdc_account =
			crate::sol::sol_tx_core::address_derivation::derive_associated_token_account(
				FROM,
				api_env().usdc_token_mint_pubkey,
			)
			.unwrap()
			.address
			.into();

		let transaction = into_transaction(
			SolanaInstructionBuilder::x_swap_usdc(
				api_env(),
				Asset::Eth,
				DESTINATION_ADDRESS_ETH,
				FROM.into(),
				from_usdc_account,
				EVENT_DATA_ACCOUNT.into(),
				TOKEN_SUPPORTED_ACCOUNT.into(),
				INPUT_AMOUNT,
				cf_parameter(false),
				None,
			),
			FROM.into(),
		);

		let expected_serialized_tx = hex_literal::hex!("02d546874a4fc16d7c369ea5eb86a3344c3bdeda58b0721de0c2c5a372b455d565232421d5ceabb4782dd2fb23cac7812ef1836032b65afc823094b56d01500201bcc4d183f10ae173e8f7b1fe9fcd8fc2297b4aab8ed58a5d220877dbbbeecedaab2a1d913e1ad6870245e8ed9b4ee0ea1e2f4cb948bf0143defede95c83aa8040200060bcf2a079e1506b29d02c8feac98d589a9059a740891dcd3dab6c64b3160bc28317f799121d6c125f312c5f423a51959ce1d41df06af977e9a17f48b2c82ecf89f1c1f0efc91eeb48bb80c90cf97775cd5d843a96f16500266cee2c20d053152d227fefc7ec198ef3eacb0f17871e1fad81f07a40cd55f4f364c3915877d89bd8ae91372b3d301c202a633da0a92365a736e462131aecfad1fac47322cf8863ada000000000000000000000000000000000000000000000000000000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90fb9ba52b1f09445f1e3a7508d59f0797923acf744fbe2da303fb06da859ee871ef91c791d2aa8492c90f12540abd10056ce5dd8d9ab08461476c1dcc16229382e9acf1ff8568fbe655e616a167591aeedc250afbc88d759ec959b1982e8769ca1e031c8bc9bec3b610cf7b36eb3bf3aa40237c9e5be2c7893878578439eb00b000000000000000000000000000000000000000000000000000000000000000001080a0a040003010209060705ac014532fc63e55377ebd2029649000000000100000014000000756fbde9c71eae05c2f7169f816b0bd11d978020010000000076000000000a0000009e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0000000000000000000000000000000000000000000000000000000000000000010a0000001400000002a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e010008010a021406").to_vec();

		let from_signing_key = SolSigningKey::from_bytes(&FROM_KEY_BYTES).unwrap();
		let event_data_account_signing_key =
			SolSigningKey::from_bytes(&EVENT_DATA_ACCOUNT_KEY_BYTES).unwrap();

		test_constructed_transaction_with_signer(
			transaction,
			expected_serialized_tx,
			vec![from_signing_key, event_data_account_signing_key].into(),
			BLOCKHASH.into(),
		);
	}

	#[test]
	fn can_build_x_swap_token_instruction_with_ccm() {
		let from_usdc_account =
			crate::sol::sol_tx_core::address_derivation::derive_associated_token_account(
				FROM,
				api_env().usdc_token_mint_pubkey,
			)
			.unwrap()
			.address
			.into();

		let transaction = into_transaction(
			SolanaInstructionBuilder::x_swap_usdc(
				api_env(),
				Asset::Sol,
				EncodedAddress::Sol(DESTINATION_ADDRESS_SOL.0),
				FROM.into(),
				from_usdc_account,
				EVENT_DATA_ACCOUNT.into(),
				TOKEN_SUPPORTED_ACCOUNT.into(),
				INPUT_AMOUNT,
				cf_parameter(true),
				Some(ccm_parameter().channel_metadata),
			),
			FROM.into(),
		);

		let expected_serialized_tx = hex_literal::hex!("0283f23209bc3d33c8e7fc33d4541de8fb6172f28d6d73212d1c7630491c0605a9051648fe23da7870a180649a5fd509af4dd0a5a4b4563ca2a5bf8386ecb9fe053160493fa3dd5274744ec6c42b5c6152ef58aff96c2c1230fefc06a6a89fde864db41185571b1d2740d7639ff64a53b35db561d0ee75a68fa9f8268f5807fd060200060bcf2a079e1506b29d02c8feac98d589a9059a740891dcd3dab6c64b3160bc28317f799121d6c125f312c5f423a51959ce1d41df06af977e9a17f48b2c82ecf89f1c1f0efc91eeb48bb80c90cf97775cd5d843a96f16500266cee2c20d053152d227fefc7ec198ef3eacb0f17871e1fad81f07a40cd55f4f364c3915877d89bd8ae91372b3d301c202a633da0a92365a736e462131aecfad1fac47322cf8863ada000000000000000000000000000000000000000000000000000000000000000006ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a90fb9ba52b1f09445f1e3a7508d59f0797923acf744fbe2da303fb06da859ee871ef91c791d2aa8492c90f12540abd10056ce5dd8d9ab08461476c1dcc16229382e9acf1ff8568fbe655e616a167591aeedc250afbc88d759ec959b1982e8769ca1e031c8bc9bec3b610cf7b36eb3bf3aa40237c9e5be2c7893878578439eb00b000000000000000000000000000000000000000000000000000000000000000001080a0a040003010209060705ae024532fc63e55377ebd20296490000000005000000200000009e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0900000001040000007c1d0f070000000000000000dc000000009101007417da8b99d7748127a76b03d61fee69c80dfef73ad2d5503737beedc5a9ed480104a73bdf31e341218a693b8772c43ecfcecd4cf35fada09a87ea0f860d028168e50090e0b0f5b60147b325842c1fc68f6c90fe26419ea7c4afeb982f71f1f54b5b440a0000009e0d6a70e12d54edf90971cc977fa26a1d3bb4b0b26e72470171c36b0006b01f0000000000000000000000000000000000000000000000000000000000000000010a0000001400000002a0edda1a4beee4fe2df32c0802aa6759da49ae6165fcdb5c40d7f4cd5a30db0e010008010a021406").to_vec();

		let from_signing_key = SolSigningKey::from_bytes(&FROM_KEY_BYTES).unwrap();
		let event_data_account_signing_key =
			SolSigningKey::from_bytes(&EVENT_DATA_ACCOUNT_KEY_BYTES).unwrap();

		test_constructed_transaction_with_signer(
			transaction,
			expected_serialized_tx,
			vec![from_signing_key, event_data_account_signing_key].into(),
			BLOCKHASH.into(),
		);
	}
}
