use cf_primitives::chains::Solana;
use codec::{Decode, Encode, MaxEncodedLen};
use scale_info::TypeInfo;
use serde::{Deserialize, Serialize};

use crate::{Chain, FeeEstimationApi};

// // Taken from the [example](https://solana.com/docs/rpc/http/getfeeformessage).
// // Should probably be replaced with an actual program invocation.
// pub const DEFAULT_MESSAGE_FOR_FEE_ESTIMATION: &[u8] = &[
// 	0x01, 0x00, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// 	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
// ];
// pub const EGRESS_EXAMPLE_MESSAGE: &[u8] = DEFAULT_MESSAGE_FOR_FEE_ESTIMATION;
// pub const INGRESS_EXAMPLE_MESSAGE: &[u8] = DEFAULT_MESSAGE_FOR_FEE_ESTIMATION;

pub const DEFAULT_TRANSACTION_FEE: <Solana as Chain>::ChainAmount = 5000 /* lamports */;

#[derive(
	Default,
	Clone,
	Encode,
	Decode,
	MaxEncodedLen,
	TypeInfo,
	Debug,
	PartialEq,
	Eq,
	Serialize,
	Deserialize,
)]
pub struct SolTrackedData {
	pub ingress_fee: Option<<Solana as Chain>::ChainAmount>,
	pub egress_fee: Option<<Solana as Chain>::ChainAmount>,
}

impl FeeEstimationApi<Solana> for SolTrackedData {
	fn estimate_egress_fee(
		&self,
		_asset: <Solana as crate::Chain>::ChainAsset,
	) -> <Solana as crate::Chain>::ChainAmount {
		self.ingress_fee.unwrap_or(DEFAULT_TRANSACTION_FEE)
	}
	fn estimate_ingress_fee(
		&self,
		_asset: <Solana as crate::Chain>::ChainAsset,
	) -> <Solana as crate::Chain>::ChainAmount {
		self.egress_fee.unwrap_or(DEFAULT_TRANSACTION_FEE)
	}
}
