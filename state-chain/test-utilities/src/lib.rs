use frame_system::Config;

mod rich_test_externalities;

pub use rich_test_externalities::*;

pub fn last_event<T: Config>() -> <T as Config>::RuntimeEvent {
	maybe_last_event::<T>().expect("Event expected")
}

pub fn maybe_last_event<T: Config>() -> Option<<T as Config>::RuntimeEvent> {
	frame_system::Pallet::<T>::events().pop().map(|e| e.event)
}

#[track_caller]
pub fn assert_has_event<T: frame_system::Config>(event: <T as frame_system::Config>::RuntimeEvent) {
	let events = frame_system::Pallet::<T>::events()
		.into_iter()
		.map(|e| e.event)
		.collect::<Vec<_>>();
	assert!(events.iter().any(|e| e == &event), "Event {event:#?} not found in {events:#?}",);
}

#[macro_export]
macro_rules! assert_has_matching_event {
	( $runtime:ty, $event:pat $(if $guard:expr )? $(,)? ) => {
		let events = frame_system::Pallet::<$runtime>::events()
			.into_iter()
			.map(|e| e.event)
			.collect::<Vec<_>>();
		assert!(
			events.iter().any(|e| matches!(e, $event $(if $guard)?)),
			"No event matching {:#?} found in {:#?}",
			stringify!($event $(if $guard)?),
			events,
		);
	};
}

/// Checks the deposited events in the order they occur
#[macro_export]
macro_rules! assert_event_sequence {
	($runtime:ty, $( $evt:pat $(if $guard:expr )? ),* $(,)?) => {
		let mut events = frame_system::Pallet::<$runtime>::events()
		.into_iter()
		// We want to be able to input the events into this macro in the order they occurred.
		.rev()
		.map(|e| e.event)
			.collect::<Vec<_>>();

		$(
			let actual = events.pop().unwrap_or_else(|| panic!("No more events. Expected: {:?}", stringify!($evt)));
			assert!(matches!(actual, $evt $(if $guard)?), "Expected: {:#?}. Actual: {:#?}", stringify!($evt $(if $guard)?), actual);
		)*
	};
}

#[macro_export]
macro_rules! assert_events_match {
	($runtime:ty, $($pattern:pat $(if $guard:expr )? => $bind:expr),+ ) => {{
		let mut events = frame_system::Pallet::<$runtime>::events();

		(
			$({
				let (index, bind) = events
					.iter()
					.enumerate()
					.find_map(|(index, record)| match record.event.clone() {
						$pattern $(if $guard)? => Some((index, $bind)),
						_ => None
					})
					.unwrap_or_else(|| panic!("No event that matches {}. Available events: {:#?}", stringify!($pattern), events));
				events.remove(index);
				bind
			}),+
		)
	}};
}

#[macro_export]
macro_rules! assert_events_eq {
	($runtime:ty, $($event:expr),+ ) => {{
		let mut events = frame_system::Pallet::<$runtime>::events();

		$({
			let event = $event;
			let index = events
				.iter()
				.enumerate()
				.find_map(|(index, record)| (record.event == event).then_some(index))
				.unwrap_or_else(|| panic!("No event equal to {:?}. Available events: {:#?}", event, events));
			events.remove(index);
		});+
	}};
}

/// Implements [TestRunner] and associated traits for enriched testing features.
///
/// `TestRunner` is a wrapper around [rich_test_externalities::TestExternalities], which provides
/// additional runtime testing features. It can be used as a drop-in replacement for the usual
/// [sp_io::TestExternalities].
///
/// It provides a `new_test_ext` function that optionally uses a custom genesis and initialization
/// function.
///
/// Use this macro in conjuction with `construct_runtime!(..)`. In addition to the runtime type
/// itself, the `RuntimeGenesisConfig` and `AllPalletsWithSystem` type that are generated by
/// construct_runtime must also be in scope.
///
/// The macro takes up to three arguments:
///
/// - \[**REQUIRED**\] The runtime type, for example `Test`.
/// - \[**OPTIONAL**\] The genesis config. Defaults to `RuntimeGenesisConfig::default()`.
/// - \[**OPTIONAL**\] An initialization function that is executed after the genesis config is
///   applied.
///
/// # Example
///
/// ```ignore
/// construct_runtime!(pub enum Test { my_pallet });
///
/// impl_test_helpers! {
///     Test,
///     RuntimeGenesisConfig { MyPalletGenesisConfig { foo: 42 } },
///     || {
///         my_pallet::MyStorageValue::<Test>::insert("bar");
///     }
/// }
/// ```
#[macro_export]
macro_rules! impl_test_helpers {
	( $runtime:ty, $genesis:expr, $init:expr $(,)? ) => {
		/// Test runner wrapping [sp_io::TestExternalities] in a richer api.
		pub type TestRunner<Ctx> = $crate::TestExternalities<$runtime, Ctx>;

		impl $crate::HasAllPallets for $runtime {
			type AllPalletsWithSystem = AllPalletsWithSystem;
		}

		/// Create new test externalities with the default genesis config.
		pub fn new_test_ext() -> TestRunner<()> {
			TestRunner::<()>::new($genesis).execute_with($init)
		}
	};
	( $runtime:ty, $genesis:expr ) => {
		$crate::impl_test_helpers!($runtime, $genesis, || {});
	};
	( $runtime:ty ) => {
		$crate::impl_test_helpers!($runtime, RuntimeGenesisConfig::default());
	};
}
