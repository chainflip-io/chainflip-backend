
//! Autogenerated weights for pallet_cf_validator
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-28, STEPS: `2`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `wagmi.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/debug/chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_validator
// --extrinsic
// *
// --output
// state-chain/pallets/cf-validator/src/weights.rs
// --steps=2
// --repeat=2
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_validator.
pub trait WeightInfo {
	fn update_pallet_config() -> Weight;
	fn cfe_version() -> Weight;
	fn register_peer_id() -> Weight;
	fn expire_epoch(a: u32, ) -> Weight;
	fn missed_authorship_slots(m: u32, ) -> Weight;
	fn rotation_phase_idle() -> Weight;
	fn start_authority_rotation(a: u32, ) -> Weight;
	fn start_authority_rotation_while_disabled_by_safe_mode() -> Weight;
	fn rotation_phase_keygen(a: u32, ) -> Weight;
	fn rotation_phase_activating_keys(a: u32, ) -> Weight;
	fn register_as_validator() -> Weight;
	fn deregister_as_validator() -> Weight;
	fn start_bidding() -> Weight;
	fn stop_bidding() -> Weight;
}

/// Weights for pallet_cf_validator using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:0 w:1)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_pallet_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `433`
		//  Estimated: `1918`
		// Minimum execution time: 99_000_000 picoseconds.
		Weight::from_parts(113_000_000, 1918)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Validator::NodeCFEVersion` (r:1 w:1)
	/// Proof: `Validator::NodeCFEVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cfe_version() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `816`
		//  Estimated: `4281`
		// Minimum execution time: 170_000_000 picoseconds.
		Weight::from_parts(170_000_000, 4281)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Validator::AccountPeerMapping` (r:1 w:1)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MappedPeers` (r:1 w:1)
	/// Proof: `Validator::MappedPeers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn register_peer_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `868`
		//  Estimated: `4333`
		// Minimum execution time: 328_000_000 picoseconds.
		Weight::from_parts(365_000_000, 4333)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalActiveEpochs` (r:150 w:150)
	/// Proof: `Validator::HistoricalActiveEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalBonds` (r:1 w:0)
	/// Proof: `Validator::HistoricalBonds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:150 w:150)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Witnesser::EpochsToCull` (r:1 w:1)
	/// Proof: `Witnesser::EpochsToCull` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::LastExpiredEpoch` (r:0 w:1)
	/// Proof: `Validator::LastExpiredEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn expire_epoch(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1296 + a * (89 ±0)`
		//  Estimated: `4761 + a * (2565 ±0)`
		// Minimum execution time: 571_000_000 picoseconds.
		Weight::from_parts(186_214_285, 4761)
			// Standard Error: 799_348
			.saturating_add(Weight::from_parts(128_595_238, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2565).saturating_mul(a.into()))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:1)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:3 w:3)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:1 w:1)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 10]`.
	fn missed_authorship_slots(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1059`
		//  Estimated: `4524 + m * (550 ±0)`
		// Minimum execution time: 279_000_000 picoseconds.
		Weight::from_parts(166_222_222, 4524)
			// Standard Error: 248_451
			.saturating_add(Weight::from_parts(114_777_777, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 550).saturating_mul(m.into()))
	}
	/// Storage: `Validator::EpochExpiries` (r:1 w:0)
	/// Proof: `Validator::EpochExpiries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::BlocksPerEpoch` (r:1 w:0)
	/// Proof: `Validator::BlocksPerEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn rotation_phase_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `4225`
		// Minimum execution time: 168_000_000 picoseconds.
		Weight::from_parts(176_000_000, 4225)
			.saturating_add(T::DbWeight::get().reads(7_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:1 w:0)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::ActiveBidder` (r:404 w:0)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:403 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Reputation::LastHeartbeat` (r:403 w:0)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:2 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:403 w:0)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:400 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:400 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Validator::NodeCFEVersion` (r:400 w:0)
	/// Proof: `Validator::NodeCFEVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MinimumReportedCfeVersion` (r:1 w:0)
	/// Proof: `Validator::MinimumReportedCfeVersion` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionBidCutoffPercentage` (r:1 w:0)
	/// Proof: `Validator::AuctionBidCutoffPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MaxAuthoritySetContractionPercentage` (r:1 w:0)
	/// Proof: `Validator::MaxAuthoritySetContractionPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `PolkadotThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `BitcoinThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 400]`.
	fn start_authority_rotation(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3412 + a * (510 ±0)`
		//  Estimated: `14303 + a * (2986 ±0)`
		// Minimum execution time: 2_425_000_000 picoseconds.
		Weight::from_parts(1_368_279_596, 14303)
			// Standard Error: 30_068_611
			.saturating_add(Weight::from_parts(377_406_801, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(30_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(11_u64))
			.saturating_add(Weight::from_parts(0, 2986).saturating_mul(a.into()))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn start_authority_rotation_while_disabled_by_safe_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `459`
		//  Estimated: `1944`
		// Minimum execution time: 59_000_000 picoseconds.
		Weight::from_parts(93_000_000, 1944)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Validator::EpochExpiries` (r:1 w:0)
	/// Proof: `Validator::EpochExpiries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `PolkadotThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `BitcoinThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn rotation_phase_keygen(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3673 + a * (32 ±0)`
		//  Estimated: `7139 + a * (32 ±0)`
		// Minimum execution time: 614_000_000 picoseconds.
		Weight::from_parts(665_173_469, 7139)
			// Standard Error: 382_785
			.saturating_add(Weight::from_parts(1_608_843, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
	}
	/// Storage: `Validator::EpochExpiries` (r:1 w:0)
	/// Proof: `Validator::EpochExpiries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn rotation_phase_activating_keys(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3219 + a * (32 ±0)`
		//  Estimated: `6685 + a * (32 ±0)`
		// Minimum execution time: 312_000_000 picoseconds.
		Weight::from_parts(311_081_632, 6685)
			// Standard Error: 62_069
			.saturating_add(Weight::from_parts(806_122, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
	}
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:1 w:0)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	fn register_as_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `927`
		//  Estimated: `3498`
		// Minimum execution time: 245_000_000 picoseconds.
		Weight::from_parts(272_000_000, 3498)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ActiveBidder` (r:1 w:0)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::LastExpiredEpoch` (r:1 w:0)
	/// Proof: `Validator::LastExpiredEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:2 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:1 w:0)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_as_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1642`
		//  Estimated: `7582`
		// Minimum execution time: 532_000_000 picoseconds.
		Weight::from_parts(572_000_000, 7582)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn start_bidding() -> Weight {
		Weight::from_parts(1_000_000, 0)
	}
	fn stop_bidding() -> Weight {
		Weight::from_parts(1_000_000, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:0 w:1)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_pallet_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `433`
		//  Estimated: `1918`
		// Minimum execution time: 99_000_000 picoseconds.
		Weight::from_parts(113_000_000, 1918)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Validator::NodeCFEVersion` (r:1 w:1)
	/// Proof: `Validator::NodeCFEVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cfe_version() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `816`
		//  Estimated: `4281`
		// Minimum execution time: 170_000_000 picoseconds.
		Weight::from_parts(170_000_000, 4281)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Validator::AccountPeerMapping` (r:1 w:1)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MappedPeers` (r:1 w:1)
	/// Proof: `Validator::MappedPeers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn register_peer_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `868`
		//  Estimated: `4333`
		// Minimum execution time: 328_000_000 picoseconds.
		Weight::from_parts(365_000_000, 4333)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalActiveEpochs` (r:150 w:150)
	/// Proof: `Validator::HistoricalActiveEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalBonds` (r:1 w:0)
	/// Proof: `Validator::HistoricalBonds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:150 w:150)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Witnesser::EpochsToCull` (r:1 w:1)
	/// Proof: `Witnesser::EpochsToCull` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::LastExpiredEpoch` (r:0 w:1)
	/// Proof: `Validator::LastExpiredEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn expire_epoch(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1296 + a * (89 ±0)`
		//  Estimated: `4761 + a * (2565 ±0)`
		// Minimum execution time: 571_000_000 picoseconds.
		Weight::from_parts(186_214_285, 4761)
			// Standard Error: 799_348
			.saturating_add(Weight::from_parts(128_595_238, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2565).saturating_mul(a.into()))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:1)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:3 w:3)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:1 w:1)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 10]`.
	fn missed_authorship_slots(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1059`
		//  Estimated: `4524 + m * (550 ±0)`
		// Minimum execution time: 279_000_000 picoseconds.
		Weight::from_parts(166_222_222, 4524)
			// Standard Error: 248_451
			.saturating_add(Weight::from_parts(114_777_777, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 550).saturating_mul(m.into()))
	}
	/// Storage: `Validator::EpochExpiries` (r:1 w:0)
	/// Proof: `Validator::EpochExpiries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::BlocksPerEpoch` (r:1 w:0)
	/// Proof: `Validator::BlocksPerEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn rotation_phase_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `4225`
		// Minimum execution time: 168_000_000 picoseconds.
		Weight::from_parts(176_000_000, 4225)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:1 w:0)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::ActiveBidder` (r:404 w:0)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:403 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Reputation::LastHeartbeat` (r:403 w:0)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:2 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:403 w:0)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:400 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:400 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Validator::NodeCFEVersion` (r:400 w:0)
	/// Proof: `Validator::NodeCFEVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MinimumReportedCfeVersion` (r:1 w:0)
	/// Proof: `Validator::MinimumReportedCfeVersion` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionBidCutoffPercentage` (r:1 w:0)
	/// Proof: `Validator::AuctionBidCutoffPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MaxAuthoritySetContractionPercentage` (r:1 w:0)
	/// Proof: `Validator::MaxAuthoritySetContractionPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `PolkadotThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `BitcoinThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 400]`.
	fn start_authority_rotation(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3412 + a * (510 ±0)`
		//  Estimated: `14303 + a * (2986 ±0)`
		// Minimum execution time: 2_425_000_000 picoseconds.
		Weight::from_parts(1_368_279_596, 14303)
			// Standard Error: 30_068_611
			.saturating_add(Weight::from_parts(377_406_801, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(30_u64))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(a.into())))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
			.saturating_add(Weight::from_parts(0, 2986).saturating_mul(a.into()))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn start_authority_rotation_while_disabled_by_safe_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `459`
		//  Estimated: `1944`
		// Minimum execution time: 59_000_000 picoseconds.
		Weight::from_parts(93_000_000, 1944)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Validator::EpochExpiries` (r:1 w:0)
	/// Proof: `Validator::EpochExpiries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `PolkadotThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `BitcoinThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn rotation_phase_keygen(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3673 + a * (32 ±0)`
		//  Estimated: `7139 + a * (32 ±0)`
		// Minimum execution time: 614_000_000 picoseconds.
		Weight::from_parts(665_173_469, 7139)
			// Standard Error: 382_785
			.saturating_add(Weight::from_parts(1_608_843, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
	}
	/// Storage: `Validator::EpochExpiries` (r:1 w:0)
	/// Proof: `Validator::EpochExpiries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn rotation_phase_activating_keys(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3219 + a * (32 ±0)`
		//  Estimated: `6685 + a * (32 ±0)`
		// Minimum execution time: 312_000_000 picoseconds.
		Weight::from_parts(311_081_632, 6685)
			// Standard Error: 62_069
			.saturating_add(Weight::from_parts(806_122, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
	}
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:1 w:0)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	fn register_as_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `927`
		//  Estimated: `3498`
		// Minimum execution time: 245_000_000 picoseconds.
		Weight::from_parts(272_000_000, 3498)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ActiveBidder` (r:1 w:0)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::LastExpiredEpoch` (r:1 w:0)
	/// Proof: `Validator::LastExpiredEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:2 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:1 w:0)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_as_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1642`
		//  Estimated: `7582`
		// Minimum execution time: 532_000_000 picoseconds.
		Weight::from_parts(572_000_000, 7582)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn start_bidding() -> Weight {
		Weight::from_parts(1_000_000, 0)
	}
	fn stop_bidding() -> Weight {
		Weight::from_parts(1_000_000, 0)
	}
}
