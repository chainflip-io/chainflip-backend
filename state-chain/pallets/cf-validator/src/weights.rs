
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_validator
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-09-11, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `chainflip-benchmark-runner`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_validator
// --extrinsic
// *
// --output
// state-chain/pallets/cf-validator/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_validator.
pub trait WeightInfo {
	fn update_pallet_config() -> Weight;
	fn cfe_version() -> Weight;
	fn register_peer_id() -> Weight;
	fn expire_epoch(a: u32, ) -> Weight;
	fn missed_authorship_slots(m: u32, ) -> Weight;
	fn rotation_phase_idle() -> Weight;
	fn start_authority_rotation(a: u32, ) -> Weight;
	fn start_authority_rotation_while_disabled_by_safe_mode() -> Weight;
	fn rotation_phase_keygen(a: u32, ) -> Weight;
	fn rotation_phase_activating_keys(a: u32, ) -> Weight;
	fn register_as_validator() -> Weight;
	fn deregister_as_validator() -> Weight;
	fn stop_bidding() -> Weight;
	fn start_bidding() -> Weight;
	fn claim_validator() -> Weight;
	fn accept_operator() -> Weight;
	fn remove_validator() -> Weight;
	fn update_operator_settings() -> Weight;
	fn block_delegator() -> Weight;
	fn allow_delegator() -> Weight;
	fn register_as_operator() -> Weight;
	fn deregister_as_operator() -> Weight;
	fn delegate() -> Weight;
	fn undelegate() -> Weight;
}

/// Weights for pallet_cf_validator using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:0 w:1)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_pallet_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `370`
		//  Estimated: `1855`
		// Minimum execution time: 12_557_000 picoseconds.
		Weight::from_parts(13_511_000, 1855)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::NodeCFEVersion` (r:1 w:1)
	/// Proof: `Validator::NodeCFEVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cfe_version() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 19_563_000 picoseconds.
		Weight::from_parts(19_900_000, 4259)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:1 w:1)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MappedPeers` (r:1 w:1)
	/// Proof: `Validator::MappedPeers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn register_peer_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `860`
		//  Estimated: `4325`
		// Minimum execution time: 94_268_000 picoseconds.
		Weight::from_parts(96_987_000, 4325)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:1)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalActiveEpochs` (r:150 w:150)
	/// Proof: `Validator::HistoricalActiveEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalBonds` (r:1 w:1)
	/// Proof: `Validator::HistoricalBonds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:150 w:150)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Witnesser::EpochsToCull` (r:1 w:1)
	/// Proof: `Witnesser::EpochsToCull` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumVault::VaultStartBlockNumbers` (r:2 w:1)
	/// Proof: `EthereumVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotVault::VaultStartBlockNumbers` (r:1 w:0)
	/// Proof: `PolkadotVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinVault::VaultStartBlockNumbers` (r:1 w:0)
	/// Proof: `BitcoinVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ArbitrumVault::VaultStartBlockNumbers` (r:1 w:0)
	/// Proof: `ArbitrumVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaVault::VaultStartBlockNumbers` (r:1 w:0)
	/// Proof: `SolanaVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:0 w:150)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn expire_epoch(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2283 + a * (87 ±0)`
		//  Estimated: `8107 + a * (2564 ±0)`
		// Minimum execution time: 107_508_000 picoseconds.
		Weight::from_parts(74_503_791, 8107)
			// Standard Error: 28_987
			.saturating_add(Weight::from_parts(14_768_253, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2564).saturating_mul(a.into()))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:1)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:3 w:3)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:1 w:1)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 10]`.
	fn missed_authorship_slots(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1252`
		//  Estimated: `6272 + m * (470 ±43)`
		// Minimum execution time: 32_890_000 picoseconds.
		Weight::from_parts(36_177_900, 6272)
			// Standard Error: 563_498
			.saturating_add(Weight::from_parts(8_459_818, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 470).saturating_mul(m.into()))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::EpochDuration` (r:1 w:0)
	/// Proof: `Validator::EpochDuration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn rotation_phase_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `635`
		//  Estimated: `4100`
		// Minimum execution time: 15_043_000 picoseconds.
		Weight::from_parts(15_646_000, 4100)
			.saturating_add(T::DbWeight::get().reads(6_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ActiveBidder` (r:1 w:0)
	/// Proof: `Validator::ActiveBidder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:403 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Reputation::LastHeartbeat` (r:403 w:0)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:2 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:403 w:0)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:400 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:400 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MinimumReportedCfeVersion` (r:1 w:0)
	/// Proof: `Validator::MinimumReportedCfeVersion` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::NodeCFEVersion` (r:400 w:0)
	/// Proof: `Validator::NodeCFEVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:401 w:0)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MinimumValidatorStake` (r:1 w:0)
	/// Proof: `Validator::MinimumValidatorStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorChoice` (r:400 w:0)
	/// Proof: `Validator::OperatorChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::DelegationChoice` (r:1 w:0)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MinimumAuctionBid` (r:1 w:0)
	/// Proof: `Validator::MinimumAuctionBid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:1 w:0)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MaxAuthoritySetContractionPercentage` (r:1 w:0)
	/// Proof: `Validator::MaxAuthoritySetContractionPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `SolanaThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `PolkadotThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `BitcoinThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 400]`.
	fn start_authority_rotation(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4086 + a * (549 ±0)`
		//  Estimated: `12485 + a * (3025 ±0)`
		// Minimum execution time: 299_976_000 picoseconds.
		Weight::from_parts(87_607_474, 12485)
			// Standard Error: 58_779
			.saturating_add(Weight::from_parts(32_776_407, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(32_u64))
			.saturating_add(T::DbWeight::get().reads((8_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(14_u64))
			.saturating_add(Weight::from_parts(0, 3025).saturating_mul(a.into()))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn start_authority_rotation_while_disabled_by_safe_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594`
		//  Estimated: `2079`
		// Minimum execution time: 7_856_000 picoseconds.
		Weight::from_parts(8_382_000, 2079)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `PolkadotThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `BitcoinThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn rotation_phase_keygen(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2475 + a * (32 ±0)`
		//  Estimated: `5940 + a * (32 ±0)`
		// Minimum execution time: 132_654_000 picoseconds.
		Weight::from_parts(137_315_642, 5940)
			// Standard Error: 7_081
			.saturating_add(Weight::from_parts(333_871, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn rotation_phase_activating_keys(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1902 + a * (32 ±0)`
		//  Estimated: `5367 + a * (32 ±0)`
		// Minimum execution time: 64_414_000 picoseconds.
		Weight::from_parts(69_526_942, 5367)
			// Standard Error: 4_429
			.saturating_add(Weight::from_parts(100_320, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
	}
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:1 w:0)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_as_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `931`
		//  Estimated: `4396`
		// Minimum execution time: 29_229_000 picoseconds.
		Weight::from_parts(29_618_000, 4396)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ActiveBidder` (r:1 w:0)
	/// Proof: `Validator::ActiveBidder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalActiveEpochs` (r:1 w:0)
	/// Proof: `Validator::HistoricalActiveEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:1 w:0)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:0)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ClaimedValidators` (r:0 w:1)
	/// Proof: `Validator::ClaimedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ManagedValidators` (r:0 w:1)
	/// Proof: `Validator::ManagedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_as_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2199`
		//  Estimated: `5664`
		// Minimum execution time: 64_925_000 picoseconds.
		Weight::from_parts(68_630_000, 5664)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::RedemptionPeriodAsPercentage` (r:1 w:0)
	/// Proof: `Validator::RedemptionPeriodAsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::EpochDuration` (r:1 w:0)
	/// Proof: `Validator::EpochDuration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ActiveBidder` (r:1 w:1)
	/// Proof: `Validator::ActiveBidder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn stop_bidding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1473`
		//  Estimated: `4938`
		// Minimum execution time: 32_689_000 picoseconds.
		Weight::from_parts(33_696_000, 4938)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ActiveBidder` (r:1 w:1)
	/// Proof: `Validator::ActiveBidder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn start_bidding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1398`
		//  Estimated: `4863`
		// Minimum execution time: 24_342_000 picoseconds.
		Weight::from_parts(24_731_000, 4863)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:2 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorChoice` (r:1 w:0)
	/// Proof: `Validator::OperatorChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ManagedValidators` (r:1 w:0)
	/// Proof: `Validator::ManagedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ClaimedValidators` (r:1 w:1)
	/// Proof: `Validator::ClaimedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `832`
		//  Estimated: `6772`
		// Minimum execution time: 25_865_000 picoseconds.
		Weight::from_parts(26_585_000, 6772)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorChoice` (r:1 w:1)
	/// Proof: `Validator::OperatorChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ClaimedValidators` (r:1 w:1)
	/// Proof: `Validator::ClaimedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ManagedValidators` (r:1 w:1)
	/// Proof: `Validator::ManagedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn accept_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `882`
		//  Estimated: `4347`
		// Minimum execution time: 27_867_000 picoseconds.
		Weight::from_parts(28_633_000, 4347)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Validator::OperatorChoice` (r:1 w:1)
	/// Proof: `Validator::OperatorChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `343`
		//  Estimated: `3808`
		// Minimum execution time: 14_007_000 picoseconds.
		Weight::from_parts(14_191_000, 3808)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:1)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_operator_settings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 19_967_000 picoseconds.
		Weight::from_parts(20_420_000, 4259)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::DelegationChoice` (r:1 w:0)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:0)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Exceptions` (r:1 w:1)
	/// Proof: `Validator::Exceptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn block_delegator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `998`
		//  Estimated: `4463`
		// Minimum execution time: 24_011_000 picoseconds.
		Weight::from_parts(25_112_000, 4463)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:0)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Exceptions` (r:1 w:1)
	/// Proof: `Validator::Exceptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn allow_delegator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 23_015_000 picoseconds.
		Weight::from_parts(23_348_000, 4259)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:1)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_as_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 32_852_000 picoseconds.
		Weight::from_parts(33_543_000, 4259)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::LastExpiredEpoch` (r:1 w:0)
	/// Proof: `Validator::LastExpiredEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::DelegationSnapshots` (r:1 w:0)
	/// Proof: `Validator::DelegationSnapshots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ManagedValidators` (r:1 w:1)
	/// Proof: `Validator::ManagedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::DelegationChoice` (r:1 w:0)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:0)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:0 w:1)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Exceptions` (r:0 w:1)
	/// Proof: `Validator::Exceptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_as_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1716`
		//  Estimated: `5181`
		// Minimum execution time: 55_491_000 picoseconds.
		Weight::from_parts(56_624_000, 5181)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:2 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:0)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Exceptions` (r:1 w:0)
	/// Proof: `Validator::Exceptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Validator::DelegationChoice` (r:1 w:1)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1657`
		//  Estimated: `7597`
		// Minimum execution time: 39_060_000 picoseconds.
		Weight::from_parts(40_383_000, 7597)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::DelegationChoice` (r:1 w:1)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn undelegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `479`
		//  Estimated: `3944`
		// Minimum execution time: 17_177_000 picoseconds.
		Weight::from_parts(17_587_000, 3944)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:0 w:1)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_pallet_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `370`
		//  Estimated: `1855`
		// Minimum execution time: 12_557_000 picoseconds.
		Weight::from_parts(13_511_000, 1855)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::NodeCFEVersion` (r:1 w:1)
	/// Proof: `Validator::NodeCFEVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cfe_version() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 19_563_000 picoseconds.
		Weight::from_parts(19_900_000, 4259)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:1 w:1)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MappedPeers` (r:1 w:1)
	/// Proof: `Validator::MappedPeers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn register_peer_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `860`
		//  Estimated: `4325`
		// Minimum execution time: 94_268_000 picoseconds.
		Weight::from_parts(96_987_000, 4325)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:1)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalActiveEpochs` (r:150 w:150)
	/// Proof: `Validator::HistoricalActiveEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalBonds` (r:1 w:1)
	/// Proof: `Validator::HistoricalBonds` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:150 w:150)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Witnesser::EpochsToCull` (r:1 w:1)
	/// Proof: `Witnesser::EpochsToCull` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumVault::VaultStartBlockNumbers` (r:2 w:1)
	/// Proof: `EthereumVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotVault::VaultStartBlockNumbers` (r:1 w:0)
	/// Proof: `PolkadotVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinVault::VaultStartBlockNumbers` (r:1 w:0)
	/// Proof: `BitcoinVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ArbitrumVault::VaultStartBlockNumbers` (r:1 w:0)
	/// Proof: `ArbitrumVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaVault::VaultStartBlockNumbers` (r:1 w:0)
	/// Proof: `SolanaVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:0 w:150)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn expire_epoch(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2283 + a * (87 ±0)`
		//  Estimated: `8107 + a * (2564 ±0)`
		// Minimum execution time: 107_508_000 picoseconds.
		Weight::from_parts(74_503_791, 8107)
			// Standard Error: 28_987
			.saturating_add(Weight::from_parts(14_768_253, 0).saturating_mul(a.into()))
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
			.saturating_add(ParityDbWeight::get().writes((3_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2564).saturating_mul(a.into()))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:1)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:3 w:3)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:1 w:1)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[1, 10]`.
	fn missed_authorship_slots(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1252`
		//  Estimated: `6272 + m * (470 ±43)`
		// Minimum execution time: 32_890_000 picoseconds.
		Weight::from_parts(36_177_900, 6272)
			// Standard Error: 563_498
			.saturating_add(Weight::from_parts(8_459_818, 0).saturating_mul(m.into()))
			.saturating_add(ParityDbWeight::get().reads(8_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 470).saturating_mul(m.into()))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::EpochDuration` (r:1 w:0)
	/// Proof: `Validator::EpochDuration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn rotation_phase_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `635`
		//  Estimated: `4100`
		// Minimum execution time: 15_043_000 picoseconds.
		Weight::from_parts(15_646_000, 4100)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ActiveBidder` (r:1 w:0)
	/// Proof: `Validator::ActiveBidder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:403 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Reputation::LastHeartbeat` (r:403 w:0)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:2 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:403 w:0)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:400 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:400 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MinimumReportedCfeVersion` (r:1 w:0)
	/// Proof: `Validator::MinimumReportedCfeVersion` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::NodeCFEVersion` (r:400 w:0)
	/// Proof: `Validator::NodeCFEVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:401 w:0)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MinimumValidatorStake` (r:1 w:0)
	/// Proof: `Validator::MinimumValidatorStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorChoice` (r:400 w:0)
	/// Proof: `Validator::OperatorChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::DelegationChoice` (r:1 w:0)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MinimumAuctionBid` (r:1 w:0)
	/// Proof: `Validator::MinimumAuctionBid` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:1 w:0)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::MaxAuthoritySetContractionPercentage` (r:1 w:0)
	/// Proof: `Validator::MaxAuthoritySetContractionPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `SolanaThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `PolkadotThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::KeygenResolutionPendingSince` (r:0 w:1)
	/// Proof: `BitcoinThresholdSigner::KeygenResolutionPendingSince` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 400]`.
	fn start_authority_rotation(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4086 + a * (549 ±0)`
		//  Estimated: `12485 + a * (3025 ±0)`
		// Minimum execution time: 299_976_000 picoseconds.
		Weight::from_parts(87_607_474, 12485)
			// Standard Error: 58_779
			.saturating_add(Weight::from_parts(32_776_407, 0).saturating_mul(a.into()))
			.saturating_add(ParityDbWeight::get().reads(32_u64))
			.saturating_add(ParityDbWeight::get().reads((8_u64).saturating_mul(a.into())))
			.saturating_add(ParityDbWeight::get().writes(14_u64))
			.saturating_add(Weight::from_parts(0, 3025).saturating_mul(a.into()))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn start_authority_rotation_while_disabled_by_safe_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `594`
		//  Estimated: `2079`
		// Minimum execution time: 7_856_000 picoseconds.
		Weight::from_parts(8_382_000, 2079)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::PendingKeyRotation` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `PolkadotThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `BitcoinThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn rotation_phase_keygen(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2475 + a * (32 ±0)`
		//  Estimated: `5940 + a * (32 ±0)`
		// Minimum execution time: 132_654_000 picoseconds.
		Weight::from_parts(137_315_642, 5940)
			// Standard Error: 7_081
			.saturating_add(Weight::from_parts(333_871, 0).saturating_mul(a.into()))
			.saturating_add(ParityDbWeight::get().reads(16_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
	}
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0xac56b214382d772914db46f9c4a772eda7d533d63f25202626db56d673717380` (r:1 w:0)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:1)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `PolkadotThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `BitcoinThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::PendingKeyRotation` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::PendingKeyRotation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[3, 150]`.
	fn rotation_phase_activating_keys(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1902 + a * (32 ±0)`
		//  Estimated: `5367 + a * (32 ±0)`
		// Minimum execution time: 64_414_000 picoseconds.
		Weight::from_parts(69_526_942, 5367)
			// Standard Error: 4_429
			.saturating_add(Weight::from_parts(100_320, 0).saturating_mul(a.into()))
			.saturating_add(ParityDbWeight::get().reads(8_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
	}
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuctionParameters` (r:1 w:0)
	/// Proof: `Validator::AuctionParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_as_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `931`
		//  Estimated: `4396`
		// Minimum execution time: 29_229_000 picoseconds.
		Weight::from_parts(29_618_000, 4396)
			.saturating_add(ParityDbWeight::get().reads(3_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ActiveBidder` (r:1 w:0)
	/// Proof: `Validator::ActiveBidder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalActiveEpochs` (r:1 w:0)
	/// Proof: `Validator::HistoricalActiveEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AccountPeerMapping` (r:1 w:0)
	/// Proof: `Validator::AccountPeerMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:0)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ClaimedValidators` (r:0 w:1)
	/// Proof: `Validator::ClaimedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ManagedValidators` (r:0 w:1)
	/// Proof: `Validator::ManagedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_as_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2199`
		//  Estimated: `5664`
		// Minimum execution time: 64_925_000 picoseconds.
		Weight::from_parts(68_630_000, 5664)
			.saturating_add(ParityDbWeight::get().reads(7_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::RedemptionPeriodAsPercentage` (r:1 w:0)
	/// Proof: `Validator::RedemptionPeriodAsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::EpochDuration` (r:1 w:0)
	/// Proof: `Validator::EpochDuration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ActiveBidder` (r:1 w:1)
	/// Proof: `Validator::ActiveBidder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn stop_bidding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1473`
		//  Estimated: `4938`
		// Minimum execution time: 32_689_000 picoseconds.
		Weight::from_parts(33_696_000, 4938)
			.saturating_add(ParityDbWeight::get().reads(7_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ActiveBidder` (r:1 w:1)
	/// Proof: `Validator::ActiveBidder` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn start_bidding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1398`
		//  Estimated: `4863`
		// Minimum execution time: 24_342_000 picoseconds.
		Weight::from_parts(24_731_000, 4863)
			.saturating_add(ParityDbWeight::get().reads(3_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:2 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorChoice` (r:1 w:0)
	/// Proof: `Validator::OperatorChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ManagedValidators` (r:1 w:0)
	/// Proof: `Validator::ManagedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ClaimedValidators` (r:1 w:1)
	/// Proof: `Validator::ClaimedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `832`
		//  Estimated: `6772`
		// Minimum execution time: 25_865_000 picoseconds.
		Weight::from_parts(26_585_000, 6772)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorChoice` (r:1 w:1)
	/// Proof: `Validator::OperatorChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ClaimedValidators` (r:1 w:1)
	/// Proof: `Validator::ClaimedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ManagedValidators` (r:1 w:1)
	/// Proof: `Validator::ManagedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn accept_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `882`
		//  Estimated: `4347`
		// Minimum execution time: 27_867_000 picoseconds.
		Weight::from_parts(28_633_000, 4347)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `Validator::OperatorChoice` (r:1 w:1)
	/// Proof: `Validator::OperatorChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `343`
		//  Estimated: `3808`
		// Minimum execution time: 14_007_000 picoseconds.
		Weight::from_parts(14_191_000, 3808)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:1)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_operator_settings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 19_967_000 picoseconds.
		Weight::from_parts(20_420_000, 4259)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::DelegationChoice` (r:1 w:0)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:0)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Exceptions` (r:1 w:1)
	/// Proof: `Validator::Exceptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn block_delegator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `998`
		//  Estimated: `4463`
		// Minimum execution time: 24_011_000 picoseconds.
		Weight::from_parts(25_112_000, 4463)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:0)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Exceptions` (r:1 w:1)
	/// Proof: `Validator::Exceptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn allow_delegator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 23_015_000 picoseconds.
		Weight::from_parts(23_348_000, 4259)
			.saturating_add(ParityDbWeight::get().reads(3_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:1)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_as_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 32_852_000 picoseconds.
		Weight::from_parts(33_543_000, 4259)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::LastExpiredEpoch` (r:1 w:0)
	/// Proof: `Validator::LastExpiredEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::DelegationSnapshots` (r:1 w:0)
	/// Proof: `Validator::DelegationSnapshots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ManagedValidators` (r:1 w:1)
	/// Proof: `Validator::ManagedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::DelegationChoice` (r:1 w:0)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:0)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:0 w:1)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Exceptions` (r:0 w:1)
	/// Proof: `Validator::Exceptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_as_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1716`
		//  Estimated: `5181`
		// Minimum execution time: 55_491_000 picoseconds.
		Weight::from_parts(56_624_000, 5181)
			.saturating_add(ParityDbWeight::get().reads(8_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:2 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::OperatorSettingsLookup` (r:1 w:0)
	/// Proof: `Validator::OperatorSettingsLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Exceptions` (r:1 w:0)
	/// Proof: `Validator::Exceptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Validator::DelegationChoice` (r:1 w:1)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1657`
		//  Estimated: `7597`
		// Minimum execution time: 39_060_000 picoseconds.
		Weight::from_parts(40_383_000, 7597)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::DelegationChoice` (r:1 w:1)
	/// Proof: `Validator::DelegationChoice` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn undelegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `479`
		//  Estimated: `3944`
		// Minimum execution time: 17_177_000 picoseconds.
		Weight::from_parts(17_587_000, 3944)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
}
