//! Autogenerated weights for pallet_cf_validator
//!
//! THIS FILE WAS AUTO-GENERATED USING CHAINFLIP NODE BENCHMARK CMD VERSION 4.0.0-dev
//! DATE: 2022-06-13, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_validator
// --extrinsic
// *
// --output
// state-chain/pallets/cf-validator/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_validator.
pub trait WeightInfo {
	fn set_blocks_for_epoch() -> Weight;
	fn set_backup_node_percentage() -> Weight;
	fn force_rotation() -> Weight;
	fn cfe_version() -> Weight;
	fn register_peer_id() -> Weight;
	fn set_vanity_name() -> Weight;
}

/// Weights for pallet_cf_validator using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Validator RotationPhase (r:1 w:0)
	// Storage: Validator BlocksPerEpoch (r:1 w:1)
	fn set_blocks_for_epoch() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(20_370_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Validator BackupNodePercentage (r:0 w:1)
	fn set_backup_node_percentage() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(14_196_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Validator RotationPhase (r:1 w:1)
	fn force_rotation() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(17_550_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Validator NodeCFEVersion (r:1 w:1)
	fn cfe_version() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(18_552_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Validator AccountPeerMapping (r:1 w:1)
	// Storage: Validator MappedPeers (r:1 w:1)
	fn register_peer_id() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(84_214_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Validator VanityNames (r:1 w:1)
	fn set_vanity_name() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(18_861_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Validator RotationPhase (r:1 w:0)
	// Storage: Validator BlocksPerEpoch (r:1 w:1)
	fn set_blocks_for_epoch() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(20_370_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Validator BackupNodePercentage (r:0 w:1)
	fn set_backup_node_percentage() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(14_196_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Validator RotationPhase (r:1 w:1)
	fn force_rotation() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(17_550_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Validator NodeCFEVersion (r:1 w:1)
	fn cfe_version() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(18_552_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Validator AccountPeerMapping (r:1 w:1)
	// Storage: Validator MappedPeers (r:1 w:1)
	fn register_peer_id() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(84_214_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Validator VanityNames (r:1 w:1)
	fn set_vanity_name() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(18_861_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
