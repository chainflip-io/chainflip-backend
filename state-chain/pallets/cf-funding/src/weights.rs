
//! Autogenerated weights for pallet_cf_funding
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-28, STEPS: `2`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `wagmi.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/debug/chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_funding
// --extrinsic
// *
// --output
// state-chain/pallets/cf-funding/src/weights.rs
// --steps=2
// --repeat=2
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_funding.
pub trait WeightInfo {
	fn funded() -> Weight;
	fn redeem() -> Weight;
	fn redeemed() -> Weight;
	fn redemption_expired() -> Weight;
	fn stop_bidding() -> Weight;
	fn start_bidding() -> Weight;
	fn update_minimum_funding() -> Weight;
	fn update_redemption_tax() -> Weight;
	fn bind_redeem_address() -> Weight;
	fn update_restricted_addresses(a: u32, b: u32, c: u32, ) -> Weight;
	fn bind_executor_address() -> Weight;
}

/// Weights for pallet_cf_funding using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Funding::MinimumFunding` (r:1 w:0)
	/// Proof: `Funding::MinimumFunding` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::OffchainFunds` (r:1 w:1)
	/// Proof: `Flip::OffchainFunds` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Backups` (r:1 w:1)
	/// Proof: `Validator::Backups` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedAddresses` (r:1 w:0)
	/// Proof: `Funding::RestrictedAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:0 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	fn funded() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1147`
		//  Estimated: `4612`
		// Minimum execution time: 413_000_000 picoseconds.
		Weight::from_parts(434_000_000, 4612)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::RedemptionPeriodAsPercentage` (r:1 w:0)
	/// Proof: `Validator::RedemptionPeriodAsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::BlocksPerEpoch` (r:1 w:0)
	/// Proof: `Validator::BlocksPerEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::PendingRedemptions` (r:1 w:1)
	/// Proof: `Funding::PendingRedemptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedBalances` (r:1 w:0)
	/// Proof: `Funding::RestrictedBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundExecutorAddress` (r:1 w:0)
	/// Proof: `Funding::BoundExecutorAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RedemptionTax` (r:1 w:0)
	/// Proof: `Funding::RedemptionTax` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundRedeemAddress` (r:1 w:0)
	/// Proof: `Funding::BoundRedeemAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Backups` (r:1 w:1)
	/// Proof: `Validator::Backups` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RedemptionTTLSeconds` (r:1 w:0)
	/// Proof: `Funding::RedemptionTTLSeconds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumStateChainGatewayAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumStateChainGatewayAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumSignatureNonce` (r:1 w:1)
	/// Proof: `Environment::EthereumSignatureNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumChainId` (r:1 w:0)
	/// Proof: `Environment::EthereumChainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumKeyManagerAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumKeyManagerAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumBroadcaster::BroadcastIdCounter` (r:1 w:1)
	/// Proof: `EthereumBroadcaster::BroadcastIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumBroadcaster::PendingBroadcasts` (r:1 w:1)
	/// Proof: `EthereumBroadcaster::PendingBroadcasts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EvmThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::ThresholdSignatureRequestIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::ThresholdSignatureRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Signature` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::Signature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingCeremonies` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::RequestCallback` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::PendingRedemptionsReserve` (r:0 w:1)
	/// Proof: `Flip::PendingRedemptionsReserve` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2915`
		//  Estimated: `13805`
		// Minimum execution time: 1_445_000_000 picoseconds.
		Weight::from_parts(1_523_000_000, 13805)
			.saturating_add(T::DbWeight::get().reads(36_u64))
			.saturating_add(T::DbWeight::get().writes(15_u64))
	}
	/// Storage: `Funding::PendingRedemptions` (r:1 w:1)
	/// Proof: `Funding::PendingRedemptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::PendingRedemptionsReserve` (r:1 w:1)
	/// Proof: `Flip::PendingRedemptionsReserve` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Flip::OffchainFunds` (r:1 w:1)
	/// Proof: `Flip::OffchainFunds` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Validator::VanityNames` (r:1 w:0)
	/// Proof: `Validator::VanityNames` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::LastHeartbeat` (r:0 w:1)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:0 w:1)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::OffenceTimeSlotTracker` (r:0 w:1)
	/// Proof: `Reputation::OffenceTimeSlotTracker` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:0 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ActiveBidder` (r:0 w:1)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedBalances` (r:0 w:1)
	/// Proof: `Funding::RestrictedBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundRedeemAddress` (r:0 w:1)
	/// Proof: `Funding::BoundRedeemAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundExecutorAddress` (r:0 w:1)
	/// Proof: `Funding::BoundExecutorAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn redeemed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1732`
		//  Estimated: `5197`
		// Minimum execution time: 610_000_000 picoseconds.
		Weight::from_parts(737_000_000, 5197)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `Funding::PendingRedemptions` (r:1 w:1)
	/// Proof: `Funding::PendingRedemptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::PendingRedemptionsReserve` (r:1 w:1)
	/// Proof: `Flip::PendingRedemptionsReserve` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Backups` (r:1 w:1)
	/// Proof: `Validator::Backups` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedAddresses` (r:1 w:0)
	/// Proof: `Funding::RestrictedAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn redemption_expired() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1437`
		//  Estimated: `4902`
		// Minimum execution time: 363_000_000 picoseconds.
		Weight::from_parts(373_000_000, 4902)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::RedemptionPeriodAsPercentage` (r:1 w:0)
	/// Proof: `Validator::RedemptionPeriodAsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::BlocksPerEpoch` (r:1 w:0)
	/// Proof: `Validator::BlocksPerEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::ActiveBidder` (r:1 w:1)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_bidding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1588`
		//  Estimated: `5053`
		// Minimum execution time: 290_000_000 picoseconds.
		Weight::from_parts(325_000_000, 5053)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ActiveBidder` (r:1 w:1)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn start_bidding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1205`
		//  Estimated: `4670`
		// Minimum execution time: 214_000_000 picoseconds.
		Weight::from_parts(220_000_000, 4670)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Funding::RedemptionTax` (r:1 w:0)
	/// Proof: `Funding::RedemptionTax` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::MinimumFunding` (r:0 w:1)
	/// Proof: `Funding::MinimumFunding` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_minimum_funding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `176`
		//  Estimated: `1661`
		// Minimum execution time: 86_000_000 picoseconds.
		Weight::from_parts(96_000_000, 1661)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Funding::MinimumFunding` (r:1 w:0)
	/// Proof: `Funding::MinimumFunding` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RedemptionTax` (r:0 w:1)
	/// Proof: `Funding::RedemptionTax` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_redemption_tax() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `176`
		//  Estimated: `1661`
		// Minimum execution time: 101_000_000 picoseconds.
		Weight::from_parts(108_000_000, 1661)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Funding::BoundRedeemAddress` (r:1 w:1)
	/// Proof: `Funding::BoundRedeemAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bind_redeem_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `173`
		//  Estimated: `3638`
		// Minimum execution time: 121_000_000 picoseconds.
		Weight::from_parts(135_000_000, 3638)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Funding::RestrictedBalances` (r:101 w:100)
	/// Proof: `Funding::RestrictedBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedAddresses` (r:0 w:1)
	/// Proof: `Funding::RestrictedAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 100]`.
	/// The range of component `b` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn update_restricted_addresses(_a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + b * (95 ±0) + c * (92 ±0)`
		//  Estimated: `0 + b * (58 ±13) + c * (2567 ±13)`
		// Minimum execution time: 4_434_000_000 picoseconds.
		Weight::from_parts(4_434_000_000, 0)
			// Standard Error: 864_103_196
			.saturating_add(Weight::from_parts(3_883_182_638, 0).saturating_mul(b.into()))
			// Standard Error: 864_103_196
			.saturating_add(Weight::from_parts(3_740_738_194, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 58).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `Funding::BoundExecutorAddress` (r:1 w:1)
	/// Proof: `Funding::BoundExecutorAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bind_executor_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `173`
		//  Estimated: `3638`
		// Minimum execution time: 127_000_000 picoseconds.
		Weight::from_parts(139_000_000, 3638)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Funding::MinimumFunding` (r:1 w:0)
	/// Proof: `Funding::MinimumFunding` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::OffchainFunds` (r:1 w:1)
	/// Proof: `Flip::OffchainFunds` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Backups` (r:1 w:1)
	/// Proof: `Validator::Backups` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedAddresses` (r:1 w:0)
	/// Proof: `Funding::RestrictedAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:0 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	fn funded() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1147`
		//  Estimated: `4612`
		// Minimum execution time: 413_000_000 picoseconds.
		Weight::from_parts(434_000_000, 4612)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::RedemptionPeriodAsPercentage` (r:1 w:0)
	/// Proof: `Validator::RedemptionPeriodAsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::BlocksPerEpoch` (r:1 w:0)
	/// Proof: `Validator::BlocksPerEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::PendingRedemptions` (r:1 w:1)
	/// Proof: `Funding::PendingRedemptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedBalances` (r:1 w:0)
	/// Proof: `Funding::RestrictedBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundExecutorAddress` (r:1 w:0)
	/// Proof: `Funding::BoundExecutorAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RedemptionTax` (r:1 w:0)
	/// Proof: `Funding::RedemptionTax` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundRedeemAddress` (r:1 w:0)
	/// Proof: `Funding::BoundRedeemAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Backups` (r:1 w:1)
	/// Proof: `Validator::Backups` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Funding::RedemptionTTLSeconds` (r:1 w:0)
	/// Proof: `Funding::RedemptionTTLSeconds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumStateChainGatewayAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumStateChainGatewayAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumSignatureNonce` (r:1 w:1)
	/// Proof: `Environment::EthereumSignatureNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumChainId` (r:1 w:0)
	/// Proof: `Environment::EthereumChainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumKeyManagerAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumKeyManagerAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumBroadcaster::BroadcastIdCounter` (r:1 w:1)
	/// Proof: `EthereumBroadcaster::BroadcastIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumBroadcaster::PendingBroadcasts` (r:1 w:1)
	/// Proof: `EthereumBroadcaster::PendingBroadcasts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EvmThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::ThresholdSignatureRequestIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::ThresholdSignatureRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Signature` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::Signature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingCeremonies` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::RequestCallback` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::PendingRedemptionsReserve` (r:0 w:1)
	/// Proof: `Flip::PendingRedemptionsReserve` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2915`
		//  Estimated: `13805`
		// Minimum execution time: 1_445_000_000 picoseconds.
		Weight::from_parts(1_523_000_000, 13805)
			.saturating_add(RocksDbWeight::get().reads(36_u64))
			.saturating_add(RocksDbWeight::get().writes(15_u64))
	}
	/// Storage: `Funding::PendingRedemptions` (r:1 w:1)
	/// Proof: `Funding::PendingRedemptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::PendingRedemptionsReserve` (r:1 w:1)
	/// Proof: `Flip::PendingRedemptionsReserve` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Flip::OffchainFunds` (r:1 w:1)
	/// Proof: `Flip::OffchainFunds` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Validator::VanityNames` (r:1 w:0)
	/// Proof: `Validator::VanityNames` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::LastHeartbeat` (r:0 w:1)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:0 w:1)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::OffenceTimeSlotTracker` (r:0 w:1)
	/// Proof: `Reputation::OffenceTimeSlotTracker` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:0 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ActiveBidder` (r:0 w:1)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedBalances` (r:0 w:1)
	/// Proof: `Funding::RestrictedBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundRedeemAddress` (r:0 w:1)
	/// Proof: `Funding::BoundRedeemAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundExecutorAddress` (r:0 w:1)
	/// Proof: `Funding::BoundExecutorAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn redeemed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1732`
		//  Estimated: `5197`
		// Minimum execution time: 610_000_000 picoseconds.
		Weight::from_parts(737_000_000, 5197)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	/// Storage: `Funding::PendingRedemptions` (r:1 w:1)
	/// Proof: `Funding::PendingRedemptions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::PendingRedemptionsReserve` (r:1 w:1)
	/// Proof: `Flip::PendingRedemptionsReserve` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::Backups` (r:1 w:1)
	/// Proof: `Validator::Backups` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedAddresses` (r:1 w:0)
	/// Proof: `Funding::RestrictedAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn redemption_expired() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1437`
		//  Estimated: `4902`
		// Minimum execution time: 363_000_000 picoseconds.
		Weight::from_parts(373_000_000, 4902)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentRotationPhase` (r:1 w:0)
	/// Proof: `Validator::CurrentRotationPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpochStartedAt` (r:1 w:0)
	/// Proof: `Validator::CurrentEpochStartedAt` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::RedemptionPeriodAsPercentage` (r:1 w:0)
	/// Proof: `Validator::RedemptionPeriodAsPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::BlocksPerEpoch` (r:1 w:0)
	/// Proof: `Validator::BlocksPerEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::ActiveBidder` (r:1 w:1)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_bidding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1588`
		//  Estimated: `5053`
		// Minimum execution time: 290_000_000 picoseconds.
		Weight::from_parts(325_000_000, 5053)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Funding::ActiveBidder` (r:1 w:1)
	/// Proof: `Funding::ActiveBidder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn start_bidding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1205`
		//  Estimated: `4670`
		// Minimum execution time: 214_000_000 picoseconds.
		Weight::from_parts(220_000_000, 4670)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Funding::RedemptionTax` (r:1 w:0)
	/// Proof: `Funding::RedemptionTax` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::MinimumFunding` (r:0 w:1)
	/// Proof: `Funding::MinimumFunding` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_minimum_funding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `176`
		//  Estimated: `1661`
		// Minimum execution time: 86_000_000 picoseconds.
		Weight::from_parts(96_000_000, 1661)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Funding::MinimumFunding` (r:1 w:0)
	/// Proof: `Funding::MinimumFunding` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RedemptionTax` (r:0 w:1)
	/// Proof: `Funding::RedemptionTax` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_redemption_tax() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `176`
		//  Estimated: `1661`
		// Minimum execution time: 101_000_000 picoseconds.
		Weight::from_parts(108_000_000, 1661)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Funding::BoundRedeemAddress` (r:1 w:1)
	/// Proof: `Funding::BoundRedeemAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bind_redeem_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `173`
		//  Estimated: `3638`
		// Minimum execution time: 121_000_000 picoseconds.
		Weight::from_parts(135_000_000, 3638)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Funding::RestrictedBalances` (r:101 w:100)
	/// Proof: `Funding::RestrictedBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedAddresses` (r:0 w:1)
	/// Proof: `Funding::RestrictedAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 100]`.
	/// The range of component `b` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn update_restricted_addresses(_a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + b * (95 ±0) + c * (92 ±0)`
		//  Estimated: `0 + b * (58 ±13) + c * (2567 ±13)`
		// Minimum execution time: 4_434_000_000 picoseconds.
		Weight::from_parts(4_434_000_000, 0)
			// Standard Error: 864_103_196
			.saturating_add(Weight::from_parts(3_883_182_638, 0).saturating_mul(b.into()))
			// Standard Error: 864_103_196
			.saturating_add(Weight::from_parts(3_740_738_194, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 58).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `Funding::BoundExecutorAddress` (r:1 w:1)
	/// Proof: `Funding::BoundExecutorAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bind_executor_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `173`
		//  Estimated: `3638`
		// Minimum execution time: 127_000_000 picoseconds.
		Weight::from_parts(139_000_000, 3638)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
