
//! Autogenerated weights for pallet_cf_emissions
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-23, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `kylezs.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_emissions
// --output
// state-chain/pallets/cf-emissions/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_emissions.
pub trait WeightInfo {
	fn update_backup_node_emission_inflation() -> Weight;
	fn update_current_authority_emission_inflation() -> Weight;
	fn rewards_minted() -> Weight;
	fn rewards_not_minted() -> Weight;
	fn update_supply_update_interval() -> Weight;
}

/// Weights for pallet_cf_emissions using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: Emissions BackupNodeEmissionInflation (r:0 w:1)
	fn update_backup_node_emission_inflation() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Emissions CurrentAuthorityEmissionInflation (r:0 w:1)
	fn update_current_authority_emission_inflation() -> Weight {
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Emissions CurrentAuthorityEmissionPerBlock (r:1 w:0)
	// Storage: Authorship Author (r:1 w:1)
	// Storage: System Digest (r:1 w:0)
	// Storage: Aura Authorities (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Flip TotalIssuance (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Emissions SupplyUpdateInterval (r:1 w:0)
	// Storage: Emissions LastSupplyUpdateBlock (r:1 w:1)
	// Storage: Environment CurrentSystemState (r:1 w:0)
	// Storage: LiquidityPools FlipToBurn (r:1 w:0)
	// Storage: Environment EthereumStateChainGatewayAddress (r:1 w:0)
	// Storage: EthereumIngressEgress EgressIdCounter (r:1 w:1)
	// Storage: EthereumIngressEgress ScheduledEgressFetchOrTransfer (r:1 w:1)
	// Storage: Environment EthereumKeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSignatureNonce (r:1 w:1)
	// Storage: EthereumBroadcaster BroadcastIdCounter (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	fn rewards_minted() -> Weight {
		// Minimum execution time: 126_000 nanoseconds.
		Weight::from_parts(129_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(29))
			.saturating_add(T::DbWeight::get().writes(14))
	}
	// Storage: Emissions CurrentAuthorityEmissionPerBlock (r:1 w:0)
	// Storage: Authorship Author (r:1 w:1)
	// Storage: System Digest (r:1 w:0)
	// Storage: Aura Authorities (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Flip TotalIssuance (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Emissions SupplyUpdateInterval (r:1 w:0)
	// Storage: Emissions LastSupplyUpdateBlock (r:1 w:0)
	fn rewards_not_minted() -> Weight {
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_parts(34_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Emissions SupplyUpdateInterval (r:0 w:1)
	fn update_supply_update_interval() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(16_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Emissions BackupNodeEmissionInflation (r:0 w:1)
	fn update_backup_node_emission_inflation() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Emissions CurrentAuthorityEmissionInflation (r:0 w:1)
	fn update_current_authority_emission_inflation() -> Weight {
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Emissions CurrentAuthorityEmissionPerBlock (r:1 w:0)
	// Storage: Authorship Author (r:1 w:1)
	// Storage: System Digest (r:1 w:0)
	// Storage: Aura Authorities (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Flip TotalIssuance (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Emissions SupplyUpdateInterval (r:1 w:0)
	// Storage: Emissions LastSupplyUpdateBlock (r:1 w:1)
	// Storage: Environment CurrentSystemState (r:1 w:0)
	// Storage: LiquidityPools FlipToBurn (r:1 w:0)
	// Storage: Environment EthereumStateChainGatewayAddress (r:1 w:0)
	// Storage: EthereumIngressEgress EgressIdCounter (r:1 w:1)
	// Storage: EthereumIngressEgress ScheduledEgressFetchOrTransfer (r:1 w:1)
	// Storage: Environment EthereumKeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSignatureNonce (r:1 w:1)
	// Storage: EthereumBroadcaster BroadcastIdCounter (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	fn rewards_minted() -> Weight {
		// Minimum execution time: 126_000 nanoseconds.
		Weight::from_parts(129_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(29))
			.saturating_add(RocksDbWeight::get().writes(14))
	}
	// Storage: Emissions CurrentAuthorityEmissionPerBlock (r:1 w:0)
	// Storage: Authorship Author (r:1 w:1)
	// Storage: System Digest (r:1 w:0)
	// Storage: Aura Authorities (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Flip TotalIssuance (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Emissions SupplyUpdateInterval (r:1 w:0)
	// Storage: Emissions LastSupplyUpdateBlock (r:1 w:0)
	fn rewards_not_minted() -> Weight {
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_parts(34_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Emissions SupplyUpdateInterval (r:0 w:1)
	fn update_supply_update_interval() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(16_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
