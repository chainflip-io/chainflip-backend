
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_lending_pools
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-06-20, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Roys-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_lending-pools
// --output
// state-chain/pallets/cf-lending-pools/src/weights.rs
// --steps=20
// --repeat=20
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_lending_pools.
pub trait WeightInfo {
	fn update_pallet_config(n: u32, ) -> Weight;
	fn add_boost_funds() -> Weight;
	fn process_deposit_as_lost(n: u32, ) -> Weight;
	fn stop_boosting() -> Weight;
	fn create_boost_pools() -> Weight;
	fn create_chp_pool() -> Weight;
	fn add_chp_funds() -> Weight;
	fn stop_chp_lending() -> Weight;
	fn upkeep_active(n: u32, ) -> Weight;
	fn upkeep_soft_liquidation(n: u32, ) -> Weight;
	fn upkeep_no_action(n: u32, ) -> Weight;
}

/// Weights for pallet_cf_lending_pools using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `LendingPools::NetworkFeeDeductionFromBoostPercent` (r:0 w:1)
	/// Proof: `LendingPools::NetworkFeeDeductionFromBoostPercent` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 10]`.
	fn update_pallet_config(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(2_883_224, 0)
			// Standard Error: 17_342
			.saturating_add(Weight::from_parts(2_518_173, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::BoostPools` (r:1 w:0)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_boost_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1524`
		//  Estimated: `4989`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 4989)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::BoostedDeposits` (r:1 w:1)
	/// Proof: `LendingPools::BoostedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn process_deposit_as_lost(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `355 + n * (81 ±0)`
		//  Estimated: `3819 + n * (81 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(15_586_582, 3819)
			// Standard Error: 6_401
			.saturating_add(Weight::from_parts(512_355, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 81).saturating_mul(n.into()))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::BoostPools` (r:1 w:0)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_boosting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4464`
		//  Estimated: `7929`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(66_000_000, 7929)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::BoostPools` (r:1 w:1)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::NextCorePoolId` (r:1 w:1)
	/// Proof: `LendingPools::NextCorePoolId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:0 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_boost_pools() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3574)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `LendingPools::NextCorePoolId` (r:1 w:1)
	/// Proof: `LendingPools::NextCorePoolId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:1)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:0 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_chp_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3574)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:0)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_chp_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1510`
		//  Estimated: `4975`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(37_000_000, 4975)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:0)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_chp_lending() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2097`
		//  Estimated: `5562`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 5562)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_active(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (139 ±0)`
		//  Estimated: `3735 + n * (2614 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(7_265_722, 3735)
			// Standard Error: 19_984
			.saturating_add(Weight::from_parts(6_054_262, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2614).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_soft_liquidation(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (155 ±0)`
		//  Estimated: `3735 + n * (2630 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(8_419_394, 3735)
			// Standard Error: 17_497
			.saturating_add(Weight::from_parts(5_700_423, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_no_action(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (139 ±0)`
		//  Estimated: `3735 + n * (2614 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(7_697_303, 3735)
			// Standard Error: 17_792
			.saturating_add(Weight::from_parts(5_477_353, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2614).saturating_mul(n.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `LendingPools::NetworkFeeDeductionFromBoostPercent` (r:0 w:1)
	/// Proof: `LendingPools::NetworkFeeDeductionFromBoostPercent` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 10]`.
	fn update_pallet_config(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(2_883_224, 0)
			// Standard Error: 17_342
			.saturating_add(Weight::from_parts(2_518_173, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::BoostPools` (r:1 w:0)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_boost_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1524`
		//  Estimated: `4989`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_000_000, 4989)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::BoostedDeposits` (r:1 w:1)
	/// Proof: `LendingPools::BoostedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn process_deposit_as_lost(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `355 + n * (81 ±0)`
		//  Estimated: `3819 + n * (81 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(15_586_582, 3819)
			// Standard Error: 6_401
			.saturating_add(Weight::from_parts(512_355, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 81).saturating_mul(n.into()))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::BoostPools` (r:1 w:0)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_boosting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4464`
		//  Estimated: `7929`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(66_000_000, 7929)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::BoostPools` (r:1 w:1)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::NextCorePoolId` (r:1 w:1)
	/// Proof: `LendingPools::NextCorePoolId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:0 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_boost_pools() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3574)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `LendingPools::NextCorePoolId` (r:1 w:1)
	/// Proof: `LendingPools::NextCorePoolId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:1)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:0 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_chp_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3574)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:0)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_chp_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1510`
		//  Estimated: `4975`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(37_000_000, 4975)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:0)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_chp_lending() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2097`
		//  Estimated: `5562`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 5562)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_active(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (139 ±0)`
		//  Estimated: `3735 + n * (2614 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(7_265_722, 3735)
			// Standard Error: 19_984
			.saturating_add(Weight::from_parts(6_054_262, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2614).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_soft_liquidation(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (155 ±0)`
		//  Estimated: `3735 + n * (2630 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(8_419_394, 3735)
			// Standard Error: 17_497
			.saturating_add(Weight::from_parts(5_700_423, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2630).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_no_action(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (139 ±0)`
		//  Estimated: `3735 + n * (2614 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(7_697_303, 3735)
			// Standard Error: 17_792
			.saturating_add(Weight::from_parts(5_477_353, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2614).saturating_mul(n.into()))
	}
}
