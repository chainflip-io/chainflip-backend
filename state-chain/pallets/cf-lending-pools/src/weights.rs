
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_lending_pools
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-07-01, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBookPro.hub`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_lending-pools
// --output
// state-chain/pallets/cf-lending-pools/src/weights.rs
// --steps=20
// --repeat=20
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_lending_pools.
pub trait WeightInfo {
	fn update_pallet_config(n: u32, ) -> Weight;
	fn add_boost_funds() -> Weight;
	fn process_deposit_as_lost(n: u32, ) -> Weight;
	fn stop_boosting() -> Weight;
	fn create_boost_pools() -> Weight;
	fn create_chp_pool() -> Weight;
	fn add_chp_funds() -> Weight;
	fn stop_chp_lending() -> Weight;
	fn upkeep_active(n: u32, ) -> Weight;
	fn upkeep_soft_liquidation(n: u32, ) -> Weight;
	fn upkeep_no_action(n: u32, ) -> Weight;
	fn charge_interest_for_loan(n: u32, ) -> Weight;
	fn top_up_collateral() -> Weight;
	fn initiate_soft_liquidation() -> Weight;
}

/// Weights for pallet_cf_lending_pools using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `LendingPools::NetworkFeeDeductionFromBoostPercent` (r:0 w:1)
	/// Proof: `LendingPools::NetworkFeeDeductionFromBoostPercent` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 10]`.
	fn update_pallet_config(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(2_666_231, 0)
			// Standard Error: 13_180
			.saturating_add(Weight::from_parts(2_539_360, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::BoostPools` (r:1 w:0)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_boost_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1556`
		//  Estimated: `5021`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 5021)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::BoostedDeposits` (r:1 w:1)
	/// Proof: `LendingPools::BoostedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn process_deposit_as_lost(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `355 + n * (81 ±0)`
		//  Estimated: `3819 + n * (81 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_337_846, 3819)
			// Standard Error: 5_625
			.saturating_add(Weight::from_parts(573_769, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 81).saturating_mul(n.into()))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::BoostPools` (r:1 w:0)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_boosting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4496`
		//  Estimated: `7961`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(68_000_000, 7961)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::BoostPools` (r:1 w:1)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::NextCorePoolId` (r:1 w:1)
	/// Proof: `LendingPools::NextCorePoolId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:0 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_boost_pools() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3574)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `LendingPools::NextCorePoolId` (r:1 w:1)
	/// Proof: `LendingPools::NextCorePoolId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:1)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:0 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_chp_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3574)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:0)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_chp_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1542`
		//  Estimated: `5007`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 5007)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:0)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_chp_lending() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2129`
		//  Estimated: `5594`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 5594)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_active(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (171 ±0)`
		//  Estimated: `3735 + n * (2646 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(7_759_561, 3735)
			// Standard Error: 12_816
			.saturating_add(Weight::from_parts(6_319_977, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2646).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_soft_liquidation(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (187 ±0)`
		//  Estimated: `3735 + n * (2662 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(7_847_390, 3735)
			// Standard Error: 15_573
			.saturating_add(Weight::from_parts(6_051_002, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2662).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_no_action(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (171 ±0)`
		//  Estimated: `3735 + n * (2646 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(6_168_402, 3735)
			// Standard Error: 27_269
			.saturating_add(Weight::from_parts(5_891_880, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2646).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[1, 20]`.
	fn charge_interest_for_loan(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(242_105, 0)
			// Standard Error: 4_421
			.saturating_add(Weight::from_parts(265_037, 0).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn top_up_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `543`
		//  Estimated: `4008`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(25_000_000, 4008)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Swapping::SwapRequestIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::MaximumSwapAmount` (r:1 w:0)
	/// Proof: `Swapping::MaximumSwapAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::NetworkFee` (r:1 w:0)
	/// Proof: `Swapping::NetworkFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::NetworkFeeForAsset` (r:2 w:0)
	/// Proof: `Swapping::NetworkFeeForAsset` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapQueue` (r:1 w:1)
	/// Proof: `Swapping::SwapQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapRequests` (r:0 w:1)
	/// Proof: `Swapping::SwapRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn initiate_soft_liquidation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `6043`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 6043)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `LendingPools::NetworkFeeDeductionFromBoostPercent` (r:0 w:1)
	/// Proof: `LendingPools::NetworkFeeDeductionFromBoostPercent` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 10]`.
	fn update_pallet_config(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(2_666_231, 0)
			// Standard Error: 13_180
			.saturating_add(Weight::from_parts(2_539_360, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::BoostPools` (r:1 w:0)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_boost_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1556`
		//  Estimated: `5021`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 5021)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::BoostedDeposits` (r:1 w:1)
	/// Proof: `LendingPools::BoostedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn process_deposit_as_lost(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `355 + n * (81 ±0)`
		//  Estimated: `3819 + n * (81 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_337_846, 3819)
			// Standard Error: 5_625
			.saturating_add(Weight::from_parts(573_769, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 81).saturating_mul(n.into()))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::BoostPools` (r:1 w:0)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_boosting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4496`
		//  Estimated: `7961`
		// Minimum execution time: 64_000_000 picoseconds.
		Weight::from_parts(68_000_000, 7961)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::BoostPools` (r:1 w:1)
	/// Proof: `LendingPools::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::NextCorePoolId` (r:1 w:1)
	/// Proof: `LendingPools::NextCorePoolId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:0 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_boost_pools() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3574)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `LendingPools::NextCorePoolId` (r:1 w:1)
	/// Proof: `LendingPools::NextCorePoolId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:1)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:0 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_chp_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3574)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:0)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_chp_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1542`
		//  Estimated: `5007`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 5007)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpPools` (r:1 w:0)
	/// Proof: `LendingPools::ChpPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::CorePools` (r:1 w:1)
	/// Proof: `LendingPools::CorePools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_chp_lending() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2129`
		//  Estimated: `5594`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 5594)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_active(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (171 ±0)`
		//  Estimated: `3735 + n * (2646 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(7_759_561, 3735)
			// Standard Error: 12_816
			.saturating_add(Weight::from_parts(6_319_977, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2646).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_soft_liquidation(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (187 ±0)`
		//  Estimated: `3735 + n * (2662 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(7_847_390, 3735)
			// Standard Error: 15_573
			.saturating_add(Weight::from_parts(6_051_002, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2662).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LendingPools::ChpLoans` (r:51 w:50)
	/// Proof: `LendingPools::ChpLoans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 50]`.
	fn upkeep_no_action(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271 + n * (171 ±0)`
		//  Estimated: `3735 + n * (2646 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(6_168_402, 3735)
			// Standard Error: 27_269
			.saturating_add(Weight::from_parts(5_891_880, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2646).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[1, 20]`.
	fn charge_interest_for_loan(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(242_105, 0)
			// Standard Error: 4_421
			.saturating_add(Weight::from_parts(265_037, 0).saturating_mul(n.into()))
	}
	/// Storage: `LendingPools::ChpConfig` (r:1 w:0)
	/// Proof: `LendingPools::ChpConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn top_up_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `543`
		//  Estimated: `4008`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(25_000_000, 4008)
			.saturating_add(ParityDbWeight::get().reads(3_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Swapping::SwapRequestIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::MaximumSwapAmount` (r:1 w:0)
	/// Proof: `Swapping::MaximumSwapAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::NetworkFee` (r:1 w:0)
	/// Proof: `Swapping::NetworkFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::NetworkFeeForAsset` (r:2 w:0)
	/// Proof: `Swapping::NetworkFeeForAsset` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapQueue` (r:1 w:1)
	/// Proof: `Swapping::SwapQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapRequests` (r:0 w:1)
	/// Proof: `Swapping::SwapRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn initiate_soft_liquidation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `103`
		//  Estimated: `6043`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 6043)
			.saturating_add(ParityDbWeight::get().reads(7_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
}
