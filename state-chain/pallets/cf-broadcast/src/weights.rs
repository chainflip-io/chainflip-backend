
//! Autogenerated weights for pallet_cf_broadcast
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-23, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `kylezs.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_broadcast
// --output
// state-chain/pallets/cf-broadcast/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_broadcast.
pub trait WeightInfo {
	fn on_initialize(x: u32, ) -> Weight;
	fn transaction_signing_failure() -> Weight;
	fn on_signature_ready() -> Weight;
	fn start_next_broadcast_attempt() -> Weight;
	fn transaction_succeeded() -> Weight;
}

/// Weights for pallet_cf_broadcast using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: EthereumBroadcaster Timeouts (r:1 w:0)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:52 w:0)
	/// The range of component `x` is `[1, 1000]`.
	fn on_initialize(x: u32, ) -> Weight {
		// Minimum execution time: 3_000 nanoseconds.
		Weight::from_ref_time(6_605_838)
			// Standard Error: 4_267
			.saturating_add(Weight::from_ref_time(1_301_424).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:1 w:1)
	// Storage: EthereumBroadcaster FailedBroadcasters (r:1 w:1)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: EthereumBroadcaster BroadcastRetryQueue (r:1 w:1)
	fn transaction_signing_failure() -> Weight {
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_ref_time(38_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: EthereumThresholdSigner Signature (r:1 w:1)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSupportedAssets (r:1 w:0)
	// Storage: EthereumChainTracking ChainState (r:1 w:0)
	// Storage: EthereumBroadcaster FailedBroadcasters (r:1 w:0)
	// Storage: Reputation Suspensions (r:2 w:0)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumBroadcaster Timeouts (r:1 w:1)
	// Storage: EthereumBroadcaster SignatureToBroadcastIdLookup (r:0 w:1)
	// Storage: EthereumBroadcaster ThresholdSignatureData (r:0 w:1)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:0 w:1)
	fn on_signature_ready() -> Weight {
		// Minimum execution time: 66_000 nanoseconds.
		Weight::from_ref_time(67_000_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: EthereumBroadcaster ThresholdSignatureData (r:1 w:0)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: EthereumBroadcaster BroadcastAttemptCount (r:1 w:1)
	// Storage: EthereumChainTracking ChainState (r:1 w:0)
	// Storage: EthereumBroadcaster FailedBroadcasters (r:1 w:0)
	// Storage: Reputation Suspensions (r:2 w:0)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumBroadcaster Timeouts (r:1 w:1)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:0 w:1)
	fn start_next_broadcast_attempt() -> Weight {
		// Minimum execution time: 215_000 nanoseconds.
		Weight::from_ref_time(224_000_000)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: EthereumBroadcaster SignatureToBroadcastIdLookup (r:1 w:1)
	// Storage: EthereumBroadcaster BroadcastAttemptCount (r:1 w:0)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:1 w:1)
	// Storage: EthereumBroadcaster TransactionFeeDeficit (r:1 w:1)
	// Storage: EthereumBroadcaster FailedBroadcasters (r:1 w:1)
	// Storage: EthereumBroadcaster ThresholdSignatureData (r:1 w:0)
	fn transaction_succeeded() -> Weight {
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_ref_time(39_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthereumBroadcaster Timeouts (r:1 w:0)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:52 w:0)
	/// The range of component `x` is `[1, 1000]`.
	fn on_initialize(x: u32, ) -> Weight {
		// Minimum execution time: 3_000 nanoseconds.
		Weight::from_ref_time(6_605_838)
			// Standard Error: 4_267
			.saturating_add(Weight::from_ref_time(1_301_424).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:1 w:1)
	// Storage: EthereumBroadcaster FailedBroadcasters (r:1 w:1)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: EthereumBroadcaster BroadcastRetryQueue (r:1 w:1)
	fn transaction_signing_failure() -> Weight {
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_ref_time(38_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: EthereumThresholdSigner Signature (r:1 w:1)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSupportedAssets (r:1 w:0)
	// Storage: EthereumChainTracking ChainState (r:1 w:0)
	// Storage: EthereumBroadcaster FailedBroadcasters (r:1 w:0)
	// Storage: Reputation Suspensions (r:2 w:0)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumBroadcaster Timeouts (r:1 w:1)
	// Storage: EthereumBroadcaster SignatureToBroadcastIdLookup (r:0 w:1)
	// Storage: EthereumBroadcaster ThresholdSignatureData (r:0 w:1)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:0 w:1)
	fn on_signature_ready() -> Weight {
		// Minimum execution time: 66_000 nanoseconds.
		Weight::from_ref_time(67_000_000)
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: EthereumBroadcaster ThresholdSignatureData (r:1 w:0)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: EthereumBroadcaster BroadcastAttemptCount (r:1 w:1)
	// Storage: EthereumChainTracking ChainState (r:1 w:0)
	// Storage: EthereumBroadcaster FailedBroadcasters (r:1 w:0)
	// Storage: Reputation Suspensions (r:2 w:0)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumBroadcaster Timeouts (r:1 w:1)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:0 w:1)
	fn start_next_broadcast_attempt() -> Weight {
		// Minimum execution time: 215_000 nanoseconds.
		Weight::from_ref_time(224_000_000)
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: EthereumBroadcaster SignatureToBroadcastIdLookup (r:1 w:1)
	// Storage: EthereumBroadcaster BroadcastAttemptCount (r:1 w:0)
	// Storage: EthereumBroadcaster AwaitingBroadcast (r:1 w:1)
	// Storage: EthereumBroadcaster TransactionFeeDeficit (r:1 w:1)
	// Storage: EthereumBroadcaster FailedBroadcasters (r:1 w:1)
	// Storage: EthereumBroadcaster ThresholdSignatureData (r:1 w:0)
	fn transaction_succeeded() -> Weight {
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_ref_time(39_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}
