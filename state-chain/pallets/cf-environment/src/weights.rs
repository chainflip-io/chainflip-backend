
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_environment
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-09-29, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `laptop`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_environment
// --extrinsic
// *
// --output
// state-chain/pallets/cf-environment/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_environment.
pub trait WeightInfo {
	fn update_safe_mode() -> Weight;
	fn update_consolidation_parameters() -> Weight;
	fn force_recover_sol_nonce() -> Weight;
	fn witness_polkadot_vault_creation() -> Weight;
	fn witness_current_bitcoin_block_number_for_key() -> Weight;
	fn witness_initialize_arbitrum_vault() -> Weight;
	fn witness_initialize_solana_vault() -> Weight;
	fn witness_assethub_vault_creation() -> Weight;
	fn dispatch_solana_gov_call() -> Weight;
	fn submit_signed_runtime_call(c: u32, ) -> Weight;
	fn submit_batch_runtime_call(c: u32, ) -> Weight;
}

/// Weights for pallet_cf_environment using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Environment::RuntimeSafeMode` (r:0 w:1)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_safe_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_837_000 picoseconds.
		Weight::from_parts(6_769_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::ConsolidationParameters` (r:0 w:1)
	/// Proof: `Environment::ConsolidationParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_consolidation_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_305_000 picoseconds.
		Weight::from_parts(5_737_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::SolanaUnavailableNonceAccounts` (r:1 w:1)
	/// Proof: `Environment::SolanaUnavailableNonceAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::SolanaAvailableNonceAccounts` (r:1 w:1)
	/// Proof: `Environment::SolanaAvailableNonceAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_recover_sol_nonce() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3840`
		//  Estimated: `7305`
		// Minimum execution time: 15_129_000 picoseconds.
		Weight::from_parts(15_660_000, 7305)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PolkadotVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `PolkadotVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `PolkadotVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::PolkadotVaultAccountId` (r:0 w:1)
	/// Proof: `Environment::PolkadotVaultAccountId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn witness_polkadot_vault_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391`
		//  Estimated: `1876`
		// Minimum execution time: 19_582_000 picoseconds.
		Weight::from_parts(20_372_000, 1876)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `BitcoinVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `BitcoinVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `BitcoinVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn witness_current_bitcoin_block_number_for_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `430`
		//  Estimated: `1915`
		// Minimum execution time: 19_281_000 picoseconds.
		Weight::from_parts(20_244_000, 1915)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ArbitrumVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `ArbitrumVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ArbitrumVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `ArbitrumVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn witness_initialize_arbitrum_vault() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `1911`
		// Minimum execution time: 19_412_000 picoseconds.
		Weight::from_parts(20_213_000, 1911)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `SolanaVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `SolanaVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn witness_initialize_solana_vault() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `496`
		//  Estimated: `1981`
		// Minimum execution time: 19_778_000 picoseconds.
		Weight::from_parts(20_309_000, 1981)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `AssethubVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `AssethubVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AssethubVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `AssethubVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::AssethubVaultAccountId` (r:0 w:1)
	/// Proof: `Environment::AssethubVaultAccountId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn witness_assethub_vault_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `429`
		//  Estimated: `1914`
		// Minimum execution time: 21_350_000 picoseconds.
		Weight::from_parts(22_182_000, 1914)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `SolanaThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::SolanaApiEnvironment` (r:1 w:0)
	/// Proof: `Environment::SolanaApiEnvironment` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::SolanaAvailableNonceAccounts` (r:1 w:1)
	/// Proof: `Environment::SolanaAvailableNonceAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedStateMap` (r:1 w:0)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedStateMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:1)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaBroadcaster::BroadcastIdCounter` (r:1 w:1)
	/// Proof: `SolanaBroadcaster::BroadcastIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaBroadcaster::PendingBroadcasts` (r:1 w:1)
	/// Proof: `SolanaBroadcaster::PendingBroadcasts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedState` (r:1 w:0)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::ThresholdSignatureRequestIdCounter` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::ThresholdSignatureRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::SignerAndSignature` (r:0 w:1)
	/// Proof: `SolanaThresholdSigner::SignerAndSignature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::PendingCeremonies` (r:0 w:1)
	/// Proof: `SolanaThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::RequestCallback` (r:0 w:1)
	/// Proof: `SolanaThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionState` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::SolanaUnavailableNonceAccounts` (r:0 w:1)
	/// Proof: `Environment::SolanaUnavailableNonceAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn dispatch_solana_gov_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2596`
		//  Estimated: `13486`
		// Minimum execution time: 107_334_000 picoseconds.
		Weight::from_parts(118_188_000, 13486)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn submit_signed_runtime_call(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37`
		//  Estimated: `3529`
		// Minimum execution time: 14_458_000 picoseconds.
		Weight::from_parts(16_042_172, 3529)
			// Standard Error: 3_247
			.saturating_add(Weight::from_parts(235_482, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `c` is `[0, 1000]`.
	fn submit_batch_runtime_call(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_210_000 picoseconds.
		Weight::from_parts(11_293_320, 0)
			// Standard Error: 2_027
			.saturating_add(Weight::from_parts(230_291, 0).saturating_mul(c.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Environment::RuntimeSafeMode` (r:0 w:1)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_safe_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_837_000 picoseconds.
		Weight::from_parts(6_769_000, 0)
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::ConsolidationParameters` (r:0 w:1)
	/// Proof: `Environment::ConsolidationParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_consolidation_parameters() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_305_000 picoseconds.
		Weight::from_parts(5_737_000, 0)
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::SolanaUnavailableNonceAccounts` (r:1 w:1)
	/// Proof: `Environment::SolanaUnavailableNonceAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::SolanaAvailableNonceAccounts` (r:1 w:1)
	/// Proof: `Environment::SolanaAvailableNonceAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_recover_sol_nonce() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3840`
		//  Estimated: `7305`
		// Minimum execution time: 15_129_000 picoseconds.
		Weight::from_parts(15_660_000, 7305)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `PolkadotVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `PolkadotVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `PolkadotVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::PolkadotVaultAccountId` (r:0 w:1)
	/// Proof: `Environment::PolkadotVaultAccountId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn witness_polkadot_vault_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391`
		//  Estimated: `1876`
		// Minimum execution time: 19_582_000 picoseconds.
		Weight::from_parts(20_372_000, 1876)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `BitcoinVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `BitcoinVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `BitcoinVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn witness_current_bitcoin_block_number_for_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `430`
		//  Estimated: `1915`
		// Minimum execution time: 19_281_000 picoseconds.
		Weight::from_parts(20_244_000, 1915)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `ArbitrumVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `ArbitrumVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ArbitrumVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `ArbitrumVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn witness_initialize_arbitrum_vault() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `1911`
		// Minimum execution time: 19_412_000 picoseconds.
		Weight::from_parts(20_213_000, 1911)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `SolanaVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `SolanaVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn witness_initialize_solana_vault() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `496`
		//  Estimated: `1981`
		// Minimum execution time: 19_778_000 picoseconds.
		Weight::from_parts(20_309_000, 1981)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `AssethubVault::PendingVaultActivation` (r:1 w:1)
	/// Proof: `AssethubVault::PendingVaultActivation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AssethubVault::VaultStartBlockNumbers` (r:0 w:1)
	/// Proof: `AssethubVault::VaultStartBlockNumbers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::AssethubVaultAccountId` (r:0 w:1)
	/// Proof: `Environment::AssethubVaultAccountId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn witness_assethub_vault_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `429`
		//  Estimated: `1914`
		// Minimum execution time: 21_350_000 picoseconds.
		Weight::from_parts(22_182_000, 1914)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `SolanaThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::SolanaApiEnvironment` (r:1 w:0)
	/// Proof: `Environment::SolanaApiEnvironment` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::SolanaAvailableNonceAccounts` (r:1 w:1)
	/// Proof: `Environment::SolanaAvailableNonceAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedStateMap` (r:1 w:0)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedStateMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:1)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaBroadcaster::BroadcastIdCounter` (r:1 w:1)
	/// Proof: `SolanaBroadcaster::BroadcastIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaBroadcaster::PendingBroadcasts` (r:1 w:1)
	/// Proof: `SolanaBroadcaster::PendingBroadcasts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedState` (r:1 w:0)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::ThresholdSignatureRequestIdCounter` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::ThresholdSignatureRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `SolanaThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `SolanaThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::SignerAndSignature` (r:0 w:1)
	/// Proof: `SolanaThresholdSigner::SignerAndSignature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::PendingCeremonies` (r:0 w:1)
	/// Proof: `SolanaThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaThresholdSigner::RequestCallback` (r:0 w:1)
	/// Proof: `SolanaThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionState` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::SolanaUnavailableNonceAccounts` (r:0 w:1)
	/// Proof: `Environment::SolanaUnavailableNonceAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn dispatch_solana_gov_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2596`
		//  Estimated: `13486`
		// Minimum execution time: 107_334_000 picoseconds.
		Weight::from_parts(118_188_000, 13486)
			.saturating_add(ParityDbWeight::get().reads(20_u64))
			.saturating_add(ParityDbWeight::get().writes(14_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn submit_signed_runtime_call(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `37`
		//  Estimated: `3529`
		// Minimum execution time: 14_458_000 picoseconds.
		Weight::from_parts(16_042_172, 3529)
			// Standard Error: 3_247
			.saturating_add(Weight::from_parts(235_482, 0).saturating_mul(c.into()))
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// The range of component `c` is `[0, 1000]`.
	fn submit_batch_runtime_call(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_210_000 picoseconds.
		Weight::from_parts(11_293_320, 0)
			// Standard Error: 2_027
			.saturating_add(Weight::from_parts(230_291, 0).saturating_mul(c.into()))
	}
}
