
//! Autogenerated weights for pallet_cf_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE CHAINFLIP BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-20, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `wagmi.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_staking
// --extrinsic
// *
// --output
// state-chain/pallets/cf-staking/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_staking.
pub trait WeightInfo {
	fn staked() -> Weight;
	fn claim() -> Weight;
	fn claim_all() -> Weight;
	fn claimed() -> Weight;
	fn stop_bidding() -> Weight;
	fn start_bidding() -> Weight;
	fn on_initialize_best_case() -> Weight;
	fn expire_pending_claims_at(b: u32, ) -> Weight;
	fn update_minimum_stake() -> Weight;
}

/// Weights for pallet_cf_staking using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Validator Backups (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:0 w:1)
	// Storage: Staking ActiveBidder (r:0 w:1)
	// Storage: AccountRoles AccountRoles (r:0 w:1)
	fn staked() -> Weight {
		// Minimum execution time: 38_000 nanoseconds.
		Weight::from_ref_time(39_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Environment CurrentSystemState (r:1 w:0)
	// Storage: Validator CurrentRotationPhase (r:1 w:0)
	// Storage: Validator CurrentEpochStartedAt (r:1 w:0)
	// Storage: Validator BlocksPerEpoch (r:1 w:0)
	// Storage: Validator ClaimPeriodAsPercentage (r:1 w:0)
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:1 w:0)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Staking MinimumStake (r:1 w:0)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Validator Backups (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Staking ClaimTTLSeconds (r:1 w:0)
	// Storage: Staking ClaimDelayBufferSeconds (r:1 w:0)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Environment EthereumKeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSignatureNonce (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	// Storage: Flip PendingClaimsReserve (r:0 w:1)
	fn claim() -> Weight {
		// Minimum execution time: 96_000 nanoseconds.
		Weight::from_ref_time(98_000_000)
			.saturating_add(T::DbWeight::get().reads(29))
			.saturating_add(T::DbWeight::get().writes(12))
	}
	// Storage: Environment CurrentSystemState (r:1 w:0)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Validator CurrentRotationPhase (r:1 w:0)
	// Storage: Validator CurrentEpochStartedAt (r:1 w:0)
	// Storage: Validator BlocksPerEpoch (r:1 w:0)
	// Storage: Validator ClaimPeriodAsPercentage (r:1 w:0)
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:1 w:0)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Validator Backups (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Staking ClaimTTLSeconds (r:1 w:0)
	// Storage: Staking ClaimDelayBufferSeconds (r:1 w:0)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Environment EthereumKeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSignatureNonce (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	// Storage: Flip PendingClaimsReserve (r:0 w:1)
	fn claim_all() -> Weight {
		// Minimum execution time: 96_000 nanoseconds.
		Weight::from_ref_time(98_000_000)
			.saturating_add(T::DbWeight::get().reads(28))
			.saturating_add(T::DbWeight::get().writes(12))
	}
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Flip PendingClaimsReserve (r:1 w:1)
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Flip TotalIssuance (r:1 w:1)
	// Storage: Validator AccountPeerMapping (r:1 w:0)
	// Storage: Validator VanityNames (r:1 w:1)
	// Storage: Reputation LastHeartbeat (r:0 w:1)
	// Storage: Reputation Reputations (r:0 w:1)
	// Storage: Reputation OffenceTimeSlotTracker (r:0 w:1)
	// Storage: Staking WithdrawalAddresses (r:0 w:1)
	// Storage: Staking ActiveBidder (r:0 w:1)
	// Storage: AccountRoles AccountRoles (r:0 w:1)
	fn claimed() -> Weight {
		// Minimum execution time: 62_000 nanoseconds.
		Weight::from_ref_time(68_000_000)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(13))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: Validator CurrentRotationPhase (r:1 w:0)
	// Storage: Validator CurrentEpochStartedAt (r:1 w:0)
	// Storage: Validator BlocksPerEpoch (r:1 w:0)
	// Storage: Validator ClaimPeriodAsPercentage (r:1 w:0)
	// Storage: Staking ActiveBidder (r:1 w:1)
	fn stop_bidding() -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(28_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: Staking ActiveBidder (r:1 w:1)
	fn start_bidding() -> Weight {
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_ref_time(22_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Staking ClaimExpiries (r:1 w:0)
	fn on_initialize_best_case() -> Weight {
		// Minimum execution time: 3_000 nanoseconds.
		Weight::from_ref_time(4_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Staking PendingClaims (r:7 w:7)
	// Storage: Flip PendingClaimsReserve (r:7 w:7)
	// Storage: Flip Account (r:7 w:7)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Validator Backups (r:1 w:1)
	/// The range of component `b` is `[0, 150]`.
	fn expire_pending_claims_at(b: u32, ) -> Weight {
		// Minimum execution time: 4_000 nanoseconds.
		Weight::from_ref_time(5_000_000)
			// Standard Error: 117_375
			.saturating_add(Weight::from_ref_time(18_921_347).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
	}
	// Storage: Staking MinimumStake (r:0 w:1)
	fn update_minimum_stake() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(11_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Validator Backups (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:0 w:1)
	// Storage: Staking ActiveBidder (r:0 w:1)
	// Storage: AccountRoles AccountRoles (r:0 w:1)
	fn staked() -> Weight {
		// Minimum execution time: 38_000 nanoseconds.
		Weight::from_ref_time(39_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Environment CurrentSystemState (r:1 w:0)
	// Storage: Validator CurrentRotationPhase (r:1 w:0)
	// Storage: Validator CurrentEpochStartedAt (r:1 w:0)
	// Storage: Validator BlocksPerEpoch (r:1 w:0)
	// Storage: Validator ClaimPeriodAsPercentage (r:1 w:0)
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:1 w:0)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Staking MinimumStake (r:1 w:0)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Validator Backups (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Staking ClaimTTLSeconds (r:1 w:0)
	// Storage: Staking ClaimDelayBufferSeconds (r:1 w:0)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Environment EthereumKeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSignatureNonce (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	// Storage: Flip PendingClaimsReserve (r:0 w:1)
	fn claim() -> Weight {
		// Minimum execution time: 96_000 nanoseconds.
		Weight::from_ref_time(98_000_000)
			.saturating_add(RocksDbWeight::get().reads(29))
			.saturating_add(RocksDbWeight::get().writes(12))
	}
	// Storage: Environment CurrentSystemState (r:1 w:0)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Validator CurrentRotationPhase (r:1 w:0)
	// Storage: Validator CurrentEpochStartedAt (r:1 w:0)
	// Storage: Validator BlocksPerEpoch (r:1 w:0)
	// Storage: Validator ClaimPeriodAsPercentage (r:1 w:0)
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:1 w:0)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Validator Backups (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Staking ClaimTTLSeconds (r:1 w:0)
	// Storage: Staking ClaimDelayBufferSeconds (r:1 w:0)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Environment EthereumKeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSignatureNonce (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	// Storage: Flip PendingClaimsReserve (r:0 w:1)
	fn claim_all() -> Weight {
		// Minimum execution time: 96_000 nanoseconds.
		Weight::from_ref_time(98_000_000)
			.saturating_add(RocksDbWeight::get().reads(28))
			.saturating_add(RocksDbWeight::get().writes(12))
	}
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Flip PendingClaimsReserve (r:1 w:1)
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Flip TotalIssuance (r:1 w:1)
	// Storage: Validator AccountPeerMapping (r:1 w:0)
	// Storage: Validator VanityNames (r:1 w:1)
	// Storage: Reputation LastHeartbeat (r:0 w:1)
	// Storage: Reputation Reputations (r:0 w:1)
	// Storage: Reputation OffenceTimeSlotTracker (r:0 w:1)
	// Storage: Staking WithdrawalAddresses (r:0 w:1)
	// Storage: Staking ActiveBidder (r:0 w:1)
	// Storage: AccountRoles AccountRoles (r:0 w:1)
	fn claimed() -> Weight {
		// Minimum execution time: 62_000 nanoseconds.
		Weight::from_ref_time(68_000_000)
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(13))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: Validator CurrentRotationPhase (r:1 w:0)
	// Storage: Validator CurrentEpochStartedAt (r:1 w:0)
	// Storage: Validator BlocksPerEpoch (r:1 w:0)
	// Storage: Validator ClaimPeriodAsPercentage (r:1 w:0)
	// Storage: Staking ActiveBidder (r:1 w:1)
	fn stop_bidding() -> Weight {
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_ref_time(28_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: Staking ActiveBidder (r:1 w:1)
	fn start_bidding() -> Weight {
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_ref_time(22_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Staking ClaimExpiries (r:1 w:0)
	fn on_initialize_best_case() -> Weight {
		// Minimum execution time: 3_000 nanoseconds.
		Weight::from_ref_time(4_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Staking PendingClaims (r:7 w:7)
	// Storage: Flip PendingClaimsReserve (r:7 w:7)
	// Storage: Flip Account (r:7 w:7)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Validator Backups (r:1 w:1)
	/// The range of component `b` is `[0, 150]`.
	fn expire_pending_claims_at(b: u32, ) -> Weight {
		// Minimum execution time: 4_000 nanoseconds.
		Weight::from_ref_time(5_000_000)
			// Standard Error: 117_375
			.saturating_add(Weight::from_ref_time(18_921_347).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(b.into())))
	}
	// Storage: Staking MinimumStake (r:0 w:1)
	fn update_minimum_stake() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(11_000_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
