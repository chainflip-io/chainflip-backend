//! Autogenerated weights for pallet_cf_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-23, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// ./target/release/state-chain-node
// benchmark
// --extrinsic
// *
// --pallet
// pallet_cf_staking
// --output
// state-chain/pallets/cf-staking/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_staking.
pub trait WeightInfo {
	fn staked() -> Weight;
	fn claim() -> Weight;
	fn claim_all() -> Weight;
	fn claimed() -> Weight;
	fn post_claim_signature() -> Weight;
	fn retire_account() -> Weight;
	fn activate_account() -> Weight;
	fn on_initialize_best_case() -> Weight;
	fn on_initialize_worst_case(b: u32, ) -> Weight;
}

/// Weights for pallet_cf_staking using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Auction BackupGroupSize (r:1 w:0)
	// Storage: Staking AccountRetired (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:0 w:1)
	fn staked() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(95_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Auction CurrentPhase (r:1 w:0)
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:1 w:0)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Auction BackupGroupSize (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Vaults ChainNonces (r:1 w:1)
	// Storage: EthereumThresholdSigner CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Vaults Vaults (r:1 w:0)
	// Storage: Witnesser ConsensusThreshold (r:1 w:0)
	// Storage: Validator ValidatorLookup (r:2 w:0)
	// Storage: Online Nodes (r:1 w:0)
	// Storage: EthereumThresholdSigner PendingRequests (r:0 w:1)
	fn claim() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(196_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Flip Account (r:1 w:1)
	// Storage: Auction CurrentPhase (r:1 w:0)
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:1 w:0)
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Auction BackupGroupSize (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Vaults ChainNonces (r:1 w:1)
	// Storage: EthereumThresholdSigner CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Vaults Vaults (r:1 w:0)
	// Storage: Witnesser ConsensusThreshold (r:1 w:0)
	// Storage: Validator ValidatorLookup (r:2 w:0)
	// Storage: Online Nodes (r:1 w:0)
	// Storage: EthereumThresholdSigner PendingRequests (r:0 w:1)
	fn claim_all() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(189_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(16 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Flip TotalIssuance (r:1 w:1)
	fn claimed() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(93_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn post_claim_signature() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(67_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Staking AccountRetired (r:1 w:1)
	fn retire_account() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(31_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Staking AccountRetired (r:1 w:1)
	fn activate_account() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(32_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Staking ClaimExpiries (r:1 w:0)
	fn on_initialize_best_case() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(5_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Staking ClaimExpiries (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn on_initialize_worst_case(b: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(21_420_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((722_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Auction BackupGroupSize (r:1 w:0)
	// Storage: Staking AccountRetired (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:0 w:1)
	fn staked() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(95_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Auction CurrentPhase (r:1 w:0)
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:1 w:0)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Auction BackupGroupSize (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Vaults ChainNonces (r:1 w:1)
	// Storage: EthereumThresholdSigner CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Vaults Vaults (r:1 w:0)
	// Storage: Witnesser ConsensusThreshold (r:1 w:0)
	// Storage: Validator ValidatorLookup (r:2 w:0)
	// Storage: Online Nodes (r:1 w:0)
	// Storage: EthereumThresholdSigner PendingRequests (r:0 w:1)
	fn claim() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(196_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Flip Account (r:1 w:1)
	// Storage: Auction CurrentPhase (r:1 w:0)
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Staking WithdrawalAddresses (r:1 w:0)
	// Storage: Flip OffchainFunds (r:1 w:1)
	// Storage: Auction BackupGroupSize (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Staking ClaimExpiries (r:1 w:1)
	// Storage: Vaults ChainNonces (r:1 w:1)
	// Storage: EthereumThresholdSigner CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Vaults Vaults (r:1 w:0)
	// Storage: Witnesser ConsensusThreshold (r:1 w:0)
	// Storage: Validator ValidatorLookup (r:2 w:0)
	// Storage: Online Nodes (r:1 w:0)
	// Storage: EthereumThresholdSigner PendingRequests (r:0 w:1)
	fn claim_all() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(189_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(16 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Flip Account (r:1 w:1)
	// Storage: Flip TotalIssuance (r:1 w:1)
	fn claimed() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(93_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Staking PendingClaims (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn post_claim_signature() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(67_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Staking AccountRetired (r:1 w:1)
	fn retire_account() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(31_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Staking AccountRetired (r:1 w:1)
	fn activate_account() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(32_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Staking ClaimExpiries (r:1 w:0)
	fn on_initialize_best_case() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(5_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Staking ClaimExpiries (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn on_initialize_worst_case(b: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(21_420_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((722_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}