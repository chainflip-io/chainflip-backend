
//! Autogenerated weights for pallet_cf_governance
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-19, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-12-158`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// /usr/bin/chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_governance
// --extrinsic
// *
// --output
// state-chain/pallets/cf-governance/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_governance.
pub trait WeightInfo {
	fn propose_governance_extrinsic() -> Weight;
	fn approve() -> Weight;
	fn new_membership_set() -> Weight;
	fn call_as_sudo() -> Weight;
	fn on_initialize(b: u32, ) -> Weight;
	fn on_initialize_best_case() -> Weight;
	fn expire_proposals(b: u32, ) -> Weight;
	fn set_whitelisted_call_hash() -> Weight;
	fn submit_govkey_call() -> Weight;
}

/// Weights for pallet_cf_governance using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: Governance Members (r:1 w:0)
	// Storage: Governance ProposalIdCounter (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Governance ExpiryTime (r:1 w:0)
	// Storage: Governance ActiveProposals (r:1 w:1)
	// Storage: Governance ExecutionPipeline (r:1 w:1)
	// Storage: Governance Proposals (r:0 w:1)
	fn propose_governance_extrinsic() -> Weight {
		// Minimum execution time: 65_157 nanoseconds.
		Weight::from_ref_time(66_309_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Governance Members (r:1 w:0)
	// Storage: Governance Proposals (r:1 w:1)
	// Storage: Governance ExecutionPipeline (r:1 w:1)
	// Storage: Governance ActiveProposals (r:1 w:1)
	fn approve() -> Weight {
		// Minimum execution time: 51_298 nanoseconds.
		Weight::from_ref_time(52_533_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Governance Members (r:0 w:1)
	fn new_membership_set() -> Weight {
		// Minimum execution time: 9_440 nanoseconds.
		Weight::from_ref_time(9_940_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: System Digest (r:1 w:1)
	// Storage: unknown [0x3a636f6465] (r:0 w:1)
	fn call_as_sudo() -> Weight {
		// Minimum execution time: 33_139 nanoseconds.
		Weight::from_ref_time(34_043_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance ExecutionPipeline (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `b` is `[1, 100]`.
	fn on_initialize(b: u32, ) -> Weight {
		// Minimum execution time: 6_817 nanoseconds.
		Weight::from_ref_time(13_832_131)
			// Standard Error: 6_796
			.saturating_add(Weight::from_ref_time(1_060_560).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance ExecutionPipeline (r:1 w:0)
	fn on_initialize_best_case() -> Weight {
		// Minimum execution time: 6_683 nanoseconds.
		Weight::from_ref_time(6_955_000)
			.saturating_add(T::DbWeight::get().reads(2))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance Proposals (r:0 w:5)
	/// The range of component `b` is `[1, 100]`.
	fn expire_proposals(b: u32, ) -> Weight {
		// Minimum execution time: 5_430 nanoseconds.
		Weight::from_ref_time(12_710_362)
			// Standard Error: 14_954
			.saturating_add(Weight::from_ref_time(6_549_823).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
	}
	// Storage: Governance GovKeyWhitelistedCallHash (r:0 w:1)
	fn set_whitelisted_call_hash() -> Weight {
		// Minimum execution time: 24_805 nanoseconds.
		Weight::from_ref_time(25_224_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Governance NextGovKeyCallHashNonce (r:1 w:1)
	// Storage: Governance GovKeyWhitelistedCallHash (r:1 w:1)
	// Storage: Governance Members (r:0 w:1)
	fn submit_govkey_call() -> Weight {
		// Minimum execution time: 45_719 nanoseconds.
		Weight::from_ref_time(48_266_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Governance Members (r:1 w:0)
	// Storage: Governance ProposalIdCounter (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Governance ExpiryTime (r:1 w:0)
	// Storage: Governance ActiveProposals (r:1 w:1)
	// Storage: Governance ExecutionPipeline (r:1 w:1)
	// Storage: Governance Proposals (r:0 w:1)
	fn propose_governance_extrinsic() -> Weight {
		// Minimum execution time: 65_157 nanoseconds.
		Weight::from_ref_time(66_309_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Governance Members (r:1 w:0)
	// Storage: Governance Proposals (r:1 w:1)
	// Storage: Governance ExecutionPipeline (r:1 w:1)
	// Storage: Governance ActiveProposals (r:1 w:1)
	fn approve() -> Weight {
		// Minimum execution time: 51_298 nanoseconds.
		Weight::from_ref_time(52_533_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Governance Members (r:0 w:1)
	fn new_membership_set() -> Weight {
		// Minimum execution time: 9_440 nanoseconds.
		Weight::from_ref_time(9_940_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: System Digest (r:1 w:1)
	// Storage: unknown [0x3a636f6465] (r:0 w:1)
	fn call_as_sudo() -> Weight {
		// Minimum execution time: 33_139 nanoseconds.
		Weight::from_ref_time(34_043_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance ExecutionPipeline (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `b` is `[1, 100]`.
	fn on_initialize(b: u32, ) -> Weight {
		// Minimum execution time: 6_817 nanoseconds.
		Weight::from_ref_time(13_832_131)
			// Standard Error: 6_796
			.saturating_add(Weight::from_ref_time(1_060_560).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance ExecutionPipeline (r:1 w:0)
	fn on_initialize_best_case() -> Weight {
		// Minimum execution time: 6_683 nanoseconds.
		Weight::from_ref_time(6_955_000)
			.saturating_add(RocksDbWeight::get().reads(2))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance Proposals (r:0 w:5)
	/// The range of component `b` is `[1, 100]`.
	fn expire_proposals(b: u32, ) -> Weight {
		// Minimum execution time: 5_430 nanoseconds.
		Weight::from_ref_time(12_710_362)
			// Standard Error: 14_954
			.saturating_add(Weight::from_ref_time(6_549_823).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
	}
	// Storage: Governance GovKeyWhitelistedCallHash (r:0 w:1)
	fn set_whitelisted_call_hash() -> Weight {
		// Minimum execution time: 24_805 nanoseconds.
		Weight::from_ref_time(25_224_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Governance NextGovKeyCallHashNonce (r:1 w:1)
	// Storage: Governance GovKeyWhitelistedCallHash (r:1 w:1)
	// Storage: Governance Members (r:0 w:1)
	fn submit_govkey_call() -> Weight {
		// Minimum execution time: 45_719 nanoseconds.
		Weight::from_ref_time(48_266_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}
