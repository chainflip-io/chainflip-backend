//! Autogenerated weights for pallet_cf_governance
//!
//! THIS FILE WAS AUTO-GENERATED USING CHAINFLIP NODE BENCHMARK CMD VERSION 4.0.0-dev
//! DATE: 2022-06-03, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_governance
// --extrinsic
// *
// --output
// state-chain/pallets/cf-governance/src/weights.rs
// --execution=wasm
// --steps=50
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_governance.
pub trait WeightInfo {
	fn propose_governance_extrinsic() -> Weight;
	fn approve() -> Weight;
	fn new_membership_set() -> Weight;
	fn call_as_sudo() -> Weight;
	fn on_initialize(b: u32, ) -> Weight;
	fn on_initialize_best_case() -> Weight;
	fn expire_proposals(b: u32, ) -> Weight;
}

/// Weights for pallet_cf_governance using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Governance Members (r:1 w:0)
	// Storage: Governance ProposalIdCounter (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Governance ExpiryTime (r:1 w:0)
	// Storage: Governance ActiveProposals (r:1 w:1)
	// Storage: Governance Proposals (r:0 w:1)
	fn propose_governance_extrinsic() -> Weight {
		(35_701_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Governance Members (r:1 w:0)
	// Storage: Governance Proposals (r:1 w:1)
	// Storage: Governance ExecutionPipeline (r:1 w:1)
	// Storage: Governance ActiveProposals (r:1 w:1)
	fn approve() -> Weight {
		(43_700_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Governance Members (r:0 w:1)
	fn new_membership_set() -> Weight {
		(2_200_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Digest (r:1 w:1)
	// Storage: unknown [0x3a636f6465] (r:0 w:1)
	fn call_as_sudo() -> Weight {
		(22_700_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance ExecutionPipeline (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn on_initialize(b: u32, ) -> Weight {
		(12_239_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((970_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance ExecutionPipeline (r:1 w:0)
	fn on_initialize_best_case() -> Weight {
		(5_500_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance Proposals (r:0 w:1)
	fn expire_proposals(b: u32, ) -> Weight {
		(9_412_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_380_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Governance Members (r:1 w:0)
	// Storage: Governance ProposalIdCounter (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Governance ExpiryTime (r:1 w:0)
	// Storage: Governance ActiveProposals (r:1 w:1)
	// Storage: Governance Proposals (r:0 w:1)
	fn propose_governance_extrinsic() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(35_701_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Governance Members (r:1 w:0)
	// Storage: Governance Proposals (r:1 w:1)
	// Storage: Governance ExecutionPipeline (r:1 w:1)
	// Storage: Governance ActiveProposals (r:1 w:1)
	fn approve() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(43_700_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Governance Members (r:0 w:1)
	fn new_membership_set() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(2_200_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Digest (r:1 w:1)
	// Storage: unknown [0x3a636f6465] (r:0 w:1)
	fn call_as_sudo() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(22_700_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance ExecutionPipeline (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn on_initialize(b: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(12_239_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((970_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance ExecutionPipeline (r:1 w:0)
	fn on_initialize_best_case() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(5_500_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	// Storage: Governance ActiveProposals (r:1 w:0)
	// Storage: Governance Proposals (r:0 w:1)
	fn expire_proposals(b: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(9_412_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_380_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
	}
}
