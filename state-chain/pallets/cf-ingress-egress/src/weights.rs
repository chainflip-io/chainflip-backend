
//! Autogenerated weights for pallet_cf_ingress_egress
//!
//! THIS FILE WAS AUTO-GENERATED USING THE CHAINFLIP BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-20, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `wagmi.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/production/chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_ingress_egress
// --extrinsic
// *
// --output
// state-chain/pallets/cf-ingress-egress/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_ingress_egress.
pub trait WeightInfo {
	fn egress_assets(n: u32, ) -> Weight;
	fn disable_asset_egress() -> Weight;
	fn on_idle_with_nothing_to_send() -> Weight;
	fn do_single_ingress() -> Weight;
}

/// Weights for pallet_cf_ingress_egress using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: EthereumIngressEgress ScheduledEgressRequests (r:1 w:1)
	// Storage: EthereumIngressEgress DisabledEgressAssets (r:1 w:0)
	// Storage: Environment EthereumKeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSignatureNonce (r:1 w:1)
	// Storage: EthereumBroadcaster BroadcastIdCounter (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	/// The range of component `n` is `[1, 254]`.
	fn egress_assets(n: u32, ) -> Weight {
		// Minimum execution time: 69_000 nanoseconds.
		Weight::from_ref_time(71_238_142)
			// Standard Error: 7_861
			.saturating_add(Weight::from_ref_time(1_400_198).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: EthereumIngressEgress DisabledEgressAssets (r:0 w:1)
	fn disable_asset_egress() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(11_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthereumIngressEgress ScheduledEgressRequests (r:1 w:0)
	fn on_idle_with_nothing_to_send() -> Weight {
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(6_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: EthereumIngressEgress IntentIngressDetails (r:1 w:0)
	// Storage: EthereumIngressEgress ScheduledEgressRequests (r:1 w:1)
	// Storage: EthereumIngressEgress IntentActions (r:1 w:0)
	// Storage: LiquidityProvider FreeBalances (r:1 w:1)
	fn do_single_ingress() -> Weight {
		// Minimum execution time: 75_000 nanoseconds.
		Weight::from_ref_time(77_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthereumIngressEgress ScheduledEgressRequests (r:1 w:1)
	// Storage: EthereumIngressEgress DisabledEgressAssets (r:1 w:0)
	// Storage: Environment EthereumKeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment EthereumSignatureNonce (r:1 w:1)
	// Storage: EthereumBroadcaster BroadcastIdCounter (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumVault CurrentVaultEpochAndState (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	/// The range of component `n` is `[1, 254]`.
	fn egress_assets(n: u32, ) -> Weight {
		// Minimum execution time: 69_000 nanoseconds.
		Weight::from_ref_time(71_238_142)
			// Standard Error: 7_861
			.saturating_add(Weight::from_ref_time(1_400_198).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	// Storage: EthereumIngressEgress DisabledEgressAssets (r:0 w:1)
	fn disable_asset_egress() -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_ref_time(11_000_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthereumIngressEgress ScheduledEgressRequests (r:1 w:0)
	fn on_idle_with_nothing_to_send() -> Weight {
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(6_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: EthereumIngressEgress IntentIngressDetails (r:1 w:0)
	// Storage: EthereumIngressEgress ScheduledEgressRequests (r:1 w:1)
	// Storage: EthereumIngressEgress IntentActions (r:1 w:0)
	// Storage: LiquidityProvider FreeBalances (r:1 w:1)
	fn do_single_ingress() -> Weight {
		// Minimum execution time: 75_000 nanoseconds.
		Weight::from_ref_time(77_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}
