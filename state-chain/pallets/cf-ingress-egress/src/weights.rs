
//! Autogenerated weights for pallet_cf_ingress_egress
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-13, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `JamiesM1.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_ingress-egress
// --output
// state-chain/pallets/cf-ingress-egress/src/weights.rs
// --steps=20
// --repeat=20
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_ingress_egress.
pub trait WeightInfo {
	fn disable_asset_egress() -> Weight;
	fn process_single_deposit() -> Weight;
	fn finalise_ingress(a: u32, ) -> Weight;
	fn vault_transfer_failed() -> Weight;
	fn ccm_broadcast_failed() -> Weight;
	fn clear_prewitnessed_deposits(n: u32, ) -> Weight;
}

/// Weights for pallet_cf_ingress_egress using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `EthereumIngressEgress::DisabledEgressAssets` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DisabledEgressAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn disable_asset_egress() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `101`
		//  Estimated: `3566`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3566)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MinimumDeposit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MinimumDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::WithheldTransactionFees` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::WithheldTransactionFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositBalances` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn process_single_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `442`
		//  Estimated: `3907`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(45_000_000, 3907)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 100]`.
	fn finalise_ingress(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234`
		//  Estimated: `3699`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(5_501_670, 3699)
			// Standard Error: 4_413
			.saturating_add(Weight::from_parts(2_264_502, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumSignatureNonce` (r:1 w:1)
	/// Proof: `Environment::EthereumSignatureNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumChainId` (r:1 w:0)
	/// Proof: `Environment::EthereumChainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumKeyManagerAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumKeyManagerAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumBroadcaster::BroadcastIdCounter` (r:1 w:1)
	/// Proof: `EthereumBroadcaster::BroadcastIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::ThresholdSignatureRequestIdCounter` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::ThresholdSignatureRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::FailedForeignChainCalls` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::FailedForeignChainCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::Signature` (r:0 w:1)
	/// Proof: `EthereumThresholdSigner::Signature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::PendingCeremonies` (r:0 w:1)
	/// Proof: `EthereumThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::RequestCallback` (r:0 w:1)
	/// Proof: `EthereumThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vault_transfer_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1610`
		//  Estimated: `12500`
		// Minimum execution time: 101_000_000 picoseconds.
		Weight::from_parts(103_000_000, 12500)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::FailedForeignChainCalls` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::FailedForeignChainCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ccm_broadcast_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460`
		//  Estimated: `3925`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3925)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:254 w:254)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 255]`.
	fn clear_prewitnessed_deposits(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140 + n * (51 ±0)`
		//  Estimated: `1130 + n * (2527 ±0)`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(167_952, 1130)
			// Standard Error: 4_550
			.saturating_add(Weight::from_parts(1_059_270, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2527).saturating_mul(n.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `EthereumIngressEgress::DisabledEgressAssets` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DisabledEgressAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn disable_asset_egress() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `101`
		//  Estimated: `3566`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3566)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MinimumDeposit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MinimumDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::WithheldTransactionFees` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::WithheldTransactionFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositBalances` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn process_single_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `442`
		//  Estimated: `3907`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(45_000_000, 3907)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 100]`.
	fn finalise_ingress(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234`
		//  Estimated: `3699`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(5_501_670, 3699)
			// Standard Error: 4_413
			.saturating_add(Weight::from_parts(2_264_502, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumSignatureNonce` (r:1 w:1)
	/// Proof: `Environment::EthereumSignatureNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumChainId` (r:1 w:0)
	/// Proof: `Environment::EthereumChainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumKeyManagerAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumKeyManagerAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumBroadcaster::BroadcastIdCounter` (r:1 w:1)
	/// Proof: `EthereumBroadcaster::BroadcastIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::ThresholdSignatureRequestIdCounter` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::ThresholdSignatureRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::FailedForeignChainCalls` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::FailedForeignChainCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::Signature` (r:0 w:1)
	/// Proof: `EthereumThresholdSigner::Signature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::PendingCeremonies` (r:0 w:1)
	/// Proof: `EthereumThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::RequestCallback` (r:0 w:1)
	/// Proof: `EthereumThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vault_transfer_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1610`
		//  Estimated: `12500`
		// Minimum execution time: 101_000_000 picoseconds.
		Weight::from_parts(103_000_000, 12500)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::FailedForeignChainCalls` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::FailedForeignChainCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ccm_broadcast_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460`
		//  Estimated: `3925`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3925)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:254 w:254)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 255]`.
	fn clear_prewitnessed_deposits(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140 + n * (51 ±0)`
		//  Estimated: `1130 + n * (2527 ±0)`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(167_952, 1130)
			// Standard Error: 4_550
			.saturating_add(Weight::from_parts(1_059_270, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2527).saturating_mul(n.into()))
	}
}
