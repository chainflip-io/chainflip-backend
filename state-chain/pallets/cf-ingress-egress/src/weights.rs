
//! Autogenerated weights for pallet_cf_ingress_egress
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-06-03, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-0-210`, CPU: `Intel(R) Xeon(R) Platinum 8124M CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_ingress_egress
// --extrinsic
// *
// --output
// state-chain/pallets/cf-ingress-egress/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_ingress_egress.
pub trait WeightInfo {
	fn disable_asset_egress() -> Weight;
	fn process_single_deposit() -> Weight;
	fn finalise_ingress(a: u32, ) -> Weight;
	fn vault_transfer_failed() -> Weight;
	fn ccm_broadcast_failed() -> Weight;
	fn add_boost_funds() -> Weight;
	fn on_lost_deposit(n: u32, ) -> Weight;
	fn stop_boosting() -> Weight;
	fn deposit_boosted() -> Weight;
	fn boost_finalised() -> Weight;
	fn clear_prewitnessed_deposits(n: u32, ) -> Weight;
	fn create_boost_pools() -> Weight;
}

/// Weights for pallet_cf_ingress_egress using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `EthereumIngressEgress::DisabledEgressAssets` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DisabledEgressAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn disable_asset_egress() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `135`
		//  Estimated: `3600`
		// Minimum execution time: 12_086_000 picoseconds.
		Weight::from_parts(13_118_000, 3600)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MinimumDeposit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MinimumDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:2 w:1)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::FeeMultiplier` (r:1 w:0)
	/// Proof: `EthereumChainTracking::FeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::WithheldTransactionFees` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::WithheldTransactionFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositBalances` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn process_single_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `544`
		//  Estimated: `6484`
		// Minimum execution time: 61_949_000 picoseconds.
		Weight::from_parts(70_197_000, 6484)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 100]`.
	fn finalise_ingress(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `269`
		//  Estimated: `3734`
		// Minimum execution time: 2_089_000 picoseconds.
		Weight::from_parts(6_984_397, 3734)
			// Standard Error: 5_615
			.saturating_add(Weight::from_parts(1_944_985, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumSignatureNonce` (r:1 w:1)
	/// Proof: `Environment::EthereumSignatureNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumChainId` (r:1 w:0)
	/// Proof: `Environment::EthereumChainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumKeyManagerAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumKeyManagerAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumBroadcaster::BroadcastIdCounter` (r:1 w:1)
	/// Proof: `EthereumBroadcaster::BroadcastIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EvmThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::ThresholdSignatureRequestIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::ThresholdSignatureRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::FailedForeignChainCalls` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::FailedForeignChainCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Signature` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::Signature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingCeremonies` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::RequestCallback` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vault_transfer_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1662`
		//  Estimated: `12552`
		// Minimum execution time: 107_962_000 picoseconds.
		Weight::from_parts(109_506_000, 12552)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::FailedForeignChainCalls` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::FailedForeignChainCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ccm_broadcast_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3946`
		// Minimum execution time: 17_506_000 picoseconds.
		Weight::from_parts(18_203_000, 3946)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_boost_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1282`
		//  Estimated: `4747`
		// Minimum execution time: 39_068_000 picoseconds.
		Weight::from_parts(39_746_000, 4747)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn on_lost_deposit(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410 + n * (105 ±0)`
		//  Estimated: `3874 + n * (105 ±0)`
		// Minimum execution time: 14_797_000 picoseconds.
		Weight::from_parts(15_457_944, 3874)
			// Standard Error: 3_292
			.saturating_add(Weight::from_parts(699_861, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 105).saturating_mul(n.into()))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_boosting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5185`
		//  Estimated: `8650`
		// Minimum execution time: 77_033_000 picoseconds.
		Weight::from_parts(78_002_000, 8650)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumIngressEgress::MinimumDeposit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MinimumDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::PrewitnessedDepositIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::PrewitnessedDepositIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::BoostPools` (r:2 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::FeeMultiplier` (r:1 w:0)
	/// Proof: `EthereumChainTracking::FeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::WithheldTransactionFees` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::WithheldTransactionFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositBalances` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:0 w:1)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deposit_boosted() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5808`
		//  Estimated: `11748`
		// Minimum execution time: 142_187_000 picoseconds.
		Weight::from_parts(143_835_000, 11748)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MinimumDeposit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MinimumDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositBalances` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:30 w:30)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn boost_finalised() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `15549`
		//  Estimated: `90789`
		// Minimum execution time: 353_724_000 picoseconds.
		Weight::from_parts(361_780_000, 90789)
			.saturating_add(T::DbWeight::get().reads(37_u64))
			.saturating_add(T::DbWeight::get().writes(35_u64))
	}
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:255 w:254)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 255]`.
	fn clear_prewitnessed_deposits(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + n * (67 ±0)`
		//  Estimated: `3637 + n * (2543 ±0)`
		// Minimum execution time: 16_300_000 picoseconds.
		Weight::from_parts(322_893, 3637)
			// Standard Error: 16_640
			.saturating_add(Weight::from_parts(4_615_723, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_boost_pools() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `135`
		//  Estimated: `3600`
		// Minimum execution time: 12_224_000 picoseconds.
		Weight::from_parts(12_631_000, 3600)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `EthereumIngressEgress::DisabledEgressAssets` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DisabledEgressAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn disable_asset_egress() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `135`
		//  Estimated: `3600`
		// Minimum execution time: 12_086_000 picoseconds.
		Weight::from_parts(13_118_000, 3600)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MinimumDeposit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MinimumDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:2 w:1)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::FeeMultiplier` (r:1 w:0)
	/// Proof: `EthereumChainTracking::FeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::WithheldTransactionFees` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::WithheldTransactionFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositBalances` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn process_single_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `544`
		//  Estimated: `6484`
		// Minimum execution time: 61_949_000 picoseconds.
		Weight::from_parts(70_197_000, 6484)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 100]`.
	fn finalise_ingress(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `269`
		//  Estimated: `3734`
		// Minimum execution time: 2_089_000 picoseconds.
		Weight::from_parts(6_984_397, 3734)
			// Standard Error: 5_615
			.saturating_add(Weight::from_parts(1_944_985, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumSignatureNonce` (r:1 w:1)
	/// Proof: `Environment::EthereumSignatureNonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumChainId` (r:1 w:0)
	/// Proof: `Environment::EthereumChainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumKeyManagerAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumKeyManagerAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumBroadcaster::BroadcastIdCounter` (r:1 w:1)
	/// Proof: `EthereumBroadcaster::BroadcastIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EvmThresholdSigner::CurrentKeyEpoch` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::CurrentKeyEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Keys` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::ThresholdSignatureRequestIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::ThresholdSignatureRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:0)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `EvmThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `EvmThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CfeInterface::CfeEvents` (r:1 w:1)
	/// Proof: `CfeInterface::CfeEvents` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::FailedForeignChainCalls` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::FailedForeignChainCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::Signature` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::Signature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::PendingCeremonies` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EvmThresholdSigner::RequestCallback` (r:0 w:1)
	/// Proof: `EvmThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vault_transfer_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1662`
		//  Estimated: `12552`
		// Minimum execution time: 107_962_000 picoseconds.
		Weight::from_parts(109_506_000, 12552)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::FailedForeignChainCalls` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::FailedForeignChainCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ccm_broadcast_failed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3946`
		// Minimum execution time: 17_506_000 picoseconds.
		Weight::from_parts(18_203_000, 3946)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_boost_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1282`
		//  Estimated: `4747`
		// Minimum execution time: 39_068_000 picoseconds.
		Weight::from_parts(39_746_000, 4747)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn on_lost_deposit(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410 + n * (105 ±0)`
		//  Estimated: `3874 + n * (105 ±0)`
		// Minimum execution time: 14_797_000 picoseconds.
		Weight::from_parts(15_457_944, 3874)
			// Standard Error: 3_292
			.saturating_add(Weight::from_parts(699_861, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 105).saturating_mul(n.into()))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_boosting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5185`
		//  Estimated: `8650`
		// Minimum execution time: 77_033_000 picoseconds.
		Weight::from_parts(78_002_000, 8650)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumIngressEgress::MinimumDeposit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MinimumDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::PrewitnessedDepositIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::PrewitnessedDepositIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::BoostPools` (r:2 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::FeeMultiplier` (r:1 w:0)
	/// Proof: `EthereumChainTracking::FeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::WithheldTransactionFees` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::WithheldTransactionFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositBalances` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:0 w:1)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deposit_boosted() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5808`
		//  Estimated: `11748`
		// Minimum execution time: 142_187_000 picoseconds.
		Weight::from_parts(143_835_000, 11748)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MinimumDeposit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MinimumDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositBalances` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:30 w:30)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn boost_finalised() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `15549`
		//  Estimated: `90789`
		// Minimum execution time: 353_724_000 picoseconds.
		Weight::from_parts(361_780_000, 90789)
			.saturating_add(RocksDbWeight::get().reads(37_u64))
			.saturating_add(RocksDbWeight::get().writes(35_u64))
	}
	/// Storage: `EthereumIngressEgress::PrewitnessedDeposits` (r:255 w:254)
	/// Proof: `EthereumIngressEgress::PrewitnessedDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 255]`.
	fn clear_prewitnessed_deposits(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + n * (67 ±0)`
		//  Estimated: `3637 + n * (2543 ±0)`
		// Minimum execution time: 16_300_000 picoseconds.
		Weight::from_parts(322_893, 3637)
			// Standard Error: 16_640
			.saturating_add(Weight::from_parts(4_615_723, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: `EthereumIngressEgress::BoostPools` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::BoostPools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_boost_pools() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `135`
		//  Estimated: `3600`
		// Minimum execution time: 12_224_000 picoseconds.
		Weight::from_parts(12_631_000, 3600)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
