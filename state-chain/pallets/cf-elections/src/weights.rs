
//! Autogenerated weights for pallet_cf_elections
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-21, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `wagmi.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_elections
// --extrinsic
// *
// --output
// state-chain/pallets/cf-elections/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_elections.
pub trait WeightInfo {
	fn vote(n: u32) -> Weight;
	fn provide_shared_data() -> Weight;
	fn stop_ignoring_my_votes() -> Weight;
	fn ignore_my_votes() -> Weight;
	fn recheck_contributed_to_consensuses() -> Weight;
}

/// Weights for pallet_cf_elections using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	fn vote(_n: u32) -> Weight{
		Default::default()
	}
	fn provide_shared_data() -> Weight{
        Default::default()
    }
	fn stop_ignoring_my_votes() -> Weight{
		Default::default()
	}
	fn ignore_my_votes() -> Weight{
		Default::default()
	}
	fn recheck_contributed_to_consensuses() -> Weight{
		Default::default()
	}}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn vote(_n: u32) -> Weight{
		Default::default()
	}
	fn provide_shared_data() -> Weight{
        Default::default()
    }
	fn stop_ignoring_my_votes() -> Weight{
		Default::default()
	}
	fn ignore_my_votes() -> Weight        Default::default()
		Default::default()
	}
	fn recheck_contributed_to_consensuses() -> Weight    }
		Default::default()
	}

}
