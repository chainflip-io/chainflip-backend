
//! Autogenerated weights for pallet_cf_elections
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-23, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `chainflip-benchmark-runner`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_elections
// --extrinsic
// *
// --output
// state-chain/pallets/cf-elections/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_elections.
pub trait WeightInfo {
	fn vote(n: u32, ) -> Weight;
	fn stop_ignoring_my_votes() -> Weight;
	fn ignore_my_votes() -> Weight;
	fn recheck_contributed_to_consensuses() -> Weight;
	fn delete_vote() -> Weight;
	fn provide_shared_data() -> Weight;
	fn initialize() -> Weight;
	fn update_settings() -> Weight;
	fn set_shared_data_reference_lifetime() -> Weight;
	fn clear_election_votes() -> Weight;
	fn invalidate_election_consensus_cache() -> Weight;
	fn pause_elections() -> Weight;
	fn unpause_elections() -> Weight;
	fn validate_storage() -> Weight;
	fn clear_all_votes(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight;
}

/// Weights for pallet_cf_elections using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:1)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceLifetime` (r:1 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 10]`.
	fn vote(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1718`
		//  Estimated: `7658`
		// Minimum execution time: 73_200_000 picoseconds.
		Weight::from_parts(75_093_923, 7658)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:1)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_ignoring_my_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1422`
		//  Estimated: `4887`
		// Minimum execution time: 35_532_000 picoseconds.
		Weight::from_parts(36_012_000, 4887)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ignore_my_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1422`
		//  Estimated: `4887`
		// Minimum execution time: 29_190_000 picoseconds.
		Weight::from_parts(29_531_000, 4887)
			.saturating_add(T::DbWeight::get().reads(5_u64))
	}
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:2 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:1 w:0)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn recheck_contributed_to_consensuses() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `543`
		//  Estimated: `6483`
		// Minimum execution time: 24_223_000 picoseconds.
		Weight::from_parts(24_822_000, 6483)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:1)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delete_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1978`
		//  Estimated: `7918`
		// Minimum execution time: 66_355_000 picoseconds.
		Weight::from_parts(67_103_000, 7918)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn provide_shared_data() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1671`
		//  Estimated: `7611`
		// Minimum execution time: 43_850_000 picoseconds.
		Weight::from_parts(44_707_000, 7611)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:0)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedSettings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralSettings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedState` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `251`
		//  Estimated: `1736`
		// Minimum execution time: 10_894_000 picoseconds.
		Weight::from_parts(11_337_000, 1736)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:0)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedSettings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralSettings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_settings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `1690`
		// Minimum execution time: 9_656_000 picoseconds.
		Weight::from_parts(10_126_000, 1690)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceLifetime` (r:0 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_shared_data_reference_lifetime() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271`
		//  Estimated: `1756`
		// Minimum execution time: 6_758_000 picoseconds.
		Weight::from_parts(6_995_000, 1756)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:151 w:150)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn clear_election_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `11562`
		//  Estimated: `386277`
		// Minimum execution time: 1_139_944_000 picoseconds.
		Weight::from_parts(1_174_891_000, 386277)
			.saturating_add(T::DbWeight::get().reads(156_u64))
			.saturating_add(T::DbWeight::get().writes(153_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn invalidate_election_consensus_cache() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `484`
		//  Estimated: `3949`
		// Minimum execution time: 22_376_000 picoseconds.
		Weight::from_parts(23_078_000, 3949)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn pause_elections() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331`
		//  Estimated: `1816`
		// Minimum execution time: 8_765_000 picoseconds.
		Weight::from_parts(9_033_000, 1816)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:1 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:1 w:0)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unpause_elections() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `797`
		//  Estimated: `4262`
		// Minimum execution time: 28_095_000 picoseconds.
		Weight::from_parts(28_475_000, 4262)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn validate_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `332`
		//  Estimated: `1817`
		// Minimum execution time: 8_591_000 picoseconds.
		Weight::from_parts(8_725_000, 1817)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:10 w:10)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:10 w:10)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:10 w:10)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:10 w:10)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 10]`.
	/// The range of component `c` is `[1, 10]`.
	/// The range of component `d` is `[1, 10]`.
	/// The range of component `e` is `[1, 10]`.
	fn clear_all_votes(a: u32, b: u32, _c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `413 + a * (66 ±0) + b * (46 ±0) + d * (86 ±0) + e * (24 ±0)`
		//  Estimated: `1897 + a * (2541 ±0) + b * (2522 ±0) + d * (2561 ±0) + e * (2499 ±0)`
		// Minimum execution time: 70_180_000 picoseconds.
		Weight::from_parts(40_819_914, 1897)
			// Standard Error: 12_350
			.saturating_add(Weight::from_parts(1_012_536, 0).saturating_mul(a.into()))
			// Standard Error: 12_350
			.saturating_add(Weight::from_parts(1_144_980, 0).saturating_mul(b.into()))
			// Standard Error: 12_350
			.saturating_add(Weight::from_parts(1_089_096, 0).saturating_mul(d.into()))
			// Standard Error: 12_350
			.saturating_add(Weight::from_parts(889_835, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(e.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_parts(0, 2541).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2522).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 2561).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 2499).saturating_mul(e.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:1)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceLifetime` (r:1 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 10]`.
	fn vote(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1718`
		//  Estimated: `7658`
		// Minimum execution time: 73_200_000 picoseconds.
		Weight::from_parts(75_093_923, 7658)
			.saturating_add(ParityDbWeight::get().reads(11_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:1)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_ignoring_my_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1422`
		//  Estimated: `4887`
		// Minimum execution time: 35_532_000 picoseconds.
		Weight::from_parts(36_012_000, 4887)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ignore_my_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1422`
		//  Estimated: `4887`
		// Minimum execution time: 29_190_000 picoseconds.
		Weight::from_parts(29_531_000, 4887)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
	}
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:2 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:1 w:0)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn recheck_contributed_to_consensuses() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `543`
		//  Estimated: `6483`
		// Minimum execution time: 24_223_000 picoseconds.
		Weight::from_parts(24_822_000, 6483)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:1)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delete_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1978`
		//  Estimated: `7918`
		// Minimum execution time: 66_355_000 picoseconds.
		Weight::from_parts(67_103_000, 7918)
			.saturating_add(ParityDbWeight::get().reads(10_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn provide_shared_data() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1671`
		//  Estimated: `7611`
		// Minimum execution time: 43_850_000 picoseconds.
		Weight::from_parts(44_707_000, 7611)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:0)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedSettings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralSettings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedState` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `251`
		//  Estimated: `1736`
		// Minimum execution time: 10_894_000 picoseconds.
		Weight::from_parts(11_337_000, 1736)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:0)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedSettings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralSettings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_settings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `1690`
		// Minimum execution time: 9_656_000 picoseconds.
		Weight::from_parts(10_126_000, 1690)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceLifetime` (r:0 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_shared_data_reference_lifetime() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271`
		//  Estimated: `1756`
		// Minimum execution time: 6_758_000 picoseconds.
		Weight::from_parts(6_995_000, 1756)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:151 w:150)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn clear_election_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `11562`
		//  Estimated: `386277`
		// Minimum execution time: 1_139_944_000 picoseconds.
		Weight::from_parts(1_174_891_000, 386277)
			.saturating_add(ParityDbWeight::get().reads(156_u64))
			.saturating_add(ParityDbWeight::get().writes(153_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn invalidate_election_consensus_cache() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `484`
		//  Estimated: `3949`
		// Minimum execution time: 22_376_000 picoseconds.
		Weight::from_parts(23_078_000, 3949)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn pause_elections() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331`
		//  Estimated: `1816`
		// Minimum execution time: 8_765_000 picoseconds.
		Weight::from_parts(9_033_000, 1816)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:1 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:1 w:0)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unpause_elections() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `797`
		//  Estimated: `4262`
		// Minimum execution time: 28_095_000 picoseconds.
		Weight::from_parts(28_475_000, 4262)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn validate_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `332`
		//  Estimated: `1817`
		// Minimum execution time: 8_591_000 picoseconds.
		Weight::from_parts(8_725_000, 1817)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:10 w:10)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:10 w:10)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:10 w:10)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:10 w:10)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 10]`.
	/// The range of component `c` is `[1, 10]`.
	/// The range of component `d` is `[1, 10]`.
	/// The range of component `e` is `[1, 10]`.
	fn clear_all_votes(a: u32, b: u32, _c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `413 + a * (66 ±0) + b * (46 ±0) + d * (86 ±0) + e * (24 ±0)`
		//  Estimated: `1897 + a * (2541 ±0) + b * (2522 ±0) + d * (2561 ±0) + e * (2499 ±0)`
		// Minimum execution time: 70_180_000 picoseconds.
		Weight::from_parts(40_819_914, 1897)
			// Standard Error: 12_350
			.saturating_add(Weight::from_parts(1_012_536, 0).saturating_mul(a.into()))
			// Standard Error: 12_350
			.saturating_add(Weight::from_parts(1_144_980, 0).saturating_mul(b.into()))
			// Standard Error: 12_350
			.saturating_add(Weight::from_parts(1_089_096, 0).saturating_mul(d.into()))
			// Standard Error: 12_350
			.saturating_add(Weight::from_parts(889_835, 0).saturating_mul(e.into()))
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(e.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_parts(0, 2541).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2522).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 2561).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 2499).saturating_mul(e.into()))
	}
}
