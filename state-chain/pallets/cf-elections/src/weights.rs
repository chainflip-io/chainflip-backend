
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_elections
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-09-11, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `chainflip-benchmark-runner`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_elections
// --extrinsic
// *
// --output
// state-chain/pallets/cf-elections/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_elections.
pub trait WeightInfo {
	fn vote(n: u32, ) -> Weight;
	fn stop_ignoring_my_votes() -> Weight;
	fn ignore_my_votes() -> Weight;
	fn recheck_contributed_to_consensuses() -> Weight;
	fn delete_vote() -> Weight;
	fn provide_shared_data() -> Weight;
	fn initialize() -> Weight;
	fn update_settings() -> Weight;
	fn set_shared_data_reference_lifetime() -> Weight;
	fn clear_election_votes() -> Weight;
	fn invalidate_election_consensus_cache() -> Weight;
	fn pause_elections() -> Weight;
	fn unpause_elections() -> Weight;
	fn validate_storage() -> Weight;
	fn clear_all_votes(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight;
	fn test_mismatch() -> Weight;
}

/// Weights for pallet_cf_elections using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 10]`.
	fn vote(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1617`
		//  Estimated: `5082`
		// Minimum execution time: 55_783_000 picoseconds.
		Weight::from_parts(57_601_247, 5082)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:1)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_ignoring_my_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1346`
		//  Estimated: `4811`
		// Minimum execution time: 35_344_000 picoseconds.
		Weight::from_parts(35_672_000, 4811)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ignore_my_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1346`
		//  Estimated: `4811`
		// Minimum execution time: 28_800_000 picoseconds.
		Weight::from_parts(29_305_000, 4811)
			.saturating_add(T::DbWeight::get().reads(5_u64))
	}
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:2 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn recheck_contributed_to_consensuses() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `6374`
		// Minimum execution time: 19_080_000 picoseconds.
		Weight::from_parts(19_464_000, 6374)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delete_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1655`
		//  Estimated: `5120`
		// Minimum execution time: 47_966_000 picoseconds.
		Weight::from_parts(48_422_000, 5120)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn provide_shared_data() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1572`
		//  Estimated: `7512`
		// Minimum execution time: 44_728_000 picoseconds.
		Weight::from_parts(45_108_000, 7512)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:0)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedSettings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralSettings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedState` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceLifetime` (r:0 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `1743`
		// Minimum execution time: 12_591_000 picoseconds.
		Weight::from_parts(12_748_000, 1743)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:0)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedSettings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralSettings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_settings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `226`
		//  Estimated: `1711`
		// Minimum execution time: 10_555_000 picoseconds.
		Weight::from_parts(10_745_000, 1711)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceLifetime` (r:0 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_shared_data_reference_lifetime() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `278`
		//  Estimated: `1763`
		// Minimum execution time: 7_939_000 picoseconds.
		Weight::from_parts(8_183_000, 1763)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn clear_election_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `554`
		//  Estimated: `4019`
		// Minimum execution time: 36_735_000 picoseconds.
		Weight::from_parts(37_736_000, 4019)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn invalidate_election_consensus_cache() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `513`
		//  Estimated: `3978`
		// Minimum execution time: 22_540_000 picoseconds.
		Weight::from_parts(23_435_000, 3978)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn pause_elections() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340`
		//  Estimated: `1825`
		// Minimum execution time: 9_774_000 picoseconds.
		Weight::from_parts(9_995_000, 1825)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:1 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:1 w:0)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unpause_elections() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `846`
		//  Estimated: `4311`
		// Minimum execution time: 29_282_000 picoseconds.
		Weight::from_parts(29_440_000, 4311)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn validate_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `1826`
		// Minimum execution time: 9_585_000 picoseconds.
		Weight::from_parts(9_834_000, 1826)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:10 w:10)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:10 w:10)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:10 w:10)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:10 w:10)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 10]`.
	/// The range of component `c` is `[1, 10]`.
	/// The range of component `d` is `[1, 10]`.
	/// The range of component `e` is `[1, 10]`.
	fn clear_all_votes(a: u32, b: u32, _c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422 + a * (66 ±0) + b * (38 ±0) + d * (56 ±0) + e * (24 ±0)`
		//  Estimated: `1907 + a * (2541 ±0) + b * (2513 ±0) + d * (2531 ±0) + e * (2499 ±0)`
		// Minimum execution time: 71_128_000 picoseconds.
		Weight::from_parts(41_291_896, 1907)
			// Standard Error: 9_853
			.saturating_add(Weight::from_parts(1_016_486, 0).saturating_mul(a.into()))
			// Standard Error: 9_853
			.saturating_add(Weight::from_parts(1_110_530, 0).saturating_mul(b.into()))
			// Standard Error: 9_853
			.saturating_add(Weight::from_parts(1_098_828, 0).saturating_mul(d.into()))
			// Standard Error: 9_853
			.saturating_add(Weight::from_parts(927_836, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(e.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_parts(0, 2541).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2513).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 2499).saturating_mul(e.into()))
	}
	fn test_mismatch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 203_000 picoseconds.
		Weight::from_parts(230_000, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 10]`.
	fn vote(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1617`
		//  Estimated: `5082`
		// Minimum execution time: 55_783_000 picoseconds.
		Weight::from_parts(57_601_247, 5082)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:1)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn stop_ignoring_my_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1346`
		//  Estimated: `4811`
		// Minimum execution time: 35_344_000 picoseconds.
		Weight::from_parts(35_672_000, 4811)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ignore_my_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1346`
		//  Estimated: `4811`
		// Minimum execution time: 28_800_000 picoseconds.
		Weight::from_parts(29_305_000, 4811)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
	}
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:2 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn recheck_contributed_to_consensuses() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `6374`
		// Minimum execution time: 19_080_000 picoseconds.
		Weight::from_parts(19_464_000, 6374)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ContributingAuthorities` (r:1 w:0)
	/// Proof: `SolanaElections::ContributingAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delete_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1655`
		//  Estimated: `5120`
		// Minimum execution time: 47_966_000 picoseconds.
		Weight::from_parts(48_422_000, 5120)
			.saturating_add(ParityDbWeight::get().reads(8_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::AuthorityIndex` (r:1 w:0)
	/// Proof: `Validator::AuthorityIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:2 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:0 w:1)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn provide_shared_data() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1572`
		//  Estimated: `7512`
		// Minimum execution time: 44_728_000 picoseconds.
		Weight::from_parts(45_108_000, 7512)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:0)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedSettings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralSettings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedState` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceLifetime` (r:0 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258`
		//  Estimated: `1743`
		// Minimum execution time: 12_591_000 picoseconds.
		Weight::from_parts(12_748_000, 1743)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::NextElectionIdentifier` (r:1 w:0)
	/// Proof: `SolanaElections::NextElectionIdentifier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralUnsynchronisedSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralUnsynchronisedSettings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectoralSettings` (r:0 w:1)
	/// Proof: `SolanaElections::ElectoralSettings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_settings() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `226`
		//  Estimated: `1711`
		// Minimum execution time: 10_555_000 picoseconds.
		Weight::from_parts(10_745_000, 1711)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceLifetime` (r:0 w:1)
	/// Proof: `SolanaElections::SharedDataReferenceLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_shared_data_reference_lifetime() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `278`
		//  Estimated: `1763`
		// Minimum execution time: 7_939_000 picoseconds.
		Weight::from_parts(8_183_000, 1763)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:1)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn clear_election_votes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `554`
		//  Estimated: `4019`
		// Minimum execution time: 36_735_000 picoseconds.
		Weight::from_parts(37_736_000, 4019)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionProperties` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionProperties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:0 w:1)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn invalidate_election_consensus_cache() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `513`
		//  Estimated: `3978`
		// Minimum execution time: 22_540_000 picoseconds.
		Weight::from_parts(23_435_000, 3978)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn pause_elections() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340`
		//  Estimated: `1825`
		// Minimum execution time: 9_774_000 picoseconds.
		Weight::from_parts(9_995_000, 1825)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:1 w:0)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:1 w:0)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::BitmapComponents` (r:1 w:0)
	/// Proof: `SolanaElections::BitmapComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:1 w:0)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:1 w:0)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unpause_elections() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `846`
		//  Estimated: `4311`
		// Minimum execution time: 29_282_000 picoseconds.
		Weight::from_parts(29_440_000, 4311)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:1)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn validate_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341`
		//  Estimated: `1826`
		// Minimum execution time: 9_585_000 picoseconds.
		Weight::from_parts(9_834_000, 1826)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `SolanaElections::Status` (r:1 w:0)
	/// Proof: `SolanaElections::Status` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedDataReferenceCount` (r:10 w:10)
	/// Proof: `SolanaElections::SharedDataReferenceCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::SharedData` (r:10 w:10)
	/// Proof: `SolanaElections::SharedData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::IndividualComponents` (r:10 w:10)
	/// Proof: `SolanaElections::IndividualComponents` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SolanaElections::ElectionConsensusHistoryUpToDate` (r:10 w:10)
	/// Proof: `SolanaElections::ElectionConsensusHistoryUpToDate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 10]`.
	/// The range of component `c` is `[1, 10]`.
	/// The range of component `d` is `[1, 10]`.
	/// The range of component `e` is `[1, 10]`.
	fn clear_all_votes(a: u32, b: u32, _c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `422 + a * (66 ±0) + b * (38 ±0) + d * (56 ±0) + e * (24 ±0)`
		//  Estimated: `1907 + a * (2541 ±0) + b * (2513 ±0) + d * (2531 ±0) + e * (2499 ±0)`
		// Minimum execution time: 71_128_000 picoseconds.
		Weight::from_parts(41_291_896, 1907)
			// Standard Error: 9_853
			.saturating_add(Weight::from_parts(1_016_486, 0).saturating_mul(a.into()))
			// Standard Error: 9_853
			.saturating_add(Weight::from_parts(1_110_530, 0).saturating_mul(b.into()))
			// Standard Error: 9_853
			.saturating_add(Weight::from_parts(1_098_828, 0).saturating_mul(d.into()))
			// Standard Error: 9_853
			.saturating_add(Weight::from_parts(927_836, 0).saturating_mul(e.into()))
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(ParityDbWeight::get().reads((1_u64).saturating_mul(e.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_parts(0, 2541).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2513).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 2499).saturating_mul(e.into()))
	}
	fn test_mismatch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 203_000 picoseconds.
		Weight::from_parts(230_000, 0)
	}
}
