# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 361887c7f4d6875c0e996a87fd47f3daba0c0ecadc051e3c405eff0e8f988495 # shrinks to (OraclePriceTracker { chain_states: ExternalChainStates { solana: ExternalChainState { price: {} }, ethereum: ExternalChainState { price: {} } }, get_time: MockHook { state: ConstantHook { state: UnixTime { seconds: 0 }, _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::GetTimeHook>> }, call_history: [], _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::GetTimeHook>> } }, Right((PriceQuery { chain: Solana, assets: {BtcUsd: [], EthUsd: [], SolUsd: [], UsdcUsd: [], UsdtUsd: []} }, {BtcUsd: AssetResponse { timestamp: Aggregated { median: UnixTime { seconds: 1 }, iq_range: UnixTime { seconds: 0 }..=UnixTime { seconds: 0 } }, price: Aggregated { median: FractionImpl(6277101735386680763835789423207666416102355444464034512896), iq_range: FractionImpl(29578201015943982502409726510418817101357072194762492286117425329264814748041)..=FractionImpl(105054515153645272846041298456196641355686307750049628679153728188237377707030) } }})), OraclePriceSettings { solana: ExternalChainSettings { up_to_date_timeout: Seconds(5413795965), maybe_stale_timeout: Seconds(9530990417206586093), minimal_price_deviation: BasisPoints(42195) }, ethereum: ExternalChainSettings { up_to_date_timeout: Seconds(15874768130756413335), maybe_stale_timeout: Seconds(1985989658878772823), minimal_price_deviation: BasisPoints(46727) } })
cc e3cf12cc1a4b8c364295262b234fbf5ade9a0405779777d044c09ad902765991 # shrinks to (OraclePriceTracker { chain_states: ExternalChainStates { solana: ExternalChainState { price: {BtcUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 6216844619974757408 }, iq_range: UnixTime { seconds: 1549370755676477847 }..=UnixTime { seconds: 3439354499689442840 } }, price: Aggregated { median: Fraction(114332492267503296182291077008808855558237681903441797732048991410450792009870), iq_range: Fraction(2361756521834264179481270908670706864066887755202769787746213528938486457783)..=Fraction(35697626788505192893802910852221986263978004733472465833448493175084204879113) }, price_status: UpToDate, updated_at_statechain_block: 3958231470, minimal_price_deviation: BasisPoints(34241) }, EthUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 2033598662737845277 }, iq_range: UnixTime { seconds: 4479007735694815204 }..=UnixTime { seconds: 9650546086933297465 } }, price: Aggregated { median: Fraction(77995444737533971969704637296598811383099600643170731979631875206758828258478), iq_range: Fraction(31029135389232964422686407278324751553195380883332211301426581975444152271859)..=Fraction(76635830553487498358051714307181352192921804451181963198969969932513155744539) }, price_status: UpToDate, updated_at_statechain_block: 3360625541, minimal_price_deviation: BasisPoints(64258) }, SolUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 18107509566010718239 }, iq_range: UnixTime { seconds: 8821234506168353453 }..=UnixTime { seconds: 12045036706729221191 } }, price: Aggregated { median: Fraction(95580348501745745301148117891173384639512631207183112445763425617628591449559), iq_range: Fraction(5518028711081416775111896239907380176033383358175302922472095487294664847217)..=Fraction(13172113026533376539714131639437900027871191855170466026903474999993205998322) }, price_status: Stale, updated_at_statechain_block: 951945556, minimal_price_deviation: BasisPoints(13836) }, UsdcUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 16044103053077784891 }, iq_range: UnixTime { seconds: 7664446730060381757 }..=UnixTime { seconds: 11128989874377573324 } }, price: Aggregated { median: Fraction(111877367055963558802185577354093223592130694202434243763761843280564100667074), iq_range: Fraction(90510534133182195095783927041544218947149758643138559636470381728336015618292)..=Fraction(113856690688810631222233081782763429394466327113650027199372905946494934050981) }, price_status: MaybeStale, updated_at_statechain_block: 3093288033, minimal_price_deviation: BasisPoints(24670) }, UsdtUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 10025003677306327854 }, iq_range: UnixTime { seconds: 4589128616718007613 }..=UnixTime { seconds: 17389229836728221717 } }, price: Aggregated { median: Fraction(99174843811460450294269103934596559117011334611442344844216774882759077510183), iq_range: Fraction(55876603855327525583338639708486598479641235585337713909831391364558432670702)..=Fraction(104641979250871744099300852398394935517955876950713438815470730606560669569810) }, price_status: Stale, updated_at_statechain_block: 3078073860, minimal_price_deviation: BasisPoints(48169) }} }, ethereum: ExternalChainState { price: {BtcUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 4731859239750814499 }, iq_range: UnixTime { seconds: 5266216290312607668 }..=UnixTime { seconds: 15766699550581034552 } }, price: Aggregated { median: Fraction(8872185504684410830689817558785230366087436109116384557998288996483296111095), iq_range: Fraction(106149585000809526632921796687273090135841936780876406075840603774157126536749)..=Fraction(112603552766216583759861862791961670677234914779953489552629551460259213472162) }, price_status: UpToDate, updated_at_statechain_block: 103263236, minimal_price_deviation: BasisPoints(24478) }, EthUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 3371084785209983827 }, iq_range: UnixTime { seconds: 7250848133375307312 }..=UnixTime { seconds: 18321075380668577854 } }, price: Aggregated { median: Fraction(105209405470678640946660162806768988834539348385835910403438799972361558748152), iq_range: Fraction(12952771523497429005082461084346475406035443851725648881769687088322845357038)..=Fraction(101429528861362123277668791606437923010820527461923414241200060241219456986993) }, price_status: Stale, updated_at_statechain_block: 2921729039, minimal_price_deviation: BasisPoints(56685) }, SolUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 2656300135527503070 }, iq_range: UnixTime { seconds: 2221600050615886232 }..=UnixTime { seconds: 10182704084116995442 } }, price: Aggregated { median: Fraction(8076188287721311908473880107655902950103373248777312092470806216124636630895), iq_range: Fraction(451698560343397202426631722218175910728424475290802289109010696947397749142)..=Fraction(17151839964859599606395605037837906398208528850282247504562997501128442332925) }, price_status: UpToDate, updated_at_statechain_block: 2329867282, minimal_price_deviation: BasisPoints(9787) }, UsdcUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 8335628325467403399 }, iq_range: UnixTime { seconds: 10663528784289326790 }..=UnixTime { seconds: 18011306202588045743 } }, price: Aggregated { median: Fraction(7805666901028405054269539002023050988411915470755697467697216422630307984050), iq_range: Fraction(19793506994588916341665480199425760573232387474757400221799210055371978887854)..=Fraction(93982570144577463083555089245018575271757043948226462904891939146052869161606) }, price_status: MaybeStale, updated_at_statechain_block: 1123935621, minimal_price_deviation: BasisPoints(62333) }, UsdtUsd: AssetState { timestamp: Aggregated { median: UnixTime { seconds: 11628730563442801486 }, iq_range: UnixTime { seconds: 13744752246624212505 }..=UnixTime { seconds: 18378087411969153970 } }, price: Aggregated { median: Fraction(100637084186618825859700830211970088660596443410898797324798943433043218534479), iq_range: Fraction(20852284673291679645341578897578662213217253697638051670744639099772373418022)..=Fraction(111790508173559817767634723566221268549094772573631072390807242023456005032753) }, price_status: MaybeStale, updated_at_statechain_block: 1492803525, minimal_price_deviation: BasisPoints(1726) }} } }, get_time: MockHook { state: ConstantHook { state: UnixTime { seconds: 11574495337508699878 }, _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::GetTimeHook>> }, call_history: [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()], _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::GetTimeHook>> }, get_statechain_block_height: MockHook { state: ConstantHook { state: 2335426172, _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::GetStateChainBlockHeight>> }, call_history: [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()], _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::GetStateChainBlockHeight>> }, safe_mode_enabled: MockHook { state: ConstantHook { state: Disabled, _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::SafeModeEnabledHook>> }, call_history: [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()], _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::SafeModeEnabledHook>> }, emit_oracle_price_event: MockHook { state: ConstantHook { state: (), _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::EmitPricesUpdatedEvent>> }, call_history: [], _phantom: PhantomData<pallet_cf_elections::electoral_systems::block_witnesser::state_machine::HookTypeFor<pallet_cf_elections::electoral_systems::state_machine::core::TypesFor<pallet_cf_elections::electoral_systems::oracle_price::state_machine::tests::Mock>, pallet_cf_elections::electoral_systems::oracle_price::state_machine::EmitPricesUpdatedEvent>> } }, Right((PriceQuery { chain: Solana, assets: {BtcUsd: [NewTimestamp { last_timestamp: UnixTime { seconds: 6216844619974757408 } }, PriceMoved { last_price: Fraction(114332492267503296182291077008808855558237681903441797732048991410450792009870), deviation: BasisPoints(34241) }], EthUsd: [NewTimestamp { last_timestamp: UnixTime { seconds: 2033598662737845277 } }, PriceMoved { last_price: Fraction(77995444737533971969704637296598811383099600643170731979631875206758828258478), deviation: BasisPoints(64258) }], SolUsd: [NewTimestamp { last_timestamp: UnixTime { seconds: 18107509566010718239 } }], UsdcUsd: [], UsdtUsd: [NewTimestamp { last_timestamp: UnixTime { seconds: 10025003677306327854 } }]} }, {BtcUsd: AssetResponse { timestamp: Aggregated { median: UnixTime { seconds: 6216844619974757409 }, iq_range: UnixTime { seconds: 0 }..=UnixTime { seconds: 0 } }, price: Aggregated { median: Fraction(0), iq_range: Fraction(0)..=Fraction(0) } }, EthUsd: AssetResponse { timestamp: Aggregated { median: UnixTime { seconds: 2033598662737845278 }, iq_range: UnixTime { seconds: 0 }..=UnixTime { seconds: 0 } }, price: Aggregated { median: Fraction(0), iq_range: Fraction(0)..=Fraction(108768759111981059362777816860853082878331450502873650136300190245946277232640) } }})), OraclePriceSettings { solana: ExternalChainSettings { up_to_date_timeout: Seconds(11321143460701905540), maybe_stale_timeout: Seconds(2750030880630284258), minimal_price_deviation: BasisPoints(61774) }, ethereum: ExternalChainSettings { up_to_date_timeout: Seconds(9118003238609091382), maybe_stale_timeout: Seconds(6610048337156427399), minimal_price_deviation: BasisPoints(38307) } })
