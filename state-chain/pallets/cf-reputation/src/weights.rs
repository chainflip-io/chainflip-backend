
//! Autogenerated weights for pallet_cf_reputation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-23, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `kylezs.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_reputation
// --output
// state-chain/pallets/cf-reputation/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_reputation.
pub trait WeightInfo {
	fn update_accrual_ratio() -> Weight;
	fn set_penalty() -> Weight;
	fn update_missed_heartbeat_penalty() -> Weight;
	fn heartbeat() -> Weight;
	fn submit_network_state() -> Weight;
	fn on_initialize_no_action() -> Weight;
}

/// Weights for pallet_cf_reputation using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: Reputation AccrualRatio (r:0 w:1)
	fn update_accrual_ratio() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Reputation Penalties (r:1 w:1)
	fn set_penalty() -> Weight {
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_parts(23_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Reputation Penalties (r:0 w:1)
	fn update_missed_heartbeat_penalty() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(16_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: Reputation LastHeartbeat (r:1 w:1)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation AccrualRatio (r:1 w:0)
	fn heartbeat() -> Weight {
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_parts(23_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Reputation LastHeartbeat (r:1 w:0)
	// Storage: Emissions CurrentAuthorityEmissionInflation (r:1 w:0)
	// Storage: Flip TotalIssuance (r:1 w:0)
	// Storage: Emissions BackupNodeEmissionInflation (r:1 w:0)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Suspensions (r:1 w:1)
	// Storage: Validator Backups (r:1 w:0)
	// Storage: Validator BackupRewardNodePercentage (r:1 w:0)
	// Storage: Emissions CurrentAuthorityEmissionPerBlock (r:0 w:1)
	// Storage: Emissions BackupNodeEmissionPerBlock (r:0 w:1)
	fn submit_network_state() -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_parts(41_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	fn on_initialize_no_action() -> Weight {
		// Minimum execution time: 0 nanoseconds.
		Weight::from_parts(0, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Reputation AccrualRatio (r:0 w:1)
	fn update_accrual_ratio() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Reputation Penalties (r:1 w:1)
	fn set_penalty() -> Weight {
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_parts(23_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Reputation Penalties (r:0 w:1)
	fn update_missed_heartbeat_penalty() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(16_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: Reputation LastHeartbeat (r:1 w:1)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation AccrualRatio (r:1 w:0)
	fn heartbeat() -> Weight {
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_parts(23_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: Reputation LastHeartbeat (r:1 w:0)
	// Storage: Emissions CurrentAuthorityEmissionInflation (r:1 w:0)
	// Storage: Flip TotalIssuance (r:1 w:0)
	// Storage: Emissions BackupNodeEmissionInflation (r:1 w:0)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Suspensions (r:1 w:1)
	// Storage: Validator Backups (r:1 w:0)
	// Storage: Validator BackupRewardNodePercentage (r:1 w:0)
	// Storage: Emissions CurrentAuthorityEmissionPerBlock (r:0 w:1)
	// Storage: Emissions BackupNodeEmissionPerBlock (r:0 w:1)
	fn submit_network_state() -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_parts(41_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn on_initialize_no_action() -> Weight {
		// Minimum execution time: 0 nanoseconds.
		Weight::from_parts(0, 0)
	}
}
