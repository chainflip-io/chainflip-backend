
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_reputation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-09-11, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `chainflip-benchmark-runner`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_reputation
// --extrinsic
// *
// --output
// state-chain/pallets/cf-reputation/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_reputation.
pub trait WeightInfo {
	fn update_accrual_ratio() -> Weight;
	fn set_penalty() -> Weight;
	fn update_missed_heartbeat_penalty() -> Weight;
	fn heartbeat() -> Weight;
	fn submit_network_state(o: u32, ) -> Weight;
	fn on_initialize_no_action() -> Weight;
}

/// Weights for pallet_cf_reputation using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Reputation::AccrualRatio` (r:0 w:1)
	/// Proof: `Reputation::AccrualRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_accrual_ratio() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_023_000 picoseconds.
		Weight::from_parts(6_607_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Reputation::Penalties` (r:1 w:1)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_penalty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `353`
		//  Estimated: `3818`
		// Minimum execution time: 15_179_000 picoseconds.
		Weight::from_parts(15_765_000, 3818)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Reputation::Penalties` (r:0 w:1)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_missed_heartbeat_penalty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_075_000 picoseconds.
		Weight::from_parts(8_509_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:1 w:1)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::LastHeartbeat` (r:1 w:1)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::AccrualRatio` (r:1 w:0)
	/// Proof: `Reputation::AccrualRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn heartbeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `848`
		//  Estimated: `4313`
		// Minimum execution time: 21_702_000 picoseconds.
		Weight::from_parts(21_807_000, 4313)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::LastHeartbeat` (r:150 w:0)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:150 w:150)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::SlashingRate` (r:1 w:0)
	/// Proof: `Flip::SlashingRate` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:150 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ValidatorToOperator` (r:150 w:0)
	/// Proof: `Validator::ValidatorToOperator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `o` is `[0, 150]`.
	fn submit_network_state(o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1902 + o * (33 ±0)`
		//  Estimated: `5201 + o * (2555 ±0)`
		// Minimum execution time: 20_001_000 picoseconds.
		Weight::from_parts(36_578_714, 5201)
			// Standard Error: 28_385
			.saturating_add(Weight::from_parts(12_728_607, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(o.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(o.into())))
			.saturating_add(Weight::from_parts(0, 2555).saturating_mul(o.into()))
	}
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 165_000 picoseconds.
		Weight::from_parts(194_000, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Reputation::AccrualRatio` (r:0 w:1)
	/// Proof: `Reputation::AccrualRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_accrual_ratio() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_023_000 picoseconds.
		Weight::from_parts(6_607_000, 0)
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Reputation::Penalties` (r:1 w:1)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_penalty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `353`
		//  Estimated: `3818`
		// Minimum execution time: 15_179_000 picoseconds.
		Weight::from_parts(15_765_000, 3818)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Reputation::Penalties` (r:0 w:1)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_missed_heartbeat_penalty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_075_000 picoseconds.
		Weight::from_parts(8_509_000, 0)
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:1 w:1)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::LastHeartbeat` (r:1 w:1)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::AccrualRatio` (r:1 w:0)
	/// Proof: `Reputation::AccrualRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn heartbeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `848`
		//  Estimated: `4313`
		// Minimum execution time: 21_702_000 picoseconds.
		Weight::from_parts(21_807_000, 4313)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::LastHeartbeat` (r:150 w:0)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:150 w:150)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::SlashingRate` (r:1 w:0)
	/// Proof: `Flip::SlashingRate` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:150 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Validator::CurrentEpoch` (r:1 w:0)
	/// Proof: `Validator::CurrentEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::ValidatorToOperator` (r:150 w:0)
	/// Proof: `Validator::ValidatorToOperator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `o` is `[0, 150]`.
	fn submit_network_state(o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1902 + o * (33 ±0)`
		//  Estimated: `5201 + o * (2555 ±0)`
		// Minimum execution time: 20_001_000 picoseconds.
		Weight::from_parts(36_578_714, 5201)
			// Standard Error: 28_385
			.saturating_add(Weight::from_parts(12_728_607, 0).saturating_mul(o.into()))
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().reads((4_u64).saturating_mul(o.into())))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(o.into())))
			.saturating_add(Weight::from_parts(0, 2555).saturating_mul(o.into()))
	}
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 165_000 picoseconds.
		Weight::from_parts(194_000, 0)
	}
}
