
//! Autogenerated weights for pallet_cf_pools
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-23, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `chainflip-benchmark-runner`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_pools
// --extrinsic
// *
// --output
// state-chain/pallets/cf-pools/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_pools.
pub trait WeightInfo {
	fn new_pool() -> Weight;
	fn update_range_order() -> Weight;
	fn set_range_order() -> Weight;
	fn update_limit_order() -> Weight;
	fn set_limit_order() -> Weight;
	fn set_pool_fees() -> Weight;
	fn schedule_limit_order_update() -> Weight;
	fn set_maximum_price_impact(n: u32, ) -> Weight;
	fn cancel_orders_batch() -> Weight;
}

/// Weights for pallet_cf_pools using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn new_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3471`
		// Minimum execution time: 21_307_000 picoseconds.
		Weight::from_parts(21_684_000, 3471)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2271`
		//  Estimated: `8211`
		// Minimum execution time: 92_823_000 picoseconds.
		Weight::from_parts(95_019_000, 8211)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2271`
		//  Estimated: `8211`
		// Minimum execution time: 92_927_000 picoseconds.
		Weight::from_parts(93_780_000, 8211)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2271`
		//  Estimated: `8211`
		// Minimum execution time: 77_272_000 picoseconds.
		Weight::from_parts(78_518_000, 8211)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2271`
		//  Estimated: `8211`
		// Minimum execution time: 77_388_000 picoseconds.
		Weight::from_parts(77_974_000, 8211)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_pool_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2003`
		//  Estimated: `7943`
		// Minimum execution time: 66_974_000 picoseconds.
		Weight::from_parts(67_820_000, 7943)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::ScheduledLimitOrderUpdates` (r:1 w:1)
	/// Proof: `LiquidityPools::ScheduledLimitOrderUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_limit_order_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `579`
		//  Estimated: `4044`
		// Minimum execution time: 17_823_000 picoseconds.
		Weight::from_parts(18_203_000, 4044)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `LiquidityPools::MaximumPriceImpact` (r:0 w:6)
	/// Proof: `LiquidityPools::MaximumPriceImpact` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 6]`.
	fn set_maximum_price_impact(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_398_000 picoseconds.
		Weight::from_parts(5_011_044, 0)
			// Standard Error: 24_948
			.saturating_add(Weight::from_parts(3_526_248, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_orders_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46425`
		//  Estimated: `52365`
		// Minimum execution time: 76_778_837_000 picoseconds.
		Weight::from_parts(77_003_400_000, 52365)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn new_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3471`
		// Minimum execution time: 21_307_000 picoseconds.
		Weight::from_parts(21_684_000, 3471)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2271`
		//  Estimated: `8211`
		// Minimum execution time: 92_823_000 picoseconds.
		Weight::from_parts(95_019_000, 8211)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2271`
		//  Estimated: `8211`
		// Minimum execution time: 92_927_000 picoseconds.
		Weight::from_parts(93_780_000, 8211)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2271`
		//  Estimated: `8211`
		// Minimum execution time: 77_272_000 picoseconds.
		Weight::from_parts(78_518_000, 8211)
			.saturating_add(ParityDbWeight::get().reads(8_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2271`
		//  Estimated: `8211`
		// Minimum execution time: 77_388_000 picoseconds.
		Weight::from_parts(77_974_000, 8211)
			.saturating_add(ParityDbWeight::get().reads(8_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_pool_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2003`
		//  Estimated: `7943`
		// Minimum execution time: 66_974_000 picoseconds.
		Weight::from_parts(67_820_000, 7943)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::ScheduledLimitOrderUpdates` (r:1 w:1)
	/// Proof: `LiquidityPools::ScheduledLimitOrderUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_limit_order_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `579`
		//  Estimated: `4044`
		// Minimum execution time: 17_823_000 picoseconds.
		Weight::from_parts(18_203_000, 4044)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `LiquidityPools::MaximumPriceImpact` (r:0 w:6)
	/// Proof: `LiquidityPools::MaximumPriceImpact` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 6]`.
	fn set_maximum_price_impact(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_398_000 picoseconds.
		Weight::from_parts(5_011_044, 0)
			// Standard Error: 24_948
			.saturating_add(Weight::from_parts(3_526_248, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_orders_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `46425`
		//  Estimated: `52365`
		// Minimum execution time: 76_778_837_000 picoseconds.
		Weight::from_parts(77_003_400_000, 52365)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
}
