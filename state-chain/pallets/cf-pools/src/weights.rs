
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_pools
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-04-22, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `chainflip-benchmark-runner`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_pools
// --extrinsic
// *
// --output
// state-chain/pallets/cf-pools/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_pools.
pub trait WeightInfo {
	fn new_pool() -> Weight;
	fn update_range_order() -> Weight;
	fn set_range_order() -> Weight;
	fn update_limit_order() -> Weight;
	fn set_limit_order() -> Weight;
	fn set_pool_fees() -> Weight;
	fn schedule_limit_order_update() -> Weight;
	fn set_maximum_price_impact(n: u32, ) -> Weight;
	fn cancel_orders_batch(n: u32, ) -> Weight;
}

/// Weights for pallet_cf_pools using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn new_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `3508`
		// Minimum execution time: 22_725_000 picoseconds.
		Weight::from_parts(23_044_000, 3508)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6615`
		//  Estimated: `12555`
		// Minimum execution time: 258_940_000 picoseconds.
		Weight::from_parts(262_308_000, 12555)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6615`
		//  Estimated: `12555`
		// Minimum execution time: 255_931_000 picoseconds.
		Weight::from_parts(256_432_000, 12555)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6615`
		//  Estimated: `12555`
		// Minimum execution time: 241_431_000 picoseconds.
		Weight::from_parts(244_863_000, 12555)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6615`
		//  Estimated: `12555`
		// Minimum execution time: 244_010_000 picoseconds.
		Weight::from_parts(248_674_000, 12555)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_pool_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1723`
		//  Estimated: `5188`
		// Minimum execution time: 25_493_000 picoseconds.
		Weight::from_parts(25_927_000, 5188)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::ScheduledLimitOrderUpdates` (r:1 w:1)
	/// Proof: `LiquidityPools::ScheduledLimitOrderUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_limit_order_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `617`
		//  Estimated: `4082`
		// Minimum execution time: 19_896_000 picoseconds.
		Weight::from_parts(20_287_000, 4082)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `LiquidityPools::MaximumPriceImpact` (r:0 w:6)
	/// Proof: `LiquidityPools::MaximumPriceImpact` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 6]`.
	fn set_maximum_price_impact(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_925_000 picoseconds.
		Weight::from_parts(5_151_405, 0)
			// Standard Error: 22_263
			.saturating_add(Weight::from_parts(3_625_119, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn cancel_orders_batch(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2216 + n * (440 ±0)`
		//  Estimated: `8156 + n * (440 ±0)`
		// Minimum execution time: 69_934_000 picoseconds.
		Weight::from_parts(70_683_000, 8156)
			// Standard Error: 1_839_550
			.saturating_add(Weight::from_parts(105_872_437, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 440).saturating_mul(n.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn new_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `3508`
		// Minimum execution time: 22_725_000 picoseconds.
		Weight::from_parts(23_044_000, 3508)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6615`
		//  Estimated: `12555`
		// Minimum execution time: 258_940_000 picoseconds.
		Weight::from_parts(262_308_000, 12555)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6615`
		//  Estimated: `12555`
		// Minimum execution time: 255_931_000 picoseconds.
		Weight::from_parts(256_432_000, 12555)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6615`
		//  Estimated: `12555`
		// Minimum execution time: 241_431_000 picoseconds.
		Weight::from_parts(244_863_000, 12555)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6615`
		//  Estimated: `12555`
		// Minimum execution time: 244_010_000 picoseconds.
		Weight::from_parts(248_674_000, 12555)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_pool_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1723`
		//  Estimated: `5188`
		// Minimum execution time: 25_493_000 picoseconds.
		Weight::from_parts(25_927_000, 5188)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::ScheduledLimitOrderUpdates` (r:1 w:1)
	/// Proof: `LiquidityPools::ScheduledLimitOrderUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_limit_order_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `617`
		//  Estimated: `4082`
		// Minimum execution time: 19_896_000 picoseconds.
		Weight::from_parts(20_287_000, 4082)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `LiquidityPools::MaximumPriceImpact` (r:0 w:6)
	/// Proof: `LiquidityPools::MaximumPriceImpact` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 6]`.
	fn set_maximum_price_impact(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_925_000 picoseconds.
		Weight::from_parts(5_151_405, 0)
			// Standard Error: 22_263
			.saturating_add(Weight::from_parts(3_625_119, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:2 w:2)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 100]`.
	fn cancel_orders_batch(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2216 + n * (440 ±0)`
		//  Estimated: `8156 + n * (440 ±0)`
		// Minimum execution time: 69_934_000 picoseconds.
		Weight::from_parts(70_683_000, 8156)
			// Standard Error: 1_839_550
			.saturating_add(Weight::from_parts(105_872_437, 0).saturating_mul(n.into()))
			.saturating_add(ParityDbWeight::get().reads(7_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 440).saturating_mul(n.into()))
	}
}
