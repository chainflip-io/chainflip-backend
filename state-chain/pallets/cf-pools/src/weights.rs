
//! Autogenerated weights for pallet_cf_pools
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-23, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/debug/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_pools
// --output
// state-chain/pallets/cf-pools/src/weights.rs
// --steps=20
// --repeat=20
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_pools.
pub trait WeightInfo {
	fn update_buy_interval() -> Weight;
	fn new_pool() -> Weight;
	fn update_range_order() -> Weight;
	fn set_range_order() -> Weight;
	fn update_limit_order() -> Weight;
	fn set_limit_order() -> Weight;
	fn set_pool_fees() -> Weight;
	fn schedule_limit_order_update() -> Weight;
	fn set_maximum_price_impact() -> Weight;
}

/// Weights for pallet_cf_pools using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `LiquidityPools::FlipBuyInterval` (r:0 w:1)
	/// Proof: `LiquidityPools::FlipBuyInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_buy_interval() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(57_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn new_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `3497`
		// Minimum execution time: 145_000_000 picoseconds.
		Weight::from_parts(152_000_000, 3497)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:2 w:2)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1960`
		//  Estimated: `7900`
		// Minimum execution time: 700_000_000 picoseconds.
		Weight::from_parts(705_000_000, 7900)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:2 w:2)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1960`
		//  Estimated: `7900`
		// Minimum execution time: 701_000_000 picoseconds.
		Weight::from_parts(706_000_000, 7900)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1960`
		//  Estimated: `7900`
		// Minimum execution time: 597_000_000 picoseconds.
		Weight::from_parts(602_000_000, 7900)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1960`
		//  Estimated: `7900`
		// Minimum execution time: 598_000_000 picoseconds.
		Weight::from_parts(621_000_000, 7900)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_pool_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2072`
		//  Estimated: `5537`
		// Minimum execution time: 426_000_000 picoseconds.
		Weight::from_parts(428_000_000, 5537)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::ScheduledLimitOrderUpdates` (r:1 w:1)
	/// Proof: `LiquidityPools::ScheduledLimitOrderUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_limit_order_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `502`
		//  Estimated: `3967`
		// Minimum execution time: 146_000_000 picoseconds.
		Weight::from_parts(149_000_000, 3967)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `LiquidityPools::MaximumRelativeSlippage` (r:0 w:1)
	/// Proof: `LiquidityPools::MaximumRelativeSlippage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_maximum_price_impact() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(29_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `LiquidityPools::FlipBuyInterval` (r:0 w:1)
	/// Proof: `LiquidityPools::FlipBuyInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_buy_interval() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(57_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn new_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `3497`
		// Minimum execution time: 145_000_000 picoseconds.
		Weight::from_parts(152_000_000, 3497)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:2 w:2)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1960`
		//  Estimated: `7900`
		// Minimum execution time: 700_000_000 picoseconds.
		Weight::from_parts(705_000_000, 7900)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:2 w:2)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_range_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1960`
		//  Estimated: `7900`
		// Minimum execution time: 701_000_000 picoseconds.
		Weight::from_parts(706_000_000, 7900)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1960`
		//  Estimated: `7900`
		// Minimum execution time: 597_000_000 picoseconds.
		Weight::from_parts(602_000_000, 7900)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_limit_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1960`
		//  Estimated: `7900`
		// Minimum execution time: 598_000_000 picoseconds.
		Weight::from_parts(621_000_000, 7900)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `LiquidityPools::Pools` (r:1 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::HistoricalEarnedFees` (r:1 w:1)
	/// Proof: `LiquidityProvider::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::FreeBalances` (r:1 w:1)
	/// Proof: `LiquidityProvider::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_pool_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2072`
		//  Estimated: `5537`
		// Minimum execution time: 426_000_000 picoseconds.
		Weight::from_parts(428_000_000, 5537)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `LiquidityPools::ScheduledLimitOrderUpdates` (r:1 w:1)
	/// Proof: `LiquidityPools::ScheduledLimitOrderUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_limit_order_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `502`
		//  Estimated: `3967`
		// Minimum execution time: 146_000_000 picoseconds.
		Weight::from_parts(149_000_000, 3967)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `LiquidityPools::MaximumRelativeSlippage` (r:0 w:1)
	/// Proof: `LiquidityPools::MaximumRelativeSlippage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_maximum_price_impact() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(29_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
