
//! Autogenerated weights for pallet_cf_swapping
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-03, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-9-222`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_swapping
// --extrinsic
// *
// --output
// state-chain/pallets/cf-swapping/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_swapping.
pub trait WeightInfo {
	fn request_swap_deposit_address() -> Weight;
	fn withdraw() -> Weight;
	fn register_as_broker() -> Weight;
	fn deregister_as_broker() -> Weight;
	fn schedule_swap_from_contract() -> Weight;
	fn ccm_deposit() -> Weight;
}

/// Weights for pallet_cf_swapping using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ChannelIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::DepositChannelLifetime` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelRecycleBlocks` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelRecycleBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:0 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_swap_deposit_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `893`
		//  Estimated: `4358`
		// Minimum execution time: 52_096_000 picoseconds.
		Weight::from_parts(53_395_000, 4358)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Swapping::EarnedBrokerFees` (r:1 w:1)
	/// Proof: `Swapping::EarnedBrokerFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::EgressIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `926`
		//  Estimated: `4391`
		// Minimum execution time: 41_068_000 picoseconds.
		Weight::from_parts(42_083_000, 4391)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::SwappingEnabled` (r:1 w:0)
	/// Proof: `AccountRoles::SwappingEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	fn register_as_broker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `693`
		//  Estimated: `3498`
		// Minimum execution time: 21_675_000 picoseconds.
		Weight::from_parts(21_980_000, 3498)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn deregister_as_broker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `693`
		//  Estimated: `3498`
		// Minimum execution time: 21_675_000 picoseconds.
		Weight::from_parts(21_980_000, 3498)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Swapping::MinimumSwapAmount` (r:1 w:0)
	/// Proof: `Swapping::MinimumSwapAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapQueue` (r:1 w:1)
	/// Proof: `Swapping::SwapQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_swap_from_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185`
		//  Estimated: `3650`
		// Minimum execution time: 19_625_000 picoseconds.
		Weight::from_parts(20_035_000, 3650)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Swapping::MinimumSwapAmount` (r:1 w:0)
	/// Proof: `Swapping::MinimumSwapAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::CcmIdCounter` (r:1 w:1)
	/// Proof: `Swapping::CcmIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapQueue` (r:1 w:1)
	/// Proof: `Swapping::SwapQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::CcmOutputs` (r:0 w:1)
	/// Proof: `Swapping::CcmOutputs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::PendingCcms` (r:0 w:1)
	/// Proof: `Swapping::PendingCcms` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ccm_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185`
		//  Estimated: `3650`
		// Minimum execution time: 38_129_000 picoseconds.
		Weight::from_parts(38_686_000, 3650)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ChannelIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::DepositChannelLifetime` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelRecycleBlocks` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelRecycleBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:0 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_swap_deposit_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `893`
		//  Estimated: `4358`
		// Minimum execution time: 52_096_000 picoseconds.
		Weight::from_parts(53_395_000, 4358)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Swapping::EarnedBrokerFees` (r:1 w:1)
	/// Proof: `Swapping::EarnedBrokerFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::EgressIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `926`
		//  Estimated: `4391`
		// Minimum execution time: 41_068_000 picoseconds.
		Weight::from_parts(42_083_000, 4391)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::SwappingEnabled` (r:1 w:0)
	/// Proof: `AccountRoles::SwappingEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	fn register_as_broker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `693`
		//  Estimated: `3498`
		// Minimum execution time: 21_675_000 picoseconds.
		Weight::from_parts(21_980_000, 3498)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn deregister_as_broker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `693`
		//  Estimated: `3498`
		// Minimum execution time: 21_675_000 picoseconds.
		Weight::from_parts(21_980_000, 3498)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Swapping::MinimumSwapAmount` (r:1 w:0)
	/// Proof: `Swapping::MinimumSwapAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapQueue` (r:1 w:1)
	/// Proof: `Swapping::SwapQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_swap_from_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185`
		//  Estimated: `3650`
		// Minimum execution time: 19_625_000 picoseconds.
		Weight::from_parts(20_035_000, 3650)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Swapping::MinimumSwapAmount` (r:1 w:0)
	/// Proof: `Swapping::MinimumSwapAmount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::CcmIdCounter` (r:1 w:1)
	/// Proof: `Swapping::CcmIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapQueue` (r:1 w:1)
	/// Proof: `Swapping::SwapQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::CcmOutputs` (r:0 w:1)
	/// Proof: `Swapping::CcmOutputs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::PendingCcms` (r:0 w:1)
	/// Proof: `Swapping::PendingCcms` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn ccm_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185`
		//  Estimated: `3650`
		// Minimum execution time: 38_129_000 picoseconds.
		Weight::from_parts(38_686_000, 3650)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
}
