//! Autogenerated weights for pallet_cf_swapping
//!
//! THIS FILE WAS AUTO-GENERATED USING CHAINFLIP NODE BENCHMARK CMD VERSION 4.0.0-dev
//! DATE: 2022-10-19, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("three-node-test"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --chain
// three-node-test
// --extrinsic
// *
// --pallet
// pallet_cf_swapping
// --output
// state-chain/pallets/cf-swapping/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_swapping.
pub trait WeightInfo {
	fn register_swap_intent() -> Weight;
	fn execute_swap() -> Weight;
	fn on_idle() -> Weight;
}

/// Weights for pallet_cf_swapping using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: AccountTypes AccountRoles (r:1 w:0)
	// Storage: Ingress IntentIdCounter (r:1 w:1)
	// Storage: Environment EthereumVaultAddress (r:1 w:0)
	// Storage: Egress EthereumScheduledIngressFetch (r:1 w:1)
	// Storage: Ingress IntentActions (r:0 w:1)
	// Storage: Ingress IntentIngressDetails (r:0 w:1)
	fn register_swap_intent() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(58_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Egress DisabledEgressAssets (r:1 w:0)
	// Storage: Egress ScheduledEgress (r:1 w:1)
	fn execute_swap() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(25_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Swapping SwapQueue (r:1 w:1)
	fn on_idle() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(5_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: AccountTypes AccountRoles (r:1 w:0)
	// Storage: Ingress IntentIdCounter (r:1 w:1)
	// Storage: Environment EthereumVaultAddress (r:1 w:0)
	// Storage: Egress EthereumScheduledIngressFetch (r:1 w:1)
	// Storage: Ingress IntentActions (r:0 w:1)
	// Storage: Ingress IntentIngressDetails (r:0 w:1)
	fn register_swap_intent() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(58_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Egress DisabledEgressAssets (r:1 w:0)
	// Storage: Egress ScheduledEgress (r:1 w:1)
	fn execute_swap() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(25_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Swapping SwapQueue (r:1 w:1)
	fn on_idle() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(5_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
