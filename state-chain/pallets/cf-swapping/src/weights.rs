
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_swapping
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-07-04, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `chainflip-benchmark-runner`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_swapping
// --extrinsic
// *
// --output
// state-chain/pallets/cf-swapping/src/weights.rs
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_swapping.
pub trait WeightInfo {
	fn request_swap_deposit_address() -> Weight;
	fn request_swap_deposit_address_with_affiliates() -> Weight;
	fn withdraw() -> Weight;
	fn register_as_broker() -> Weight;
	fn deregister_as_broker() -> Weight;
	fn open_private_btc_channel() -> Weight;
	fn close_private_btc_channel() -> Weight;
	fn register_affiliate() -> Weight;
	fn affiliate_withdrawal_request() -> Weight;
	fn set_vault_swap_minimum_broker_fee() -> Weight;
}

/// Weights for pallet_cf_swapping using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::MaxSwapRetryDurationBlocks` (r:1 w:0)
	/// Proof: `Swapping::MaxSwapRetryDurationBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelOpeningFee` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::ChannelOpeningFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::PreallocatedChannels` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::PreallocatedChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MaximumPreallocatedChannels` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MaximumPreallocatedChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ChannelIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::DepositChannelLifetime` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelRecycleBlocks` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelRecycleBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:0 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_swap_deposit_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2007`
		//  Estimated: `5472`
		// Minimum execution time: 79_656_000 picoseconds.
		Weight::from_parts(80_100_000, 5472)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::MaxSwapRetryDurationBlocks` (r:1 w:0)
	/// Proof: `Swapping::MaxSwapRetryDurationBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelOpeningFee` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::ChannelOpeningFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::PreallocatedChannels` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::PreallocatedChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MaximumPreallocatedChannels` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MaximumPreallocatedChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ChannelIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::DepositChannelLifetime` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelRecycleBlocks` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelRecycleBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:0 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_swap_deposit_address_with_affiliates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2076`
		//  Estimated: `5541`
		// Minimum execution time: 78_913_000 picoseconds.
		Weight::from_parts(80_676_000, 5541)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::EgressIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::FeeMultiplier` (r:1 w:0)
	/// Proof: `EthereumChainTracking::FeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `AssetBalances::WithheldAssets` (r:1 w:1)
	/// Proof: `AssetBalances::WithheldAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressDustLimit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::EgressDustLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1501`
		//  Estimated: `4966`
		// Minimum execution time: 48_439_000 picoseconds.
		Weight::from_parts(49_913_000, 4966)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_as_broker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1017`
		//  Estimated: `4482`
		// Minimum execution time: 24_160_000 picoseconds.
		Weight::from_parts(24_837_000, 4482)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::BrokerPrivateBtcChannels` (r:1 w:0)
	/// Proof: `Swapping::BrokerPrivateBtcChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:13 w:0)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::AffiliateAccountDetails` (r:1 w:0)
	/// Proof: `Swapping::AffiliateAccountDetails` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:0)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_as_broker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1454`
		//  Estimated: `34619`
		// Minimum execution time: 78_947_000 picoseconds.
		Weight::from_parts(80_462_000, 34619)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::BrokerPrivateBtcChannels` (r:1 w:1)
	/// Proof: `Swapping::BrokerPrivateBtcChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Swapping::BrokerBond` (r:1 w:0)
	/// Proof: `Swapping::BrokerBond` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinIngressEgress::ChannelIdCounter` (r:1 w:1)
	/// Proof: `BitcoinIngressEgress::ChannelIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn open_private_btc_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1361`
		//  Estimated: `4826`
		// Minimum execution time: 34_117_000 picoseconds.
		Weight::from_parts(34_638_000, 4826)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::BrokerPrivateBtcChannels` (r:1 w:1)
	/// Proof: `Swapping::BrokerPrivateBtcChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn close_private_btc_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1347`
		//  Estimated: `4812`
		// Minimum execution time: 28_334_000 picoseconds.
		Weight::from_parts(28_768_000, 4812)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::AffiliateIdMapping` (r:2 w:1)
	/// Proof: `Swapping::AffiliateIdMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Swapping::AffiliateAccountDetails` (r:0 w:1)
	/// Proof: `Swapping::AffiliateAccountDetails` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_affiliate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `677`
		//  Estimated: `6617`
		// Minimum execution time: 39_311_000 picoseconds.
		Weight::from_parts(39_919_000, 6617)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::AffiliateAccountDetails` (r:1 w:0)
	/// Proof: `Swapping::AffiliateAccountDetails` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::EgressIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::FeeMultiplier` (r:1 w:0)
	/// Proof: `EthereumChainTracking::FeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `Swapping::NetworkFee` (r:1 w:0)
	/// Proof: `Swapping::NetworkFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapRequestIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::NetworkFeeForAsset` (r:2 w:0)
	/// Proof: `Swapping::NetworkFeeForAsset` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapQueue` (r:1 w:1)
	/// Proof: `Swapping::SwapQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressDustLimit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::EgressDustLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapRequests` (r:0 w:1)
	/// Proof: `Swapping::SwapRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn affiliate_withdrawal_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1308`
		//  Estimated: `7248`
		// Minimum execution time: 80_330_000 picoseconds.
		Weight::from_parts(81_876_000, 7248)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::VaultSwapMinimumBrokerFee` (r:0 w:1)
	/// Proof: `Swapping::VaultSwapMinimumBrokerFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_vault_swap_minimum_broker_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `537`
		//  Estimated: `4002`
		// Minimum execution time: 14_244_000 picoseconds.
		Weight::from_parts(14_577_000, 4002)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::MaxSwapRetryDurationBlocks` (r:1 w:0)
	/// Proof: `Swapping::MaxSwapRetryDurationBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelOpeningFee` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::ChannelOpeningFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::PreallocatedChannels` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::PreallocatedChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MaximumPreallocatedChannels` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MaximumPreallocatedChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ChannelIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::DepositChannelLifetime` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelRecycleBlocks` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelRecycleBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:0 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_swap_deposit_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2007`
		//  Estimated: `5472`
		// Minimum execution time: 79_656_000 picoseconds.
		Weight::from_parts(80_100_000, 5472)
			.saturating_add(ParityDbWeight::get().reads(13_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::MaxSwapRetryDurationBlocks` (r:1 w:0)
	/// Proof: `Swapping::MaxSwapRetryDurationBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelOpeningFee` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::ChannelOpeningFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::PreallocatedChannels` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::PreallocatedChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::MaximumPreallocatedChannels` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::MaximumPreallocatedChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelPool` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelPool` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ChannelIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ChannelIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::EthereumVaultAddress` (r:1 w:0)
	/// Proof: `Environment::EthereumVaultAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `EthereumIngressEgress::DepositChannelLifetime` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::DepositChannelLifetime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelRecycleBlocks` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelRecycleBlocks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::DepositChannelLookup` (r:0 w:1)
	/// Proof: `EthereumIngressEgress::DepositChannelLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_swap_deposit_address_with_affiliates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2076`
		//  Estimated: `5541`
		// Minimum execution time: 78_913_000 picoseconds.
		Weight::from_parts(80_676_000, 5541)
			.saturating_add(ParityDbWeight::get().reads(13_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::EgressIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::FeeMultiplier` (r:1 w:0)
	/// Proof: `EthereumChainTracking::FeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `AssetBalances::WithheldAssets` (r:1 w:1)
	/// Proof: `AssetBalances::WithheldAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressDustLimit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::EgressDustLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1501`
		//  Estimated: `4966`
		// Minimum execution time: 48_439_000 picoseconds.
		Weight::from_parts(49_913_000, 4966)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_as_broker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1017`
		//  Estimated: `4482`
		// Minimum execution time: 24_160_000 picoseconds.
		Weight::from_parts(24_837_000, 4482)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::BrokerPrivateBtcChannels` (r:1 w:0)
	/// Proof: `Swapping::BrokerPrivateBtcChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:13 w:0)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::AffiliateAccountDetails` (r:1 w:0)
	/// Proof: `Swapping::AffiliateAccountDetails` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:0)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:0)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deregister_as_broker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1454`
		//  Estimated: `34619`
		// Minimum execution time: 78_947_000 picoseconds.
		Weight::from_parts(80_462_000, 34619)
			.saturating_add(ParityDbWeight::get().reads(18_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::BrokerPrivateBtcChannels` (r:1 w:1)
	/// Proof: `Swapping::BrokerPrivateBtcChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Swapping::BrokerBond` (r:1 w:0)
	/// Proof: `Swapping::BrokerBond` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BitcoinIngressEgress::ChannelIdCounter` (r:1 w:1)
	/// Proof: `BitcoinIngressEgress::ChannelIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn open_private_btc_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1361`
		//  Estimated: `4826`
		// Minimum execution time: 34_117_000 picoseconds.
		Weight::from_parts(34_638_000, 4826)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(3_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::BrokerPrivateBtcChannels` (r:1 w:1)
	/// Proof: `Swapping::BrokerPrivateBtcChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn close_private_btc_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1347`
		//  Estimated: `4812`
		// Minimum execution time: 28_334_000 picoseconds.
		Weight::from_parts(28_768_000, 4812)
			.saturating_add(ParityDbWeight::get().reads(3_u64))
			.saturating_add(ParityDbWeight::get().writes(2_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::AffiliateIdMapping` (r:2 w:1)
	/// Proof: `Swapping::AffiliateIdMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Swapping::AffiliateAccountDetails` (r:0 w:1)
	/// Proof: `Swapping::AffiliateAccountDetails` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_affiliate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `677`
		//  Estimated: `6617`
		// Minimum execution time: 39_311_000 picoseconds.
		Weight::from_parts(39_919_000, 6617)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::AffiliateAccountDetails` (r:1 w:0)
	/// Proof: `Swapping::AffiliateAccountDetails` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:1 w:1)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressIdCounter` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::EgressIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumChainTracking::FeeMultiplier` (r:1 w:0)
	/// Proof: `EthereumChainTracking::FeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthereumChainTracking::CurrentChainState` (r:1 w:0)
	/// Proof: `EthereumChainTracking::CurrentChainState` (`max_values`: Some(1), `max_size`: Some(40), added: 535, mode: `MaxEncodedLen`)
	/// Storage: `Swapping::NetworkFee` (r:1 w:0)
	/// Proof: `Swapping::NetworkFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:1 w:0)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapRequestIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapRequestIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::NetworkFeeForAsset` (r:2 w:0)
	/// Proof: `Swapping::NetworkFeeForAsset` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapIdCounter` (r:1 w:1)
	/// Proof: `Swapping::SwapIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapQueue` (r:1 w:1)
	/// Proof: `Swapping::SwapQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::EgressDustLimit` (r:1 w:0)
	/// Proof: `EthereumIngressEgress::EgressDustLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (r:1 w:1)
	/// Proof: `EthereumIngressEgress::ScheduledEgressFetchOrTransfer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::SwapRequests` (r:0 w:1)
	/// Proof: `Swapping::SwapRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn affiliate_withdrawal_request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1308`
		//  Estimated: `7248`
		// Minimum execution time: 80_330_000 picoseconds.
		Weight::from_parts(81_876_000, 7248)
			.saturating_add(ParityDbWeight::get().reads(15_u64))
			.saturating_add(ParityDbWeight::get().writes(7_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Swapping::VaultSwapMinimumBrokerFee` (r:0 w:1)
	/// Proof: `Swapping::VaultSwapMinimumBrokerFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_vault_swap_minimum_broker_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `537`
		//  Estimated: `4002`
		// Minimum execution time: 14_244_000 picoseconds.
		Weight::from_parts(14_577_000, 4002)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
}
