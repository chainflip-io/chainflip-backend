
//! Autogenerated weights for pallet_cf_swapping
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-27, STEPS: `20`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Roys-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_swapping
// --output
// state-chain/pallets/cf-swapping/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=20
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_swapping.
pub trait WeightInfo {
	fn register_swap_intent() -> Weight;
	fn on_idle() -> Weight;
	fn execute_group_of_swaps(a: u32, ) -> Weight;
	fn withdraw() -> Weight;
	fn schedule_swap_by_witnesser() -> Weight;
	fn ccm_ingress() -> Weight;
}

/// Weights for pallet_cf_swapping using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: EthereumIngressEgress AddressPool (r:1 w:1)
	// Storage: EthereumIngressEgress IntentIdCounter (r:1 w:1)
	// Storage: Environment EthereumVaultAddress (r:1 w:0)
	// Storage: EthereumIngressEgress IntentExpiries (r:1 w:1)
	// Storage: EthereumIngressEgress IntentActions (r:0 w:1)
	// Storage: EthereumIngressEgress FetchParamDetails (r:0 w:1)
	// Storage: EthereumIngressEgress AddressStatus (r:0 w:1)
	// Storage: EthereumIngressEgress IntentIngressDetails (r:0 w:1)
	fn register_swap_intent() -> Weight {
		// Minimum execution time: 59_000 nanoseconds.
		Weight::from_ref_time(60_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Swapping SwapQueue (r:1 w:0)
	fn on_idle() -> Weight {
		// Minimum execution time: 3_000 nanoseconds.
		Weight::from_ref_time(4_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: LiquidityPools Pools (r:1 w:0)
	/// The range of component `a` is `[1, 150]`.
	fn execute_group_of_swaps(a: u32, ) -> Weight {
		// Minimum execution time: 8_000 nanoseconds.
		Weight::from_ref_time(8_997_976)
			// Standard Error: 536
			.saturating_add(Weight::from_ref_time(1_759).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Environment CurrentSystemState (r:1 w:0)
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: Swapping EarnedRelayerFees (r:1 w:1)
	// Storage: EthereumIngressEgress EgressIdCounter (r:1 w:1)
	// Storage: EthereumIngressEgress ScheduledEgressFetchOrTransfer (r:1 w:1)
	fn withdraw() -> Weight {
		// Minimum execution time: 49_000 nanoseconds.
		Weight::from_ref_time(51_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Swapping SwapIdCounter (r:1 w:1)
	// Storage: Swapping SwapQueue (r:1 w:1)
	fn schedule_swap_by_witnesser() -> Weight {
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_ref_time(24_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Swapping CcmIdCounter (r:1 w:1)
	// Storage: Swapping SwapIdCounter (r:1 w:1)
	// Storage: Swapping SwapQueue (r:1 w:1)
	// Storage: Swapping PendingCcms (r:0 w:1)
	fn ccm_ingress() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(20_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: EthereumIngressEgress AddressPool (r:1 w:1)
	// Storage: EthereumIngressEgress IntentIdCounter (r:1 w:1)
	// Storage: Environment EthereumVaultAddress (r:1 w:0)
	// Storage: EthereumIngressEgress IntentExpiries (r:1 w:1)
	// Storage: EthereumIngressEgress IntentActions (r:0 w:1)
	// Storage: EthereumIngressEgress FetchParamDetails (r:0 w:1)
	// Storage: EthereumIngressEgress AddressStatus (r:0 w:1)
	// Storage: EthereumIngressEgress IntentIngressDetails (r:0 w:1)
	fn register_swap_intent() -> Weight {
		// Minimum execution time: 59_000 nanoseconds.
		Weight::from_ref_time(60_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Swapping SwapQueue (r:1 w:0)
	fn on_idle() -> Weight {
		// Minimum execution time: 3_000 nanoseconds.
		Weight::from_ref_time(4_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: LiquidityPools Pools (r:1 w:0)
	/// The range of component `a` is `[1, 150]`.
	fn execute_group_of_swaps(a: u32, ) -> Weight {
		// Minimum execution time: 8_000 nanoseconds.
		Weight::from_ref_time(8_997_976)
			// Standard Error: 536
			.saturating_add(Weight::from_ref_time(1_759).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: Environment CurrentSystemState (r:1 w:0)
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: Swapping EarnedRelayerFees (r:1 w:1)
	// Storage: EthereumIngressEgress EgressIdCounter (r:1 w:1)
	// Storage: EthereumIngressEgress ScheduledEgressFetchOrTransfer (r:1 w:1)
	fn withdraw() -> Weight {
		// Minimum execution time: 49_000 nanoseconds.
		Weight::from_ref_time(51_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Swapping SwapIdCounter (r:1 w:1)
	// Storage: Swapping SwapQueue (r:1 w:1)
	fn schedule_swap_by_witnesser() -> Weight {
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_ref_time(24_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Swapping CcmIdCounter (r:1 w:1)
	// Storage: Swapping SwapIdCounter (r:1 w:1)
	// Storage: Swapping SwapQueue (r:1 w:1)
	// Storage: Swapping PendingCcms (r:0 w:1)
	fn ccm_ingress() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(20_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}
