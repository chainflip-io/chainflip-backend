
// Copyright 2025 Chainflip Labs GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! Autogenerated weights for pallet_cf_trading_strategy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-03-18, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Maxims-MacBook-Pro-3.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev-3"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_cf_trading_strategy
// --output
// state-chain/pallets/cf-trading-strategy/src/weights.rs
// --steps=20
// --repeat=20
// --template=state-chain/chainflip-weight-template.hbs
// --chain=dev-3

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_trading_strategy.
pub trait WeightInfo {
	fn deploy_strategy() -> Weight;
	fn close_strategy() -> Weight;
	fn add_funds_to_strategy() -> Weight;
}

/// Weights for pallet_cf_trading_strategy using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TradingStrategy::MinimumDeploymentAmountForStrategy` (r:2 w:0)
	/// Proof: `TradingStrategy::MinimumDeploymentAmountForStrategy` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `AssetBalances::FreeBalances` (r:4 w:4)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TradingStrategy::Strategies` (r:0 w:1)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deploy_strategy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1083`
		//  Estimated: `11973`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(50_000_000, 11973)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:1)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:4 w:4)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `AccountRoles::VanityNames` (r:1 w:0)
	/// Proof: `AccountRoles::VanityNames` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::LastHeartbeat` (r:0 w:1)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:0 w:1)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::OffenceTimeSlotTracker` (r:0 w:1)
	/// Proof: `Reputation::OffenceTimeSlotTracker` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedBalances` (r:0 w:1)
	/// Proof: `Funding::RestrictedBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundRedeemAddress` (r:0 w:1)
	/// Proof: `Funding::BoundRedeemAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundExecutorAddress` (r:0 w:1)
	/// Proof: `Funding::BoundExecutorAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_strategy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3695`
		//  Estimated: `14585`
		// Minimum execution time: 177_000_000 picoseconds.
		Weight::from_parts(179_000_000, 14585)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(18_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:0)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:4 w:4)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_funds_to_strategy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `986`
		//  Estimated: `11876`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(34_000_000, 11876)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityProvider::LiquidityRefundAddress` (r:1 w:0)
	/// Proof: `LiquidityProvider::LiquidityRefundAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TradingStrategy::MinimumDeploymentAmountForStrategy` (r:2 w:0)
	/// Proof: `TradingStrategy::MinimumDeploymentAmountForStrategy` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `AssetBalances::FreeBalances` (r:4 w:4)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TradingStrategy::Strategies` (r:0 w:1)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn deploy_strategy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1083`
		//  Estimated: `11973`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(50_000_000, 11973)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(7_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:1)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:1)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::Pools` (r:2 w:1)
	/// Proof: `LiquidityPools::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `LiquidityPools::HistoricalEarnedFees` (r:2 w:2)
	/// Proof: `LiquidityPools::HistoricalEarnedFees` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:4 w:4)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Flip::Account` (r:1 w:1)
	/// Proof: `Flip::Account` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Flip::TotalIssuance` (r:1 w:1)
	/// Proof: `Flip::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `AccountRoles::VanityNames` (r:1 w:0)
	/// Proof: `AccountRoles::VanityNames` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::LastHeartbeat` (r:0 w:1)
	/// Proof: `Reputation::LastHeartbeat` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:0 w:1)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::OffenceTimeSlotTracker` (r:0 w:1)
	/// Proof: `Reputation::OffenceTimeSlotTracker` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::RestrictedBalances` (r:0 w:1)
	/// Proof: `Funding::RestrictedBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundRedeemAddress` (r:0 w:1)
	/// Proof: `Funding::BoundRedeemAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Funding::BoundExecutorAddress` (r:0 w:1)
	/// Proof: `Funding::BoundExecutorAddress` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_strategy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3695`
		//  Estimated: `14585`
		// Minimum execution time: 177_000_000 picoseconds.
		Weight::from_parts(179_000_000, 14585)
			.saturating_add(ParityDbWeight::get().reads(14_u64))
			.saturating_add(ParityDbWeight::get().writes(18_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TradingStrategy::Strategies` (r:1 w:0)
	/// Proof: `TradingStrategy::Strategies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AssetBalances::FreeBalances` (r:4 w:4)
	/// Proof: `AssetBalances::FreeBalances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_funds_to_strategy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `986`
		//  Estimated: `11876`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(34_000_000, 11876)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
}
