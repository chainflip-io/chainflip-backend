//! Autogenerated weights for pallet_cf_vaults
//!
//! THIS FILE WAS AUTO-GENERATED USING CHAINFLIP NODE BENCHMARK CMD VERSION 4.0.0-dev
//! DATE: 2022-08-30, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("three-node-test"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --chain
// three-node-test
// --extrinsic
// *
// --pallet
// pallet_cf_vaults
// --output
// state-chain/pallets/cf-vaults/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_vaults.
pub trait WeightInfo {
	fn on_initialize_failure(b: u32, ) -> Weight;
	fn on_initialize_success() -> Weight;
	fn report_keygen_outcome() -> Weight;
	fn on_keygen_verification_result() -> Weight;
	fn vault_key_rotated() -> Weight;
	fn vault_key_rotated_externally() -> Weight;
	fn set_keygen_timeout() -> Weight;
}

/// Weights for pallet_cf_vaults using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: EthereumVault PendingVaultRotation (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:1 w:0)
	// Storage: EthereumVault IncompatibleVoters (r:1 w:0)
	// Storage: EthereumVault FailureVoters (r:1 w:1)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation Suspensions (r:1 w:1)
	// Storage: EthereumVault KeygenResolutionPendingSince (r:0 w:1)
	fn on_initialize_failure(_b: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(203_200_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(31 as Weight))
			.saturating_add(T::DbWeight::get().writes(29 as Weight))
	}
	// Storage: EthereumVault PendingVaultRotation (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner RetryQueues (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:0 w:1)
	// Storage: EthereumVault KeygenResolutionPendingSince (r:0 w:1)
	// Storage: EthereumThresholdSigner OpenRequests (r:0 w:1)
	// Storage: EthereumThresholdSigner Signatures (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	fn on_initialize_success() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(61_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	// Storage: EthereumVault PendingVaultRotation (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:1 w:1)
	fn report_keygen_outcome() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(35_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: EthereumThresholdSigner Signatures (r:1 w:2)
	// Storage: Environment KeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment GlobalSignatureNonce (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner RetryQueues (r:1 w:1)
	// Storage: EthereumVault PendingVaultRotation (r:0 w:1)
	// Storage: EthereumThresholdSigner OpenRequests (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	fn on_keygen_verification_result() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(73_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	// Storage: EthereumVault PendingVaultRotation (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: EthereumVault Vaults (r:0 w:1)
	fn vault_key_rotated() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(18_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Environment CurrentSystemState (r:1 w:1)
	// Storage: EthereumVault Vaults (r:0 w:1)
	fn vault_key_rotated_externally() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(22_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: EthereumVault KeygenResponseTimeout (r:1 w:1)
	fn set_keygen_timeout() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(13_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthereumVault PendingVaultRotation (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:1 w:0)
	// Storage: EthereumVault IncompatibleVoters (r:1 w:0)
	// Storage: EthereumVault FailureVoters (r:1 w:1)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation Suspensions (r:1 w:1)
	// Storage: EthereumVault KeygenResolutionPendingSince (r:0 w:1)
	fn on_initialize_failure(_b: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(203_200_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(31 as Weight))
			.saturating_add(RocksDbWeight::get().writes(29 as Weight))
	}
	// Storage: EthereumVault PendingVaultRotation (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner RetryQueues (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:0 w:1)
	// Storage: EthereumVault KeygenResolutionPendingSince (r:0 w:1)
	// Storage: EthereumThresholdSigner OpenRequests (r:0 w:1)
	// Storage: EthereumThresholdSigner Signatures (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	fn on_initialize_success() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(61_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	// Storage: EthereumVault PendingVaultRotation (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:1 w:1)
	fn report_keygen_outcome() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(35_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: EthereumThresholdSigner Signatures (r:1 w:2)
	// Storage: Environment KeyManagerAddress (r:1 w:0)
	// Storage: Environment EthereumChainId (r:1 w:0)
	// Storage: Environment GlobalSignatureNonce (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner RetryQueues (r:1 w:1)
	// Storage: EthereumVault PendingVaultRotation (r:0 w:1)
	// Storage: EthereumThresholdSigner OpenRequests (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	fn on_keygen_verification_result() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(73_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	// Storage: EthereumVault PendingVaultRotation (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: EthereumVault Vaults (r:0 w:1)
	fn vault_key_rotated() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(18_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: Environment CurrentSystemState (r:1 w:1)
	// Storage: EthereumVault Vaults (r:0 w:1)
	fn vault_key_rotated_externally() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(22_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: EthereumVault KeygenResponseTimeout (r:1 w:1)
	fn set_keygen_timeout() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(13_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
