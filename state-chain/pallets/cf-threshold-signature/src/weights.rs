//! Autogenerated weights for pallet_cf_threshold_signature
//!
//! THIS FILE WAS AUTO-GENERATED USING CHAINFLIP NODE BENCHMARK CMD VERSION 4.0.0-dev
//! DATE: 2022-10-21, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("three-node-test"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --chain
// three-node-test
// --extrinsic
// *
// --pallet
// pallet_cf_threshold-signature
// --output
// state-chain/pallets/cf-threshold-signature/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_threshold_signature.
pub trait WeightInfo {
	fn signature_success() -> Weight;
	fn report_signature_failed(a: u32, ) -> Weight;
	fn determine_offenders(a: u32, ) -> Weight;
	fn set_threshold_signature_timeout() -> Weight;
	fn on_initialize(a: u32, r: u32, ) -> Weight;
	fn report_offenders(o: u32, ) -> Weight;
}

/// Weights for pallet_cf_threshold_signature using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: EthereumThresholdSigner PendingCeremonies (r:1 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:1 w:0)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	fn signature_success() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(55_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: AccountTypes AccountRoles (r:1 w:0)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:1 w:1)
	fn report_signature_failed(_a: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(41_020_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn determine_offenders(a: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(1_609_000)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(36_000)
.saturating_mul(a as u64)
)
	}
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:1)
	fn set_threshold_signature_timeout() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(26_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner RetryQueues (r:2 w:2)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:50 w:100)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Suspensions (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	fn on_initialize(a: u32, r: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(16_564_000)
			// Standard Error: 27_000
			.saturating_add(Weight::from_ref_time(213_000)
.saturating_mul(a as u64)
)
			// Standard Error: 74_000
			.saturating_add(Weight::from_ref_time(49_928_000)
.saturating_mul(r as u64)
)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().reads(1).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes(2).saturating_mul(r as u64))
	}
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation Suspensions (r:1 w:1)
	fn report_offenders(o: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(20_828_000)
			// Standard Error: 21_000
			.saturating_add(Weight::from_ref_time(10_862_000)
.saturating_mul(o as u64)
)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads(1).saturating_mul(o as u64))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes(1).saturating_mul(o as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthereumThresholdSigner PendingCeremonies (r:1 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:1 w:0)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	fn signature_success() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(55_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: AccountTypes AccountRoles (r:1 w:0)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:1 w:1)
	fn report_signature_failed(_a: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(41_020_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn determine_offenders(a: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(1_609_000)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(36_000)
.saturating_mul(a as u64)
)
	}
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:1)
	fn set_threshold_signature_timeout() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(26_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner RetryQueues (r:2 w:2)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:50 w:100)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Suspensions (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Validator HistoricalAuthorities (r:1 w:0)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	fn on_initialize(a: u32, r: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(16_564_000)
			// Standard Error: 27_000
			.saturating_add(Weight::from_ref_time(213_000)
.saturating_mul(a as u64)
)
			// Standard Error: 74_000
			.saturating_add(Weight::from_ref_time(49_928_000)
.saturating_mul(r as u64)
)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().reads(1).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().writes(4))
			.saturating_add(RocksDbWeight::get().writes(2).saturating_mul(r as u64))
	}
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation Suspensions (r:1 w:1)
	fn report_offenders(o: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		Weight::from_ref_time(20_828_000)
			// Standard Error: 21_000
			.saturating_add(Weight::from_ref_time(10_862_000)
.saturating_mul(o as u64)
)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().reads(1).saturating_mul(o as u64))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes(1).saturating_mul(o as u64))
	}
}
