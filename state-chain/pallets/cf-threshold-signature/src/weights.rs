//! Autogenerated weights for pallet_cf_threshold_signature
//!
//! THIS FILE WAS AUTO-GENERATED USING CHAINFLIP NODE BENCHMARK CMD VERSION 4.0.0-dev
//! DATE: 2022-07-20, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("three-node-test"), DB CACHE: 1024

// Executed Command:
// ./target/release/chainflip-node
// benchmark
// pallet
// --chain
// three-node-test
// --extrinsic
// *
// --pallet
// pallet_cf_threshold_signature
// --output
// state-chain/pallets/cf-threshold-signature/src/weights.rs
// --execution=native
// --steps=2
// --repeat=2
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_cf_threshold_signature.
pub trait WeightInfo {
	fn signature_success() -> Weight;
	fn report_signature_failed(a: u32, ) -> Weight;
	fn determine_offenders(a: u32, ) -> Weight;
	fn set_threshold_signature_timeout() -> Weight;
	fn on_initialize(a: u32, r: u32, ) -> Weight;
	fn report_offenders(o: u32, ) -> Weight;
}

/// Weights for pallet_cf_threshold_signature using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	// Storage: EthereumThresholdSigner OpenRequests (r:1 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:1 w:0)
	// Storage: EthereumThresholdSigner Signatures (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	fn signature_success() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(14_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: EthereumThresholdSigner PendingCeremonies (r:1 w:1)
	fn report_signature_failed(_a: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(11_500_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn determine_offenders(a: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(232_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((18_000 as Weight).saturating_mul(a as Weight))
	}
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:1)
	fn set_threshold_signature_timeout() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(9_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: EthereumThresholdSigner RetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:50 w:100)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:1)
	// Storage: EthereumThresholdSigner OpenRequests (r:50 w:100)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	fn on_initialize(a: u32, r: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(0 as Weight)
			// Standard Error: 64_000
			.saturating_add((2_357_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 180_000
			.saturating_add((20_350_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation Suspensions (r:1 w:1)
	fn report_offenders(o: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(9_949_000 as Weight)
			// Standard Error: 62_000
			.saturating_add((2_801_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(o as Weight)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthereumThresholdSigner OpenRequests (r:1 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:1 w:0)
	// Storage: EthereumThresholdSigner Signatures (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	fn signature_success() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(14_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: EthereumThresholdSigner PendingCeremonies (r:1 w:1)
	fn report_signature_failed(_a: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(11_500_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn determine_offenders(a: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(232_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((18_000 as Weight).saturating_mul(a as Weight))
	}
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:1)
	fn set_threshold_signature_timeout() -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(9_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: EthereumThresholdSigner RetryQueues (r:1 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:50 w:100)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Suspensions (r:3 w:1)
	// Storage: EthereumThresholdSigner OpenRequests (r:50 w:100)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: Validator CurrentEpoch (r:1 w:0)
	// Storage: EthereumVault Vaults (r:1 w:0)
	// Storage: Validator EpochAuthorityCount (r:1 w:0)
	// Storage: Validator CurrentAuthorities (r:1 w:0)
	// Storage: EthereumThresholdSigner LiveCeremonies (r:0 w:1)
	fn on_initialize(a: u32, r: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(0 as Weight)
			// Standard Error: 64_000
			.saturating_add((2_357_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 180_000
			.saturating_add((20_350_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation Suspensions (r:1 w:1)
	fn report_offenders(o: u32, ) -> Weight {
		#[allow(clippy::unnecessary_cast)]
		(9_949_000 as Weight)
			// Standard Error: 62_000
			.saturating_add((2_801_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(o as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(o as Weight)))
	}
}
