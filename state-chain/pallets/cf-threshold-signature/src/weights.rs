
//! Autogenerated weights for pallet_cf_threshold_signature
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-03, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-9-222`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./chainflip-node
// benchmark
// pallet
// --pallet
// pallet_cf_threshold_signature
// --extrinsic
// *
// --output
// state-chain/pallets/cf-threshold-signature/src/weights.rs
// --execution=wasm
// --steps=20
// --repeat=10
// --template=state-chain/chainflip-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_cf_threshold_signature.
pub trait WeightInfo {
	fn signature_success() -> Weight;
	fn report_signature_failed(a: u32, ) -> Weight;
	fn set_threshold_signature_timeout() -> Weight;
	fn on_initialize(a: u32, r: u32, ) -> Weight;
	fn report_offenders(o: u32, ) -> Weight;
	fn report_keygen_outcome() -> Weight;
	fn on_keygen_verification_result() -> Weight;
	fn set_keygen_response_timeout() -> Weight;
	fn on_initialize_failure(b: u32, ) -> Weight;
	fn on_initialize_success() -> Weight;
}

/// Weights for pallet_cf_threshold_signature using the Substrate node and recommended hardware.
pub struct PalletWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PalletWeight<T> {
	/// Storage: `EthereumThresholdSigner::PendingCeremonies` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::RequestCallback` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::RequestCallback` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::PendingRequestInstructions` (r:0 w:1)
	/// Proof: `EthereumThresholdSigner::PendingRequestInstructions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::Signature` (r:0 w:1)
	/// Proof: `EthereumThresholdSigner::Signature` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn signature_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410`
		//  Estimated: `3875`
		// Minimum execution time: 30_594_000 picoseconds.
		Weight::from_parts(31_895_000, 3875)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `EthereumThresholdSigner::PendingCeremonies` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 100]`.
	fn report_signature_failed(_a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1104`
		//  Estimated: `4569`
		// Minimum execution time: 38_440_000 picoseconds.
		Weight::from_parts(40_914_421, 4569)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_threshold_signature_timeout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1621`
		// Minimum execution time: 12_379_000 picoseconds.
		Weight::from_parts(12_938_000, 1621)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::CeremonyRetryQueues` (r:2 w:2)
	/// Proof: `EthereumThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::PendingCeremonies` (r:50 w:100)
	/// Proof: `EthereumThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:1)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumVault::CurrentKeyEpochAndState` (r:1 w:0)
	/// Proof: `EthereumVault::CurrentKeyEpochAndState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumVault::Vaults` (r:1 w:0)
	/// Proof: `EthereumVault::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumVault::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EthereumVault::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::RequestRetryQueue` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::RequestRetryQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[10, 150]`.
	/// The range of component `r` is `[0, 50]`.
	fn on_initialize(a: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1390 + a * (32 ±0) + r * (177 ±0)`
		//  Estimated: `12282 + a * (34 ±0) + r * (2652 ±0)`
		// Minimum execution time: 17_504_000 picoseconds.
		Weight::from_parts(46_412_501, 12282)
			// Standard Error: 23_988
			.saturating_add(Weight::from_parts(76_332, 0).saturating_mul(a.into()))
			// Standard Error: 66_686
			.saturating_add(Weight::from_parts(35_980_968, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2652).saturating_mul(r.into()))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:100 w:100)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:1 w:1)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `o` is `[1, 100]`.
	fn report_offenders(o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `611`
		//  Estimated: `4076 + o * (2475 ±0)`
		// Minimum execution time: 23_263_000 picoseconds.
		Weight::from_parts(16_657_920, 4076)
			// Standard Error: 9_054
			.saturating_add(Weight::from_parts(6_198_361, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(o.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(o.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(o.into()))
	}
	// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: EthereumVault PendingKeyRotation (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:1 w:1)
	fn report_keygen_outcome() -> Weight {
		// Minimum execution time: 44_000 nanoseconds.
		Weight::from_parts(47_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: EthereumThresholdSigner Signature (r:1 w:1)
	// Storage: EthereumVault PendingKeyRotation (r:0 w:1)
	fn on_keygen_verification_result() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
		// Storage: EthereumVault KeygenResponseTimeout (r:1 w:1)
		fn set_keygen_response_timeout() -> Weight {
			// Minimum execution time: 14_000 nanoseconds.
			Weight::from_parts(15_000_000, 0)
				.saturating_add(T::DbWeight::get().reads(1))
				.saturating_add(T::DbWeight::get().writes(1))
		}
			// Storage: EthereumVault PendingKeyRotation (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:1 w:0)
	// Storage: EthereumVault FailureVoters (r:1 w:1)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation Suspensions (r:1 w:1)
	// Storage: EthereumVault KeygenResolutionPendingSince (r:0 w:1)
	/// The range of component `b` is `[1, 100]`.
	fn on_initialize_failure(_b: u32, ) -> Weight {
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_parts(140_533_616, 0)
			.saturating_add(T::DbWeight::get().reads(28))
			.saturating_add(T::DbWeight::get().writes(27))
	}
	// Storage: EthereumVault PendingKeyRotation (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:0 w:1)
	// Storage: EthereumVault KeygenResolutionPendingSince (r:0 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	fn on_initialize_success() -> Weight {
		// Minimum execution time: 74_000 nanoseconds.
		Weight::from_parts(92_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(9))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
		// Storage: EthereumVault PendingKeyRotation (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:1 w:0)
	// Storage: EthereumVault FailureVoters (r:1 w:1)
	// Storage: Reputation Penalties (r:1 w:0)
	// Storage: Reputation Reputations (r:1 w:1)
	// Storage: Reputation Suspensions (r:1 w:1)
	// Storage: EthereumVault KeygenResolutionPendingSince (r:0 w:1)
	/// The range of component `b` is `[1, 100]`.
	fn on_initialize_failure(_b: u32, ) -> Weight {
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_parts(140_533_616, 0)
			.saturating_add(RocksDbWeight::get().reads(28))
			.saturating_add(RocksDbWeight::get().writes(27))
	}
	// Storage: EthereumVault PendingKeyRotation (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureRequestIdCounter (r:1 w:1)
	// Storage: Validator CeremonyIdCounter (r:1 w:1)
	// Storage: EthereumThresholdSigner ThresholdSignatureResponseTimeout (r:1 w:0)
	// Storage: EthereumThresholdSigner CeremonyRetryQueues (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:0 w:1)
	// Storage: EthereumVault KeygenResolutionPendingSince (r:0 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	// Storage: EthereumThresholdSigner PendingCeremonies (r:0 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:0 w:1)
	fn on_initialize_success() -> Weight {
		// Minimum execution time: 74_000 nanoseconds.
		Weight::from_parts(92_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	// Storage: EthereumThresholdSigner PendingCeremonies (r:1 w:1)
	// Storage: EthereumThresholdSigner RequestCallback (r:1 w:0)
	// Storage: EthereumThresholdSigner PendingRequestInstructions (r:0 w:1)
	// Storage: EthereumThresholdSigner Signature (r:0 w:1)
	fn signature_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `410`
		//  Estimated: `3875`
		// Minimum execution time: 30_594_000 picoseconds.
		Weight::from_parts(31_895_000, 3875)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `AccountRoles::AccountRoles` (r:1 w:0)
	/// Proof: `AccountRoles::AccountRoles` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `EthereumThresholdSigner::PendingCeremonies` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::CeremonyRetryQueues` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 100]`.
	fn report_signature_failed(_a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1104`
		//  Estimated: `4569`
		// Minimum execution time: 38_440_000 picoseconds.
		Weight::from_parts(40_914_421, 4569)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:1)
	/// Proof: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_threshold_signature_timeout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1621`
		// Minimum execution time: 12_379_000 picoseconds.
		Weight::from_parts(12_938_000, 1621)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::ThresholdSignatureResponseTimeout` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::CeremonyRetryQueues` (r:2 w:2)
	/// Proof: `EthereumThresholdSigner::CeremonyRetryQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::PendingCeremonies` (r:50 w:100)
	/// Proof: `EthereumThresholdSigner::PendingCeremonies` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:4 w:1)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumVault::CurrentKeyEpochAndState` (r:1 w:0)
	/// Proof: `EthereumVault::CurrentKeyEpochAndState` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumVault::Vaults` (r:1 w:0)
	/// Proof: `EthereumVault::Vaults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::HistoricalAuthorities` (r:1 w:0)
	/// Proof: `Validator::HistoricalAuthorities` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumVault::CeremonyIdCounter` (r:1 w:1)
	/// Proof: `EthereumVault::CeremonyIdCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumThresholdSigner::RequestRetryQueue` (r:1 w:0)
	/// Proof: `EthereumThresholdSigner::RequestRetryQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Validator::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Validator::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[10, 150]`.
	/// The range of component `r` is `[0, 50]`.
	fn on_initialize(a: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1390 + a * (32 ±0) + r * (177 ±0)`
		//  Estimated: `12282 + a * (34 ±0) + r * (2652 ±0)`
		// Minimum execution time: 17_504_000 picoseconds.
		Weight::from_parts(46_412_501, 12282)
			// Standard Error: 23_988
			.saturating_add(Weight::from_parts(76_332, 0).saturating_mul(a.into()))
			// Standard Error: 66_686
			.saturating_add(Weight::from_parts(35_980_968, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2652).saturating_mul(r.into()))
	}
	/// Storage: `Environment::RuntimeSafeMode` (r:1 w:0)
	/// Proof: `Environment::RuntimeSafeMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Penalties` (r:1 w:0)
	/// Proof: `Reputation::Penalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Reputations` (r:100 w:100)
	/// Proof: `Reputation::Reputations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Reputation::Suspensions` (r:1 w:1)
	/// Proof: `Reputation::Suspensions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `o` is `[1, 100]`.
	fn report_offenders(o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `611`
		//  Estimated: `4076 + o * (2475 ±0)`
		// Minimum execution time: 23_263_000 picoseconds.
		Weight::from_parts(16_657_920, 4076)
			// Standard Error: 9_054
			.saturating_add(Weight::from_parts(6_198_361, 0).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(o.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(o.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(o.into()))
	}
		// Storage: AccountRoles AccountRoles (r:1 w:0)
	// Storage: EthereumVault PendingKeyRotation (r:1 w:1)
	// Storage: EthereumVault SuccessVoters (r:1 w:1)
	fn report_keygen_outcome() -> Weight {
		// Minimum execution time: 44_000 nanoseconds.
		Weight::from_parts(47_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: EthereumThresholdSigner Signature (r:1 w:1)
	// Storage: EthereumVault PendingKeyRotation (r:0 w:1)
	fn on_keygen_verification_result() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_parts(19_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
		// Storage: EthereumVault KeygenResponseTimeout (r:1 w:1)
		fn set_keygen_response_timeout() -> Weight {
			// Minimum execution time: 14_000 nanoseconds.
			Weight::from_parts(15_000_000, 0)
				.saturating_add(RocksDbWeight::get().reads(1))
				.saturating_add(RocksDbWeight::get().writes(1))
		}
}
