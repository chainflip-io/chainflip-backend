{
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "internalType": "struct IShared.Key",
          "name": "aggKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "internalType": "struct IShared.Key",
          "name": "govKey",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "signedByAggKey",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IShared.Key",
          "name": "oldKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IShared.Key",
          "name": "newKey",
          "type": "tuple"
        }
      ],
      "name": "KeyChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAggregateKey",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "internalType": "struct IShared.Key",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernanceKey",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "internalType": "struct IShared.Key",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastValidateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IShared.KeyID",
          "name": "keyID",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "isNonceUsedByKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sig",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct IShared.SigData",
          "name": "sigData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "contractMsgHash",
          "type": "bytes32"
        },
        {
          "internalType": "enum IShared.KeyID",
          "name": "keyID",
          "type": "uint8"
        }
      ],
      "name": "isValidSig",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sig",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct IShared.SigData",
          "name": "sigData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "internalType": "struct IShared.Key",
          "name": "newKey",
          "type": "tuple"
        }
      ],
      "name": "setAggKeyWithAggKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sig",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct IShared.SigData",
          "name": "sigData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "internalType": "struct IShared.Key",
          "name": "newKey",
          "type": "tuple"
        }
      ],
      "name": "setAggKeyWithGovKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sig",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct IShared.SigData",
          "name": "sigData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pubKeyX",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "pubKeyYParity",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nonceTimesGAddr",
              "type": "address"
            }
          ],
          "internalType": "struct IShared.Key",
          "name": "newKey",
          "type": "tuple"
        }
      ],
      "name": "setGovKeyWithGovKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "13": "contracts/KeyManager.sol",
    "16": "contracts/abstract/SchnorrSECP256K1.sol",
    "17": "contracts/abstract/Shared.sol",
    "20": "contracts/interfaces/IKeyManager.sol",
    "21": "contracts/interfaces/IShared.sol"
  },
  "ast": {
    "absolutePath": "contracts/KeyManager.sol",
    "exportedSymbols": {
      "IKeyManager": [
        2207
      ],
      "IShared": [
        2228
      ],
      "KeyManager": [
        517
      ],
      "SchnorrSECP256K1": [
        1932
      ],
      "Shared": [
        2023
      ]
    },
    "id": 518,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 120,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:13"
      },
      {
        "absolutePath": "contracts/interfaces/IKeyManager.sol",
        "file": "./interfaces/IKeyManager.sol",
        "id": 121,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 518,
        "sourceUnit": 2208,
        "src": "26:38:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/abstract/SchnorrSECP256K1.sol",
        "file": "./abstract/SchnorrSECP256K1.sol",
        "id": 122,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 518,
        "sourceUnit": 1933,
        "src": "65:41:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/abstract/Shared.sol",
        "file": "./abstract/Shared.sol",
        "id": 123,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 518,
        "sourceUnit": 2024,
        "src": "107:31:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 125,
              "name": "SchnorrSECP256K1",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1932,
              "src": "416:16:13"
            },
            "id": 126,
            "nodeType": "InheritanceSpecifier",
            "src": "416:16:13"
          },
          {
            "baseName": {
              "id": 127,
              "name": "Shared",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2023,
              "src": "434:6:13"
            },
            "id": 128,
            "nodeType": "InheritanceSpecifier",
            "src": "434:6:13"
          },
          {
            "baseName": {
              "id": 129,
              "name": "IKeyManager",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2207,
              "src": "442:11:13"
            },
            "id": 130,
            "nodeType": "InheritanceSpecifier",
            "src": "442:11:13"
          }
        ],
        "contractDependencies": [
          1932,
          2023,
          2207,
          2228
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 124,
          "nodeType": "StructuredDocumentation",
          "src": "141:251:13",
          "text": " @title    KeyManager contract\n @notice   Holds the aggregate and governance keys, functions to update them, \n           and isValidSig so other contracts can verify signatures and updates _lastValidateTime\n @author   Quantaf1re (James Key)"
        },
        "fullyImplemented": true,
        "id": 517,
        "linearizedBaseContracts": [
          517,
          2207,
          2023,
          2228,
          1932
        ],
        "name": "KeyManager",
        "nameLocation": "402:10:13",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 133,
            "mutability": "constant",
            "name": "_AGG_KEY_TIMEOUT",
            "nameLocation": "483:16:13",
            "nodeType": "VariableDeclaration",
            "scope": 517,
            "src": "461:47:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 131,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "461:4:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "32",
              "id": 132,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "502:6:13",
              "subdenomination": "days",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_172800_by_1",
                "typeString": "int_const 172800"
              },
              "value": "2"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "documentation": {
              "id": 134,
              "nodeType": "StructuredDocumentation",
              "src": "515:223:13",
              "text": "@dev    Used to get the key with the keyID. This prevents isValidSig being called\n         by keys that aren't the aggKey or govKey, which prevents outsiders being\n         able to change _lastValidateTime"
            },
            "id": 140,
            "mutability": "mutable",
            "name": "_keyIDToKey",
            "nameLocation": "773:11:13",
            "nodeType": "VariableDeclaration",
            "scope": 517,
            "src": "743:41:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
              "typeString": "mapping(enum IShared.KeyID => struct IShared.Key)"
            },
            "typeName": {
              "id": 139,
              "keyType": {
                "id": 136,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 135,
                  "name": "KeyID",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2213,
                  "src": "751:5:13"
                },
                "referencedDeclaration": 2213,
                "src": "751:5:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_KeyID_$2213",
                  "typeString": "enum IShared.KeyID"
                }
              },
              "nodeType": "Mapping",
              "src": "743:21:13",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                "typeString": "mapping(enum IShared.KeyID => struct IShared.Key)"
              },
              "valueType": {
                "id": 138,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 137,
                  "name": "Key",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2220,
                  "src": "760:3:13"
                },
                "referencedDeclaration": 2220,
                "src": "760:3:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                  "typeString": "struct IShared.Key"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "documentation": {
              "id": 141,
              "nodeType": "StructuredDocumentation",
              "src": "790:80:13",
              "text": "@dev    The last time that a sig was verified (used for a dead man's switch)"
            },
            "id": 143,
            "mutability": "mutable",
            "name": "_lastValidateTime",
            "nameLocation": "888:17:13",
            "nodeType": "VariableDeclaration",
            "scope": 517,
            "src": "875:30:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 142,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "875:4:13",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 150,
            "mutability": "mutable",
            "name": "_keyToNoncesUsed",
            "nameLocation": "959:16:13",
            "nodeType": "VariableDeclaration",
            "scope": 517,
            "src": "911:64:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_mapping$_t_uint256_$_t_bool_$_$",
              "typeString": "mapping(enum IShared.KeyID => mapping(uint256 => bool))"
            },
            "typeName": {
              "id": 149,
              "keyType": {
                "id": 145,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 144,
                  "name": "KeyID",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2213,
                  "src": "919:5:13"
                },
                "referencedDeclaration": 2213,
                "src": "919:5:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_KeyID_$2213",
                  "typeString": "enum IShared.KeyID"
                }
              },
              "nodeType": "Mapping",
              "src": "911:39:13",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_mapping$_t_uint256_$_t_bool_$_$",
                "typeString": "mapping(enum IShared.KeyID => mapping(uint256 => bool))"
              },
              "valueType": {
                "id": 148,
                "keyType": {
                  "id": 146,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "936:4:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "928:21:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                  "typeString": "mapping(uint256 => bool)"
                },
                "valueType": {
                  "id": 147,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "944:4:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "id": 160,
            "name": "KeyChange",
            "nameLocation": "989:9:13",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 159,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 152,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "signedByAggKey",
                  "nameLocation": "1013:14:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 160,
                  "src": "1008:19:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 151,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1008:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 155,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldKey",
                  "nameLocation": "1041:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 160,
                  "src": "1037:10:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 154,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 153,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "1037:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "1037:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 158,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newKey",
                  "nameLocation": "1061:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 160,
                  "src": "1057:10:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 157,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 156,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "1057:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "1057:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "998:75:13"
            },
            "src": "983:91:13"
          },
          {
            "body": {
              "id": 188,
              "nodeType": "Block",
              "src": "1131:134:13",
              "statements": [
                {
                  "expression": {
                    "id": 174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 169,
                        "name": "_keyIDToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 140,
                        "src": "1141:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                          "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                        }
                      },
                      "id": 172,
                      "indexExpression": {
                        "expression": {
                          "id": 170,
                          "name": "KeyID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2213,
                          "src": "1153:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                            "typeString": "type(enum IShared.KeyID)"
                          }
                        },
                        "id": 171,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "Agg",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2211,
                        "src": "1153:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_KeyID_$2213",
                          "typeString": "enum IShared.KeyID"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1141:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_storage",
                        "typeString": "struct IShared.Key storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 173,
                      "name": "aggKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 163,
                      "src": "1166:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                        "typeString": "struct IShared.Key memory"
                      }
                    },
                    "src": "1141:31:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage",
                      "typeString": "struct IShared.Key storage ref"
                    }
                  },
                  "id": 175,
                  "nodeType": "ExpressionStatement",
                  "src": "1141:31:13"
                },
                {
                  "expression": {
                    "id": 181,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 176,
                        "name": "_keyIDToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 140,
                        "src": "1182:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                          "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                        }
                      },
                      "id": 179,
                      "indexExpression": {
                        "expression": {
                          "id": 177,
                          "name": "KeyID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2213,
                          "src": "1194:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                            "typeString": "type(enum IShared.KeyID)"
                          }
                        },
                        "id": 178,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "Gov",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2212,
                        "src": "1194:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_KeyID_$2213",
                          "typeString": "enum IShared.KeyID"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1182:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_storage",
                        "typeString": "struct IShared.Key storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 180,
                      "name": "govKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 166,
                      "src": "1207:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                        "typeString": "struct IShared.Key memory"
                      }
                    },
                    "src": "1182:31:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage",
                      "typeString": "struct IShared.Key storage ref"
                    }
                  },
                  "id": 182,
                  "nodeType": "ExpressionStatement",
                  "src": "1182:31:13"
                },
                {
                  "expression": {
                    "id": 186,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 183,
                      "name": "_lastValidateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 143,
                      "src": "1223:17:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 184,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "1243:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 185,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "1243:15:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1223:35:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 187,
                  "nodeType": "ExpressionStatement",
                  "src": "1223:35:13"
                }
              ]
            },
            "id": 189,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 167,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 163,
                  "mutability": "mutable",
                  "name": "aggKey",
                  "nameLocation": "1104:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 189,
                  "src": "1093:17:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 162,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 161,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "1093:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "1093:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 166,
                  "mutability": "mutable",
                  "name": "govKey",
                  "nameLocation": "1123:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 189,
                  "src": "1112:17:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 165,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 164,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "1112:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "1112:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1092:38:13"
            },
            "returnParameters": {
              "id": 168,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1131:0:13"
            },
            "scope": 517,
            "src": "1081:184:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2152
            ],
            "body": {
              "id": 265,
              "nodeType": "Block",
              "src": "2927:645:13",
              "statements": [
                {
                  "assignments": [
                    206
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 206,
                      "mutability": "mutable",
                      "name": "key",
                      "nameLocation": "2948:3:13",
                      "nodeType": "VariableDeclaration",
                      "scope": 265,
                      "src": "2937:14:13",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                        "typeString": "struct IShared.Key"
                      },
                      "typeName": {
                        "id": 205,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 204,
                          "name": "Key",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 2220,
                          "src": "2937:3:13"
                        },
                        "referencedDeclaration": 2220,
                        "src": "2937:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                          "typeString": "struct IShared.Key"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 210,
                  "initialValue": {
                    "baseExpression": {
                      "id": 207,
                      "name": "_keyIDToKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 140,
                      "src": "2954:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                        "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                      }
                    },
                    "id": 209,
                    "indexExpression": {
                      "id": 208,
                      "name": "keyID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 198,
                      "src": "2966:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_KeyID_$2213",
                        "typeString": "enum IShared.KeyID"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2954:18:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage",
                      "typeString": "struct IShared.Key storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2937:35:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 218,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 212,
                            "name": "sigData",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "2990:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                              "typeString": "struct IShared.SigData calldata"
                            }
                          },
                          "id": 213,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "msgHash",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2222,
                          "src": "2990:15:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 216,
                              "name": "contractMsgHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 195,
                              "src": "3014:15:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 215,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3009:4:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 214,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "3009:4:13",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 217,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3009:21:13",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2990:40:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4b65794d616e616765723a20696e76616c6964206d736748617368",
                        "id": 219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3032:29:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b30a3cdab0e3c7c38e92d2957b4f497f057ba35c6516688e15586f5c1abfb61b",
                          "typeString": "literal_string \"KeyManager: invalid msgHash\""
                        },
                        "value": "KeyManager: invalid msgHash"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b30a3cdab0e3c7c38e92d2957b4f497f057ba35c6516688e15586f5c1abfb61b",
                          "typeString": "literal_string \"KeyManager: invalid msgHash\""
                        }
                      ],
                      "id": 211,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2982:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2982:80:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 221,
                  "nodeType": "ExpressionStatement",
                  "src": "2982:80:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 224,
                              "name": "sigData",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 193,
                              "src": "3126:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                                "typeString": "struct IShared.SigData calldata"
                              }
                            },
                            "id": 225,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "msgHash",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2222,
                            "src": "3126:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 226,
                              "name": "sigData",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 193,
                              "src": "3159:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                                "typeString": "struct IShared.SigData calldata"
                              }
                            },
                            "id": 227,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sig",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2224,
                            "src": "3159:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 228,
                              "name": "key",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 206,
                              "src": "3188:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                                "typeString": "struct IShared.Key memory"
                              }
                            },
                            "id": 229,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pubKeyX",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2215,
                            "src": "3188:11:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 230,
                              "name": "key",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 206,
                              "src": "3217:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                                "typeString": "struct IShared.Key memory"
                              }
                            },
                            "id": 231,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pubKeyYParity",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2217,
                            "src": "3217:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "expression": {
                              "id": 232,
                              "name": "key",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 206,
                              "src": "3252:3:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                                "typeString": "struct IShared.Key memory"
                              }
                            },
                            "id": 233,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "nonceTimesGAddr",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2219,
                            "src": "3252:19:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 223,
                          "name": "verifySignature",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1931,
                          "src": "3093:15:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint8_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256,uint256,uint8,address) pure returns (bool)"
                          }
                        },
                        "id": 234,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3093:192:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4b65794d616e616765723a2053696720696e76616c6964",
                        "id": 235,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3299:25:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e085a3e437e6dfa231dbecbae74b0b224d03446ad75c36740b80a75721d3a448",
                          "typeString": "literal_string \"KeyManager: Sig invalid\""
                        },
                        "value": "KeyManager: Sig invalid"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e085a3e437e6dfa231dbecbae74b0b224d03446ad75c36740b80a75721d3a448",
                          "typeString": "literal_string \"KeyManager: Sig invalid\""
                        }
                      ],
                      "id": 222,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3072:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 236,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3072:262:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 237,
                  "nodeType": "ExpressionStatement",
                  "src": "3072:262:13"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 245,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "3352:39:13",
                        "subExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 239,
                              "name": "_keyToNoncesUsed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 150,
                              "src": "3353:16:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_mapping$_t_uint256_$_t_bool_$_$",
                                "typeString": "mapping(enum IShared.KeyID => mapping(uint256 => bool))"
                              }
                            },
                            "id": 241,
                            "indexExpression": {
                              "id": 240,
                              "name": "keyID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 198,
                              "src": "3370:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_KeyID_$2213",
                                "typeString": "enum IShared.KeyID"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3353:23:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                              "typeString": "mapping(uint256 => bool)"
                            }
                          },
                          "id": 244,
                          "indexExpression": {
                            "expression": {
                              "id": 242,
                              "name": "sigData",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 193,
                              "src": "3377:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                                "typeString": "struct IShared.SigData calldata"
                              }
                            },
                            "id": 243,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "nonce",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2226,
                            "src": "3377:13:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3353:38:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4b65794d616e616765723a206e6f6e636520616c72656164792075736564",
                        "id": 246,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3393:32:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9c00a9c98e88a9c4b806c498653fefa223d3bf71a91f001cfb4ae84ff8e18f9d",
                          "typeString": "literal_string \"KeyManager: nonce already used\""
                        },
                        "value": "KeyManager: nonce already used"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9c00a9c98e88a9c4b806c498653fefa223d3bf71a91f001cfb4ae84ff8e18f9d",
                          "typeString": "literal_string \"KeyManager: nonce already used\""
                        }
                      ],
                      "id": 238,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3344:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 247,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3344:82:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 248,
                  "nodeType": "ExpressionStatement",
                  "src": "3344:82:13"
                },
                {
                  "expression": {
                    "id": 252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 249,
                      "name": "_lastValidateTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 143,
                      "src": "3445:17:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 250,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "3465:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 251,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "3465:15:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3445:35:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 253,
                  "nodeType": "ExpressionStatement",
                  "src": "3445:35:13"
                },
                {
                  "expression": {
                    "id": 261,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 254,
                          "name": "_keyToNoncesUsed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 150,
                          "src": "3490:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(enum IShared.KeyID => mapping(uint256 => bool))"
                          }
                        },
                        "id": 258,
                        "indexExpression": {
                          "id": 255,
                          "name": "keyID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 198,
                          "src": "3507:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_KeyID_$2213",
                            "typeString": "enum IShared.KeyID"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3490:23:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 259,
                      "indexExpression": {
                        "expression": {
                          "id": 256,
                          "name": "sigData",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 193,
                          "src": "3514:7:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                            "typeString": "struct IShared.SigData calldata"
                          }
                        },
                        "id": 257,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "nonce",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2226,
                        "src": "3514:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3490:38:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 260,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3531:4:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "3490:45:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 262,
                  "nodeType": "ExpressionStatement",
                  "src": "3490:45:13"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3561:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 203,
                  "id": 264,
                  "nodeType": "Return",
                  "src": "3554:11:13"
                }
              ]
            },
            "documentation": {
              "id": 190,
              "nodeType": "StructuredDocumentation",
              "src": "1608:1169:13",
              "text": " @notice  Checks the validity of a signature and msgHash, then updates _lastValidateTime\n @dev     It would be nice to split this up, but these checks\n          need to be made atomicly always. This needs to be available\n          in this contract and in the Vault etc\n @param sigData   The keccak256 hash over the msg (uint) (here that's normally\n                  a hash over the calldata to the function with an empty sigData) and\n                  sig over that hash (uint) from the key input\n @param contractMsgHash   The hash of the thing being signed but generated by the contract\n                  to check it against the hash in sigData (bytes32) (here that's normally\n                  a hash over the calldata to the function with an empty sigData)\n @param keyID     The KeyID that indicates which key to verify the sig with. Ensures that\n                  only 'registered' keys can be used to successfully call this fcn and change\n                  _lastValidateTime\n @return          Bool used by caller to be absolutely sure that the function hasn't reverted"
            },
            "functionSelector": "8aa62359",
            "id": 266,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSig",
            "nameLocation": "2791:10:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 200,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2903:8:13"
            },
            "parameters": {
              "id": 199,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 193,
                  "mutability": "mutable",
                  "name": "sigData",
                  "nameLocation": "2828:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 266,
                  "src": "2811:24:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                    "typeString": "struct IShared.SigData"
                  },
                  "typeName": {
                    "id": 192,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 191,
                      "name": "SigData",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2227,
                      "src": "2811:7:13"
                    },
                    "referencedDeclaration": 2227,
                    "src": "2811:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SigData_$2227_storage_ptr",
                      "typeString": "struct IShared.SigData"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 195,
                  "mutability": "mutable",
                  "name": "contractMsgHash",
                  "nameLocation": "2853:15:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 266,
                  "src": "2845:23:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 194,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2845:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 198,
                  "mutability": "mutable",
                  "name": "keyID",
                  "nameLocation": "2884:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 266,
                  "src": "2878:11:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_KeyID_$2213",
                    "typeString": "enum IShared.KeyID"
                  },
                  "typeName": {
                    "id": 197,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 196,
                      "name": "KeyID",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2213,
                      "src": "2878:5:13"
                    },
                    "referencedDeclaration": 2213,
                    "src": "2878:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_KeyID_$2213",
                      "typeString": "enum IShared.KeyID"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2801:94:13"
            },
            "returnParameters": {
              "id": 203,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 202,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 266,
                  "src": "2921:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 201,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2921:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2920:6:13"
            },
            "scope": 517,
            "src": "2782:790:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2161
            ],
            "body": {
              "id": 316,
              "nodeType": "Block",
              "src": "4461:110:13",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "74727565",
                        "id": 301,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4486:4:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      {
                        "baseExpression": {
                          "id": 302,
                          "name": "_keyIDToKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 140,
                          "src": "4492:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                            "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                          }
                        },
                        "id": 305,
                        "indexExpression": {
                          "expression": {
                            "id": 303,
                            "name": "KeyID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2213,
                            "src": "4504:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                              "typeString": "type(enum IShared.KeyID)"
                            }
                          },
                          "id": 304,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Agg",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2211,
                          "src": "4504:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_KeyID_$2213",
                            "typeString": "enum IShared.KeyID"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4492:22:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_storage",
                          "typeString": "struct IShared.Key storage ref"
                        }
                      },
                      {
                        "id": 306,
                        "name": "newKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 273,
                        "src": "4516:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                          "typeString": "struct IShared.Key calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_struct$_Key_$2220_storage",
                          "typeString": "struct IShared.Key storage ref"
                        },
                        {
                          "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                          "typeString": "struct IShared.Key calldata"
                        }
                      ],
                      "id": 300,
                      "name": "KeyChange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 160,
                      "src": "4476:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bool_$_t_struct$_Key_$2220_memory_ptr_$_t_struct$_Key_$2220_memory_ptr_$returns$__$",
                        "typeString": "function (bool,struct IShared.Key memory,struct IShared.Key memory)"
                      }
                    },
                    "id": 307,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4476:47:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 308,
                  "nodeType": "EmitStatement",
                  "src": "4471:52:13"
                },
                {
                  "expression": {
                    "id": 314,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 309,
                        "name": "_keyIDToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 140,
                        "src": "4533:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                          "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                        }
                      },
                      "id": 312,
                      "indexExpression": {
                        "expression": {
                          "id": 310,
                          "name": "KeyID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2213,
                          "src": "4545:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                            "typeString": "type(enum IShared.KeyID)"
                          }
                        },
                        "id": 311,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "Agg",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2211,
                        "src": "4545:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_KeyID_$2213",
                          "typeString": "enum IShared.KeyID"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4533:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_storage",
                        "typeString": "struct IShared.Key storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 313,
                      "name": "newKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 273,
                      "src": "4558:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                        "typeString": "struct IShared.Key calldata"
                      }
                    },
                    "src": "4533:31:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage",
                      "typeString": "struct IShared.Key storage ref"
                    }
                  },
                  "id": 315,
                  "nodeType": "ExpressionStatement",
                  "src": "4533:31:13"
                }
              ]
            },
            "documentation": {
              "id": 267,
              "nodeType": "StructuredDocumentation",
              "src": "3578:535:13",
              "text": " @notice  Set a new aggregate key. Requires a signature from the current aggregate key\n @param sigData   The keccak256 hash over the msg (uint) (which is the calldata\n                  for this function with empty msgHash and sig) and sig over that hash\n                  from the current aggregate key (uint)\n @param newKey    The new aggregate key to be set. The x component of the pubkey (uint),\n                  the parity of the y component (uint8), and the nonce times G (address)"
            },
            "functionSelector": "81dc37d6",
            "id": 317,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 277,
                    "name": "newKey",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 273,
                    "src": "4240:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                      "typeString": "struct IShared.Key calldata"
                    }
                  }
                ],
                "id": 278,
                "modifierName": {
                  "id": 276,
                  "name": "nzKey",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2022,
                  "src": "4234:5:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "4234:13:13"
              },
              {
                "arguments": [
                  {
                    "id": 280,
                    "name": "sigData",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 270,
                    "src": "4266:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                      "typeString": "struct IShared.SigData calldata"
                    }
                  },
                  {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "id": 284,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4329:4:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_KeyManager_$517",
                                  "typeString": "contract KeyManager"
                                }
                              },
                              "id": 285,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "setAggKeyWithAggKey",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 317,
                              "src": "4329:24:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_struct$_SigData_$2227_memory_ptr_$_t_struct$_Key_$2220_memory_ptr_$returns$__$",
                                "typeString": "function (struct IShared.SigData memory,struct IShared.Key memory) external"
                              }
                            },
                            "id": 286,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "4329:33:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 288,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4384:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "hexValue": "30",
                                "id": 289,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4387:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "expression": {
                                  "id": 290,
                                  "name": "sigData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 270,
                                  "src": "4390:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                                    "typeString": "struct IShared.SigData calldata"
                                  }
                                },
                                "id": 291,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "nonce",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2226,
                                "src": "4390:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 287,
                              "name": "SigData",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2227,
                              "src": "4376:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_SigData_$2227_storage_ptr_$",
                                "typeString": "type(struct IShared.SigData storage pointer)"
                              }
                            },
                            "id": 292,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4376:28:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_SigData_$2227_memory_ptr",
                              "typeString": "struct IShared.SigData memory"
                            }
                          },
                          {
                            "id": 293,
                            "name": "newKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 273,
                            "src": "4418:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                              "typeString": "struct IShared.Key calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            {
                              "typeIdentifier": "t_struct$_SigData_$2227_memory_ptr",
                              "typeString": "struct IShared.SigData memory"
                            },
                            {
                              "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                              "typeString": "struct IShared.Key calldata"
                            }
                          ],
                          "expression": {
                            "id": 282,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4293:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 283,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSelector",
                          "nodeType": "MemberAccess",
                          "src": "4293:22:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes4) pure returns (bytes memory)"
                          }
                        },
                        "id": 294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4293:141:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 281,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "4283:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4283:152:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  {
                    "expression": {
                      "id": 296,
                      "name": "KeyID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2213,
                      "src": "4445:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                        "typeString": "type(enum IShared.KeyID)"
                      }
                    },
                    "id": 297,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "Agg",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 2211,
                    "src": "4445:9:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_KeyID_$2213",
                      "typeString": "enum IShared.KeyID"
                    }
                  }
                ],
                "id": 298,
                "modifierName": {
                  "id": 279,
                  "name": "validSig",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 516,
                  "src": "4248:8:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "4248:212:13"
              }
            ],
            "name": "setAggKeyWithAggKey",
            "nameLocation": "4127:19:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 275,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4225:8:13"
            },
            "parameters": {
              "id": 274,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 270,
                  "mutability": "mutable",
                  "name": "sigData",
                  "nameLocation": "4173:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 317,
                  "src": "4156:24:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                    "typeString": "struct IShared.SigData"
                  },
                  "typeName": {
                    "id": 269,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 268,
                      "name": "SigData",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2227,
                      "src": "4156:7:13"
                    },
                    "referencedDeclaration": 2227,
                    "src": "4156:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SigData_$2227_storage_ptr",
                      "typeString": "struct IShared.SigData"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 273,
                  "mutability": "mutable",
                  "name": "newKey",
                  "nameLocation": "4203:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 317,
                  "src": "4190:19:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 272,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 271,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "4190:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "4190:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4146:69:13"
            },
            "returnParameters": {
              "id": 299,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4461:0:13"
            },
            "scope": 517,
            "src": "4118:453:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              2170
            ],
            "body": {
              "id": 369,
              "nodeType": "Block",
              "src": "5472:111:13",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "66616c7365",
                        "id": 354,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5497:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      },
                      {
                        "baseExpression": {
                          "id": 355,
                          "name": "_keyIDToKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 140,
                          "src": "5504:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                            "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                          }
                        },
                        "id": 358,
                        "indexExpression": {
                          "expression": {
                            "id": 356,
                            "name": "KeyID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2213,
                            "src": "5516:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                              "typeString": "type(enum IShared.KeyID)"
                            }
                          },
                          "id": 357,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Agg",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2211,
                          "src": "5516:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_KeyID_$2213",
                            "typeString": "enum IShared.KeyID"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5504:22:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_storage",
                          "typeString": "struct IShared.Key storage ref"
                        }
                      },
                      {
                        "id": 359,
                        "name": "newKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 324,
                        "src": "5528:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                          "typeString": "struct IShared.Key calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_struct$_Key_$2220_storage",
                          "typeString": "struct IShared.Key storage ref"
                        },
                        {
                          "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                          "typeString": "struct IShared.Key calldata"
                        }
                      ],
                      "id": 353,
                      "name": "KeyChange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 160,
                      "src": "5487:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bool_$_t_struct$_Key_$2220_memory_ptr_$_t_struct$_Key_$2220_memory_ptr_$returns$__$",
                        "typeString": "function (bool,struct IShared.Key memory,struct IShared.Key memory)"
                      }
                    },
                    "id": 360,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5487:48:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 361,
                  "nodeType": "EmitStatement",
                  "src": "5482:53:13"
                },
                {
                  "expression": {
                    "id": 367,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 362,
                        "name": "_keyIDToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 140,
                        "src": "5545:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                          "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                        }
                      },
                      "id": 365,
                      "indexExpression": {
                        "expression": {
                          "id": 363,
                          "name": "KeyID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2213,
                          "src": "5557:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                            "typeString": "type(enum IShared.KeyID)"
                          }
                        },
                        "id": 364,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "Agg",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2211,
                        "src": "5557:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_KeyID_$2213",
                          "typeString": "enum IShared.KeyID"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5545:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_storage",
                        "typeString": "struct IShared.Key storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 366,
                      "name": "newKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 324,
                      "src": "5570:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                        "typeString": "struct IShared.Key calldata"
                      }
                    },
                    "src": "5545:31:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage",
                      "typeString": "struct IShared.Key storage ref"
                    }
                  },
                  "id": 368,
                  "nodeType": "ExpressionStatement",
                  "src": "5545:31:13"
                }
              ]
            },
            "documentation": {
              "id": 318,
              "nodeType": "StructuredDocumentation",
              "src": "4577:537:13",
              "text": " @notice  Set a new aggregate key. Requires a signature from the current governance key\n @param sigData   The keccak256 hash over the msg (uint) (which is the calldata\n                  for this function with empty msgHash and sig) and sig over that hash\n                  from the current governance key (uint)\n @param newKey    The new aggregate key to be set. The x component of the pubkey (uint),\n                  the parity of the y component (uint8), and the nonce times G (address)"
            },
            "functionSelector": "7f5586cc",
            "id": 370,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 328,
                    "name": "newKey",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 324,
                    "src": "5241:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                      "typeString": "struct IShared.Key calldata"
                    }
                  }
                ],
                "id": 329,
                "modifierName": {
                  "id": 327,
                  "name": "nzKey",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2022,
                  "src": "5235:5:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "5235:13:13"
              },
              {
                "id": 331,
                "modifierName": {
                  "id": 330,
                  "name": "validTime",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 495,
                  "src": "5249:9:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "5249:9:13"
              },
              {
                "arguments": [
                  {
                    "id": 333,
                    "name": "sigData",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 321,
                    "src": "5277:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                      "typeString": "struct IShared.SigData calldata"
                    }
                  },
                  {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "id": 337,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "5340:4:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_KeyManager_$517",
                                  "typeString": "contract KeyManager"
                                }
                              },
                              "id": 338,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "setAggKeyWithGovKey",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 370,
                              "src": "5340:24:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_struct$_SigData_$2227_memory_ptr_$_t_struct$_Key_$2220_memory_ptr_$returns$__$",
                                "typeString": "function (struct IShared.SigData memory,struct IShared.Key memory) external"
                              }
                            },
                            "id": 339,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "5340:33:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 341,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5395:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "hexValue": "30",
                                "id": 342,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5398:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "expression": {
                                  "id": 343,
                                  "name": "sigData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 321,
                                  "src": "5401:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                                    "typeString": "struct IShared.SigData calldata"
                                  }
                                },
                                "id": 344,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "nonce",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2226,
                                "src": "5401:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 340,
                              "name": "SigData",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2227,
                              "src": "5387:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_SigData_$2227_storage_ptr_$",
                                "typeString": "type(struct IShared.SigData storage pointer)"
                              }
                            },
                            "id": 345,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5387:28:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_SigData_$2227_memory_ptr",
                              "typeString": "struct IShared.SigData memory"
                            }
                          },
                          {
                            "id": 346,
                            "name": "newKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 324,
                            "src": "5429:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                              "typeString": "struct IShared.Key calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            {
                              "typeIdentifier": "t_struct$_SigData_$2227_memory_ptr",
                              "typeString": "struct IShared.SigData memory"
                            },
                            {
                              "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                              "typeString": "struct IShared.Key calldata"
                            }
                          ],
                          "expression": {
                            "id": 335,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5304:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 336,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSelector",
                          "nodeType": "MemberAccess",
                          "src": "5304:22:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes4) pure returns (bytes memory)"
                          }
                        },
                        "id": 347,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5304:141:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 334,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "5294:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5294:152:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  {
                    "expression": {
                      "id": 349,
                      "name": "KeyID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2213,
                      "src": "5456:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                        "typeString": "type(enum IShared.KeyID)"
                      }
                    },
                    "id": 350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "Gov",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 2212,
                    "src": "5456:9:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_KeyID_$2213",
                      "typeString": "enum IShared.KeyID"
                    }
                  }
                ],
                "id": 351,
                "modifierName": {
                  "id": 332,
                  "name": "validSig",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 516,
                  "src": "5259:8:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "5259:212:13"
              }
            ],
            "name": "setAggKeyWithGovKey",
            "nameLocation": "5128:19:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 326,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5226:8:13"
            },
            "parameters": {
              "id": 325,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 321,
                  "mutability": "mutable",
                  "name": "sigData",
                  "nameLocation": "5174:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 370,
                  "src": "5157:24:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                    "typeString": "struct IShared.SigData"
                  },
                  "typeName": {
                    "id": 320,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 319,
                      "name": "SigData",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2227,
                      "src": "5157:7:13"
                    },
                    "referencedDeclaration": 2227,
                    "src": "5157:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SigData_$2227_storage_ptr",
                      "typeString": "struct IShared.SigData"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 324,
                  "mutability": "mutable",
                  "name": "newKey",
                  "nameLocation": "5204:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 370,
                  "src": "5191:19:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 323,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 322,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "5191:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "5191:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5147:69:13"
            },
            "returnParameters": {
              "id": 352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5472:0:13"
            },
            "scope": 517,
            "src": "5119:464:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              2179
            ],
            "body": {
              "id": 420,
              "nodeType": "Block",
              "src": "6476:111:13",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "66616c7365",
                        "id": 405,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6501:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      },
                      {
                        "baseExpression": {
                          "id": 406,
                          "name": "_keyIDToKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 140,
                          "src": "6508:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                            "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                          }
                        },
                        "id": 409,
                        "indexExpression": {
                          "expression": {
                            "id": 407,
                            "name": "KeyID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2213,
                            "src": "6520:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                              "typeString": "type(enum IShared.KeyID)"
                            }
                          },
                          "id": 408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Gov",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2212,
                          "src": "6520:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_KeyID_$2213",
                            "typeString": "enum IShared.KeyID"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6508:22:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_storage",
                          "typeString": "struct IShared.Key storage ref"
                        }
                      },
                      {
                        "id": 410,
                        "name": "newKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 377,
                        "src": "6532:6:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                          "typeString": "struct IShared.Key calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_struct$_Key_$2220_storage",
                          "typeString": "struct IShared.Key storage ref"
                        },
                        {
                          "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                          "typeString": "struct IShared.Key calldata"
                        }
                      ],
                      "id": 404,
                      "name": "KeyChange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 160,
                      "src": "6491:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bool_$_t_struct$_Key_$2220_memory_ptr_$_t_struct$_Key_$2220_memory_ptr_$returns$__$",
                        "typeString": "function (bool,struct IShared.Key memory,struct IShared.Key memory)"
                      }
                    },
                    "id": 411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6491:48:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 412,
                  "nodeType": "EmitStatement",
                  "src": "6486:53:13"
                },
                {
                  "expression": {
                    "id": 418,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 413,
                        "name": "_keyIDToKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 140,
                        "src": "6549:11:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                          "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                        }
                      },
                      "id": 416,
                      "indexExpression": {
                        "expression": {
                          "id": 414,
                          "name": "KeyID",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2213,
                          "src": "6561:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                            "typeString": "type(enum IShared.KeyID)"
                          }
                        },
                        "id": 415,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "Gov",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2212,
                        "src": "6561:9:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_KeyID_$2213",
                          "typeString": "enum IShared.KeyID"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6549:22:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_storage",
                        "typeString": "struct IShared.Key storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 417,
                      "name": "newKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 377,
                      "src": "6574:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                        "typeString": "struct IShared.Key calldata"
                      }
                    },
                    "src": "6549:31:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage",
                      "typeString": "struct IShared.Key storage ref"
                    }
                  },
                  "id": 419,
                  "nodeType": "ExpressionStatement",
                  "src": "6549:31:13"
                }
              ]
            },
            "documentation": {
              "id": 371,
              "nodeType": "StructuredDocumentation",
              "src": "5589:539:13",
              "text": " @notice  Set a new governance key. Requires a signature from the current governance key\n @param sigData   The keccak256 hash over the msg (uint) (which is the calldata\n                  for this function with empty msgHash and sig) and sig over that hash\n                  from the current governance key (uint)\n @param newKey    The new governance key to be set. The x component of the pubkey (uint),\n                  the parity of the y component (uint8), and the nonce times G (address)"
            },
            "functionSelector": "dd30304c",
            "id": 421,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 381,
                    "name": "newKey",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 377,
                    "src": "6255:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                      "typeString": "struct IShared.Key calldata"
                    }
                  }
                ],
                "id": 382,
                "modifierName": {
                  "id": 380,
                  "name": "nzKey",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2022,
                  "src": "6249:5:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "6249:13:13"
              },
              {
                "arguments": [
                  {
                    "id": 384,
                    "name": "sigData",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 374,
                    "src": "6281:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                      "typeString": "struct IShared.SigData calldata"
                    }
                  },
                  {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "id": 388,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "6344:4:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_KeyManager_$517",
                                  "typeString": "contract KeyManager"
                                }
                              },
                              "id": 389,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "setGovKeyWithGovKey",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 421,
                              "src": "6344:24:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_struct$_SigData_$2227_memory_ptr_$_t_struct$_Key_$2220_memory_ptr_$returns$__$",
                                "typeString": "function (struct IShared.SigData memory,struct IShared.Key memory) external"
                              }
                            },
                            "id": 390,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "selector",
                            "nodeType": "MemberAccess",
                            "src": "6344:33:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 392,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6399:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "hexValue": "30",
                                "id": 393,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6402:1:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "expression": {
                                  "id": 394,
                                  "name": "sigData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 374,
                                  "src": "6405:7:13",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                                    "typeString": "struct IShared.SigData calldata"
                                  }
                                },
                                "id": 395,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "nonce",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2226,
                                "src": "6405:13:13",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 391,
                              "name": "SigData",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2227,
                              "src": "6391:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_SigData_$2227_storage_ptr_$",
                                "typeString": "type(struct IShared.SigData storage pointer)"
                              }
                            },
                            "id": 396,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6391:28:13",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_SigData_$2227_memory_ptr",
                              "typeString": "struct IShared.SigData memory"
                            }
                          },
                          {
                            "id": 397,
                            "name": "newKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 377,
                            "src": "6433:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                              "typeString": "struct IShared.Key calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            {
                              "typeIdentifier": "t_struct$_SigData_$2227_memory_ptr",
                              "typeString": "struct IShared.SigData memory"
                            },
                            {
                              "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                              "typeString": "struct IShared.Key calldata"
                            }
                          ],
                          "expression": {
                            "id": 386,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "6308:3:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSelector",
                          "nodeType": "MemberAccess",
                          "src": "6308:22:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes4) pure returns (bytes memory)"
                          }
                        },
                        "id": 398,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6308:141:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 385,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "6298:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 399,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6298:152:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  {
                    "expression": {
                      "id": 400,
                      "name": "KeyID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2213,
                      "src": "6460:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                        "typeString": "type(enum IShared.KeyID)"
                      }
                    },
                    "id": 401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "Gov",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 2212,
                    "src": "6460:9:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_KeyID_$2213",
                      "typeString": "enum IShared.KeyID"
                    }
                  }
                ],
                "id": 402,
                "modifierName": {
                  "id": 383,
                  "name": "validSig",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 516,
                  "src": "6263:8:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "6263:212:13"
              }
            ],
            "name": "setGovKeyWithGovKey",
            "nameLocation": "6142:19:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 379,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6240:8:13"
            },
            "parameters": {
              "id": 378,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 374,
                  "mutability": "mutable",
                  "name": "sigData",
                  "nameLocation": "6188:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 421,
                  "src": "6171:24:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                    "typeString": "struct IShared.SigData"
                  },
                  "typeName": {
                    "id": 373,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 372,
                      "name": "SigData",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2227,
                      "src": "6171:7:13"
                    },
                    "referencedDeclaration": 2227,
                    "src": "6171:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SigData_$2227_storage_ptr",
                      "typeString": "struct IShared.SigData"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 377,
                  "mutability": "mutable",
                  "name": "newKey",
                  "nameLocation": "6218:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 421,
                  "src": "6205:19:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_calldata_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 376,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 375,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "6205:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "6205:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6161:69:13"
            },
            "returnParameters": {
              "id": 403,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6476:0:13"
            },
            "scope": 517,
            "src": "6133:454:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              2185
            ],
            "body": {
              "id": 435,
              "nodeType": "Block",
              "src": "7117:48:13",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "baseExpression": {
                          "id": 429,
                          "name": "_keyIDToKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 140,
                          "src": "7135:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                            "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                          }
                        },
                        "id": 432,
                        "indexExpression": {
                          "expression": {
                            "id": 430,
                            "name": "KeyID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2213,
                            "src": "7147:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                              "typeString": "type(enum IShared.KeyID)"
                            }
                          },
                          "id": 431,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Agg",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2211,
                          "src": "7147:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_KeyID_$2213",
                            "typeString": "enum IShared.KeyID"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7135:22:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_storage",
                          "typeString": "struct IShared.Key storage ref"
                        }
                      }
                    ],
                    "id": 433,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "7134:24:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage",
                      "typeString": "struct IShared.Key storage ref"
                    }
                  },
                  "functionReturnParameters": 428,
                  "id": 434,
                  "nodeType": "Return",
                  "src": "7127:31:13"
                }
              ]
            },
            "documentation": {
              "id": 422,
              "nodeType": "StructuredDocumentation",
              "src": "6931:110:13",
              "text": " @notice  Get the current aggregate key\n @return  The Key struct for the aggregate key"
            },
            "functionSelector": "d5b9c036",
            "id": 436,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAggregateKey",
            "nameLocation": "7055:15:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 424,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7082:8:13"
            },
            "parameters": {
              "id": 423,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7070:2:13"
            },
            "returnParameters": {
              "id": 428,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 427,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 436,
                  "src": "7105:10:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 426,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 425,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "7105:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "7105:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7104:12:13"
            },
            "scope": 517,
            "src": "7046:119:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              2191
            ],
            "body": {
              "id": 450,
              "nodeType": "Block",
              "src": "7360:48:13",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "baseExpression": {
                          "id": 444,
                          "name": "_keyIDToKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 140,
                          "src": "7378:11:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_struct$_Key_$2220_storage_$",
                            "typeString": "mapping(enum IShared.KeyID => struct IShared.Key storage ref)"
                          }
                        },
                        "id": 447,
                        "indexExpression": {
                          "expression": {
                            "id": 445,
                            "name": "KeyID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2213,
                            "src": "7390:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_KeyID_$2213_$",
                              "typeString": "type(enum IShared.KeyID)"
                            }
                          },
                          "id": 446,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Gov",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2212,
                          "src": "7390:9:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_KeyID_$2213",
                            "typeString": "enum IShared.KeyID"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7378:22:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Key_$2220_storage",
                          "typeString": "struct IShared.Key storage ref"
                        }
                      }
                    ],
                    "id": 448,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "7377:24:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage",
                      "typeString": "struct IShared.Key storage ref"
                    }
                  },
                  "functionReturnParameters": 443,
                  "id": 449,
                  "nodeType": "Return",
                  "src": "7370:31:13"
                }
              ]
            },
            "documentation": {
              "id": 437,
              "nodeType": "StructuredDocumentation",
              "src": "7171:112:13",
              "text": " @notice  Get the current governance key\n @return  The Key struct for the governance key"
            },
            "functionSelector": "cd1b4d20",
            "id": 451,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getGovernanceKey",
            "nameLocation": "7297:16:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 439,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7325:8:13"
            },
            "parameters": {
              "id": 438,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7313:2:13"
            },
            "returnParameters": {
              "id": 443,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 442,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 451,
                  "src": "7348:10:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Key_$2220_memory_ptr",
                    "typeString": "struct IShared.Key"
                  },
                  "typeName": {
                    "id": 441,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 440,
                      "name": "Key",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2220,
                      "src": "7348:3:13"
                    },
                    "referencedDeclaration": 2220,
                    "src": "7348:3:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Key_$2220_storage_ptr",
                      "typeString": "struct IShared.Key"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7347:12:13"
            },
            "scope": 517,
            "src": "7288:120:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              2196
            ],
            "body": {
              "id": 460,
              "nodeType": "Block",
              "src": "7721:41:13",
              "statements": [
                {
                  "expression": {
                    "id": 458,
                    "name": "_lastValidateTime",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 143,
                    "src": "7738:17:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 457,
                  "id": 459,
                  "nodeType": "Return",
                  "src": "7731:24:13"
                }
              ]
            },
            "documentation": {
              "id": 452,
              "nodeType": "StructuredDocumentation",
              "src": "7414:233:13",
              "text": " @notice  Get the last time that a function was called which\n          required a signature from _aggregateKeyData or _governanceKeyData\n @return  The last time isValidSig was called, in unix time (uint)"
            },
            "functionSelector": "53f0bb61",
            "id": 461,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getLastValidateTime",
            "nameLocation": "7661:19:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 454,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7692:8:13"
            },
            "parameters": {
              "id": 453,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7680:2:13"
            },
            "returnParameters": {
              "id": 457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 456,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 461,
                  "src": "7715:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 455,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7715:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7714:6:13"
            },
            "scope": 517,
            "src": "7652:110:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              2206
            ],
            "body": {
              "id": 479,
              "nodeType": "Block",
              "src": "8063:54:13",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 473,
                        "name": "_keyToNoncesUsed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 150,
                        "src": "8080:16:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_enum$_KeyID_$2213_$_t_mapping$_t_uint256_$_t_bool_$_$",
                          "typeString": "mapping(enum IShared.KeyID => mapping(uint256 => bool))"
                        }
                      },
                      "id": 475,
                      "indexExpression": {
                        "id": 474,
                        "name": "keyID",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 465,
                        "src": "8097:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_KeyID_$2213",
                          "typeString": "enum IShared.KeyID"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "8080:23:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                        "typeString": "mapping(uint256 => bool)"
                      }
                    },
                    "id": 477,
                    "indexExpression": {
                      "id": 476,
                      "name": "nonce",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 467,
                      "src": "8104:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8080:30:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 472,
                  "id": 478,
                  "nodeType": "Return",
                  "src": "8073:37:13"
                }
              ]
            },
            "documentation": {
              "id": 462,
              "nodeType": "StructuredDocumentation",
              "src": "7768:201:13",
              "text": " @notice  Get whether or not the specific keyID has used this nonce before\n          since it cannot be used again\n @return  Whether the nonce has already been used (bool)"
            },
            "functionSelector": "6768485e",
            "id": 480,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isNonceUsedByKey",
            "nameLocation": "7983:16:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 469,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8034:8:13"
            },
            "parameters": {
              "id": 468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 465,
                  "mutability": "mutable",
                  "name": "keyID",
                  "nameLocation": "8006:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 480,
                  "src": "8000:11:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_KeyID_$2213",
                    "typeString": "enum IShared.KeyID"
                  },
                  "typeName": {
                    "id": 464,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 463,
                      "name": "KeyID",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2213,
                      "src": "8000:5:13"
                    },
                    "referencedDeclaration": 2213,
                    "src": "8000:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_KeyID_$2213",
                      "typeString": "enum IShared.KeyID"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 467,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "8018:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 480,
                  "src": "8013:10:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 466,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8013:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7999:25:13"
            },
            "returnParameters": {
              "id": 472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 471,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 480,
                  "src": "8057:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8057:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8056:6:13"
            },
            "scope": 517,
            "src": "7974:143:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 494,
              "nodeType": "Block",
              "src": "8642:124:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 489,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 484,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "8660:5:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 485,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "8660:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 486,
                            "name": "_lastValidateTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 143,
                            "src": "8678:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8660:35:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 488,
                          "name": "_AGG_KEY_TIMEOUT",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 133,
                          "src": "8699:16:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8660:55:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4b65794d616e616765723a206e6f7420656e6f7567682064656c6179",
                        "id": 490,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8717:30:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f3e5392c48e97b8f73b3440f0860addfefafdc7a7e5702da8fdb74edbe86c7b1",
                          "typeString": "literal_string \"KeyManager: not enough delay\""
                        },
                        "value": "KeyManager: not enough delay"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f3e5392c48e97b8f73b3440f0860addfefafdc7a7e5702da8fdb74edbe86c7b1",
                          "typeString": "literal_string \"KeyManager: not enough delay\""
                        }
                      ],
                      "id": 483,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8652:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 491,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8652:96:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 492,
                  "nodeType": "ExpressionStatement",
                  "src": "8652:96:13"
                },
                {
                  "id": 493,
                  "nodeType": "PlaceholderStatement",
                  "src": "8758:1:13"
                }
              ]
            },
            "documentation": {
              "id": 481,
              "nodeType": "StructuredDocumentation",
              "src": "8461:155:13",
              "text": "@dev    Check that enough time has passed for setAggKeyWithGovKey. Needs\n         to be done as a modifier so that it can happen before validSig"
            },
            "id": 495,
            "name": "validTime",
            "nameLocation": "8630:9:13",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 482,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8639:2:13"
            },
            "src": "8621:145:13",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 515,
              "nodeType": "Block",
              "src": "8916:80:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 508,
                            "name": "sigData",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 499,
                            "src": "8945:7:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                              "typeString": "struct IShared.SigData calldata"
                            }
                          },
                          {
                            "id": 509,
                            "name": "contractMsgHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 501,
                            "src": "8954:15:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 510,
                            "name": "keyID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 504,
                            "src": "8971:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_KeyID_$2213",
                              "typeString": "enum IShared.KeyID"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                              "typeString": "struct IShared.SigData calldata"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_enum$_KeyID_$2213",
                              "typeString": "enum IShared.KeyID"
                            }
                          ],
                          "id": 507,
                          "name": "isValidSig",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 266,
                          "src": "8934:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_SigData_$2227_calldata_ptr_$_t_bytes32_$_t_enum$_KeyID_$2213_$returns$_t_bool_$",
                            "typeString": "function (struct IShared.SigData calldata,bytes32,enum IShared.KeyID) returns (bool)"
                          }
                        },
                        "id": 511,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8934:43:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 506,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8926:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 512,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8926:52:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 513,
                  "nodeType": "ExpressionStatement",
                  "src": "8926:52:13"
                },
                {
                  "id": 514,
                  "nodeType": "PlaceholderStatement",
                  "src": "8988:1:13"
                }
              ]
            },
            "documentation": {
              "id": 496,
              "nodeType": "StructuredDocumentation",
              "src": "8772:27:13",
              "text": "@dev    Call isValidSig"
            },
            "id": 516,
            "name": "validSig",
            "nameLocation": "8813:8:13",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 499,
                  "mutability": "mutable",
                  "name": "sigData",
                  "nameLocation": "8848:7:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 516,
                  "src": "8831:24:13",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SigData_$2227_calldata_ptr",
                    "typeString": "struct IShared.SigData"
                  },
                  "typeName": {
                    "id": 498,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 497,
                      "name": "SigData",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2227,
                      "src": "8831:7:13"
                    },
                    "referencedDeclaration": 2227,
                    "src": "8831:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SigData_$2227_storage_ptr",
                      "typeString": "struct IShared.SigData"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 501,
                  "mutability": "mutable",
                  "name": "contractMsgHash",
                  "nameLocation": "8873:15:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 516,
                  "src": "8865:23:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 500,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8865:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 504,
                  "mutability": "mutable",
                  "name": "keyID",
                  "nameLocation": "8904:5:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 516,
                  "src": "8898:11:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_KeyID_$2213",
                    "typeString": "enum IShared.KeyID"
                  },
                  "typeName": {
                    "id": 503,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 502,
                      "name": "KeyID",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2213,
                      "src": "8898:5:13"
                    },
                    "referencedDeclaration": 2213,
                    "src": "8898:5:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_KeyID_$2213",
                      "typeString": "enum IShared.KeyID"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8821:94:13"
            },
            "src": "8804:192:13",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 518,
        "src": "393:8605:13"
      }
    ],
    "src": "0:8999:13"
  },
  "bytecode": "",
  "bytecodeSha1": "8ecf278dc9c240996c00d2415f3fa677a49ba203",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.2+commit.661d1103"
  },
  "contractName": "KeyManager",
  "coverageMap": {
    "branches": {
      "13": {
        "KeyManager.isValidSig": {
          "19": [
            2990,
            3030,
            true
          ],
          "20": [
            3093,
            3285,
            true
          ],
          "21": [
            3352,
            3391,
            true
          ]
        },
        "KeyManager.setAggKeyWithGovKey": {
          "18": [
            8660,
            8715,
            true
          ]
        },
        "KeyManager.setGovKeyWithGovKey": {
          "22": [
            8934,
            8977,
            true
          ]
        }
      },
      "16": {
        "SchnorrSECP256K1.verifySignature": {
          "23": [
            6073,
            6096,
            true
          ],
          "24": [
            6221,
            6234,
            true
          ],
          "25": [
            6589,
            6629,
            false
          ],
          "26": [
            6633,
            6651,
            false
          ],
          "27": [
            6661,
            6674,
            false
          ],
          "28": [
            6678,
            6689,
            true
          ]
        }
      },
      "17": {},
      "20": {},
      "21": {}
    },
    "statements": {
      "13": {
        "KeyManager.getAggregateKey": {
          "11": [
            7127,
            7158
          ]
        },
        "KeyManager.getGovernanceKey": {
          "10": [
            7370,
            7401
          ]
        },
        "KeyManager.getLastValidateTime": {
          "0": [
            7731,
            7755
          ]
        },
        "KeyManager.isNonceUsedByKey": {
          "1": [
            8073,
            8110
          ]
        },
        "KeyManager.isValidSig": {
          "5": [
            2982,
            3062
          ],
          "6": [
            3072,
            3334
          ],
          "7": [
            3344,
            3426
          ],
          "8": [
            3445,
            3480
          ],
          "9": [
            3490,
            3535
          ]
        },
        "KeyManager.setAggKeyWithAggKey": {
          "4": [
            4471,
            4523
          ]
        },
        "KeyManager.setAggKeyWithGovKey": {
          "2": [
            5482,
            5535
          ],
          "3": [
            5545,
            5576
          ]
        },
        "KeyManager.setGovKeyWithGovKey": {
          "12": [
            6486,
            6539
          ],
          "13": [
            6549,
            6580
          ]
        }
      },
      "16": {
        "SchnorrSECP256K1.verifySignature": {
          "14": [
            6065,
            6123
          ],
          "15": [
            6213,
            6267
          ],
          "16": [
            6581,
            6716
          ],
          "17": [
            7896,
            7949
          ]
        }
      },
      "17": {},
      "20": {},
      "21": {}
    }
  },
  "dependencies": [
    "IKeyManager",
    "IShared",
    "SchnorrSECP256K1",
    "Shared"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100885760003560e01c80638aa623591161005b5780638aa62359146100ee578063cd1b4d2014610101578063d5b9c03614610137578063dd30304c1461013f57610088565b806353f0bb611461008d5780636768485e146100a35780637f5586cc146100c657806381dc37d6146100db575b600080fd5b6001546040519081526020015b60405180910390f35b6100b66100b1366004610bd0565b610152565b604051901515815260200161009a565b6100d96100d4366004610ca9565b6101c0565b005b6100d96100e9366004610ca9565b6103b7565b6100b66100fc366004610c6d565b6104bc565b61010961073b565b604080518251815260208084015160ff1690820152918101516001600160a01b03169082015260600161009a565b6101096107c3565b6100d961014d366004610ca9565b6107e7565b60006002600084600181111561017857634e487b7160e01b600052602160045260246000fd5b600181111561019757634e487b7160e01b600052602160045260246000fd5b81526020808201929092526040908101600090812085825290925290205460ff16905092915050565b6101cf36829003820182610bf9565b80516101f65760405162461bcd60e51b81526004016101ed90610d94565b60405180910390fd5b60408101516001600160a01b03166102205760405162461bcd60e51b81526004016101ed90610d5f565b6202a300600154426102329190610e0c565b10156102805760405162461bcd60e51b815260206004820152601c60248201527f4b65794d616e616765723a206e6f7420656e6f7567682064656c61790000000060448201526064016101ed565b6040805160608101825260008082526020820152818501358183015290518491631fd561b360e21b916102b891908690602401610dcb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217825251902060016102f98383836104bc565b61030257600080fd5b7fbb1864971e5c451203cc671f7d755eaf2ea5013cbdc3622b1a3db8a0ce708f6b60008080805b600181111561034857634e487b7160e01b600052602160045260246000fd5b81526020019081526020016000208760405161036693929190610d1b565b60405180910390a184600080805b600181111561039357634e487b7160e01b600052602160045260246000fd5b815260200190815260200160002081816103ad9190610e39565b5050505050505050565b6103c636829003820182610bf9565b80516103e45760405162461bcd60e51b81526004016101ed90610d94565b60408101516001600160a01b031661040e5760405162461bcd60e51b81526004016101ed90610d5f565b60408051606081018252600080825260208201528185013581830152905184916340ee1beb60e11b9161044691908690602401610dcb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217825251902060006104878383836104bc565b61049057600080fd5b7fbb1864971e5c451203cc671f7d755eaf2ea5013cbdc3622b1a3db8a0ce708f6b600160008080610329565b6000806000808460018111156104e257634e487b7160e01b600052602160045260246000fd5b600181111561050157634e487b7160e01b600052602160045260246000fd5b8152602080820192909252604090810160002081516060810183528154815260019091015460ff8116938201939093526101009092046001600160a01b0316908201529050843584146105965760405162461bcd60e51b815260206004820152601b60248201527f4b65794d616e616765723a20696e76616c6964206d736748617368000000000060448201526064016101ed565b6105b785600001358660200135836000015184602001518560400151610931565b6106035760405162461bcd60e51b815260206004820152601760248201527f4b65794d616e616765723a2053696720696e76616c696400000000000000000060448201526064016101ed565b6002600084600181111561062757634e487b7160e01b600052602160045260246000fd5b600181111561064657634e487b7160e01b600052602160045260246000fd5b81526020808201929092526040908101600090812088830135825290925290205460ff16156106b75760405162461bcd60e51b815260206004820152601e60248201527f4b65794d616e616765723a206e6f6e636520616c72656164792075736564000060448201526064016101ed565b4260019081556002600085838111156106e057634e487b7160e01b600052602160045260246000fd5b60018111156106ff57634e487b7160e01b600052602160045260246000fd5b8152602080820192909252604090810160009081208983013582529092529020805460ff191691151591909117905550600190505b9392505050565b60408051606081018252600080825260208201819052918101829052908060015b600181111561077b57634e487b7160e01b600052602160045260246000fd5b8152602080820192909252604090810160002081516060810183528154815260019091015460ff8116938201939093526101009092046001600160a01b031690820152919050565b6040805160608101825260008082526020820181905291810182905290808061075c565b6107f636829003820182610bf9565b80516108145760405162461bcd60e51b81526004016101ed90610d94565b60408101516001600160a01b031661083e5760405162461bcd60e51b81526004016101ed90610d5f565b604080516060810182526000808252602082015281850135818301529051849163374c0c1360e21b9161087691908690602401610dcb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217825251902060016108b78383836104bc565b6108c057600080fd5b6001600090815260208190526040517fbb1864971e5c451203cc671f7d755eaf2ea5013cbdc3622b1a3db8a0ce708f6b9161091e917fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d908990610d1b565b60405180910390a1846000806001610374565b600061095e7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a06001610df4565b84106109a55760405162461bcd60e51b81526020600482015260166024820152755075626c69632d6b65792078203e3d2048414c465f5160501b60448201526064016101ed565b70014551231950b75fc4402da1732fc9bebe198510610a065760405162461bcd60e51b815260206004820152601c60248201527f536967206d7573742062652072656475636564206d6f64756c6f20510000000060448201526064016101ed565b6001600160a01b03821615801590610a1e5750600084115b8015610a2a5750600085115b8015610a365750600086115b610a7b5760405162461bcd60e51b8152602060048201526016602482015275139bc81e995c9bc81a5b9c1d5d1cc8185b1b1bddd95960521b60448201526064016101ed565b60408051602080820187905260f886901b6001600160f81b0319168284015260418201899052606085901b6bffffffffffffffffffffffff1916606183015282516055818403018152607590920190925280519101206000600170014551231950b75fc4402da1732fc9bebe19888809610b079070014551231950b75fc4402da1732fc9bebe19610e0c565b60ff871615610b1757601c610b1a565b601b5b8870014551231950b75fc4402da1732fc9bebe198a87096040805160008152602081018083529590955260ff909316928401929092526060830152608082015260a0016020604051602081039080840390855afa158015610b7f573d6000803e3d6000fd5b5050604051601f1901516001600160a01b03868116911614935050505095945050505050565b803560028110610bb457600080fd5b919050565b600060608284031215610bca578081fd5b50919050565b60008060408385031215610be2578182fd5b610beb83610ba5565b946020939093013593505050565b600060608284031215610c0a578081fd5b6040516060810181811067ffffffffffffffff82111715610c3957634e487b7160e01b83526041600452602483fd5b604052823581526020830135610c4e81610eaa565b60208201526040830135610c6181610e92565b60408201529392505050565b600080600060a08486031215610c81578081fd5b610c8b8585610bb9565b925060608401359150610ca060808501610ba5565b90509250925092565b60008060c08385031215610cbb578182fd5b610cc58484610bb9565b9150610cd48460608501610bb9565b90509250929050565b803582526020810135610cef81610eaa565b60ff1660208301526040810135610d0581610e92565b6001600160a01b03166040929092019190915250565b831515815282546020820152600183015460ff8116604083015260081c6001600160a01b0316606082015260e08101610d576080830184610cdd565b949350505050565b6020808252818101527f5368617265643a206e6f6e636554696d6573474164647220697320656d707479604082015260600190565b60208082526018908201527f5368617265643a207075624b65795820697320656d7074790000000000000000604082015260600190565b82518152602080840151908201526040808401519082015260c081016107346060830184610cdd565b60008219821115610e0757610e07610e23565b500190565b600082821015610e1e57610e1e610e23565b500390565b634e487b7160e01b600052601160045260246000fd5b81358155600181016020830135610e4f81610eaa565b815460ff191660ff91909116178082556040840135610e6d81610e92565b610100600160a81b03199190911660089190911b610100600160a81b03161790555050565b6001600160a01b0381168114610ea757600080fd5b50565b60ff81168114610ea757600080fdfea26469706673582212204b8fe7501403a1813d94bd8da109f0ae3e08df4c7f8a8bfc5077cf27bcae51ae64736f6c63430008020033",
  "deployedSourceMap": "393:8605:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7652:110;7738:17;;7652:110;;8556:25:27;;;8544:2;8529:18;7652:110:13;;;;;;;;7974:143;;;;;;:::i;:::-;;:::i;:::-;;;3247:14:27;;3240:22;3222:41;;3210:2;3195:18;7974:143:13;3177:92:27;5119:464:13;;;;;;:::i;:::-;;:::i;:::-;;4118:453;;;;;;:::i;:::-;;:::i;2782:790::-;;;;;;:::i;:::-;;:::i;7288:120::-;;;:::i;:::-;;;;7717:13:27;;7699:32;;7791:4;7779:17;;;7773:24;7799:4;7769:35;7747:20;;;7740:65;7853:17;;;7847:24;-1:-1:-1;;;;;7843:50:27;7821:20;;;7814:80;7687:2;7672:18;7288:120:13;7654:246:27;7046:119:13;;;:::i;6133:454::-;;;;;;:::i;:::-;;:::i;7974:143::-;8057:4;8080:16;:23;8097:5;8080:23;;;;;;-1:-1:-1;;;8080:23:13;;;;;;;;;;;;;;;-1:-1:-1;;;8080:23:13;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8080:23:13;;;:30;;;;;;;;;;;;-1:-1:-1;7974:143:13;;;;:::o;5119:464::-;1236:200:17;;;;;;;5241:6:13;1236:200:17;:::i;:::-;1285:11;;1277:53;;;;-1:-1:-1;;;1277:53:17;;;;;;;:::i;:::-;;;;;;;;;1348:19;;;;-1:-1:-1;;;;;1348:33:17;1340:78;;;;-1:-1:-1;;;1340:78:17;;;;;;;:::i;:::-;502:6:13::1;8678:17;;8660:15;:35;;;;:::i;:::-;:55;;8652:96;;;::::0;-1:-1:-1;;;8652:96:13;;7005:2:27;8652:96:13::1;::::0;::::1;6987:21:27::0;7044:2;7024:18;;;7017:30;7083;7063:18;;;7056:58;7131:18;;8652:96:13::1;6977:178:27::0;8652:96:13::1;5387:28:::2;::::0;;::::2;::::0;::::2;::::0;;-1:-1:-1;5387:28:13;;;::::2;::::0;::::2;::::0;5401:13;;::::2;;5387:28:::0;;;;5304:141;;5277:7;;-1:-1:-1;;;5340:33:13;5304:141:::2;::::0;5387:28;5429:6;;5304:141:::2;;;:::i;:::-;;::::0;;-1:-1:-1;;5304:141:13;;::::2;::::0;;;;;;::::2;::::0;::::2;::::0;;-1:-1:-1;;;;;5304:141:13::2;-1:-1:-1::0;;;;;;5304:141:13;;::::2;::::0;;;::::2;::::0;;5294:152;;;5456:9:::2;8934:43;8945:7:::0;5294:152;5456:9;8934:10:::2;:43::i;:::-;8926:52;;;::::0;::::2;;5487:48:::3;5497:5;::::0;;;5504:22:::3;;;;;;;-1:-1:-1::0;;;5504:22:13::3;;;;;;;;;;;;;;;;;;;;5528:6;5487:48;;;;;;;;:::i;:::-;;;;;;;;5570:6:::0;5545:11:::3;::::0;;:22:::3;;;;;;;-1:-1:-1::0;;;5545:22:13::3;;;;;;;;;;;;;;;;;;;;:31;;;;;;:::i;:::-;-1:-1:-1::0;;;;;;;;5119:464:13:o;4118:453::-;1236:200:17;;;;;;;4240:6:13;1236:200:17;:::i;:::-;1285:11;;1277:53;;;;-1:-1:-1;;;1277:53:17;;;;;;;:::i;:::-;1348:19;;;;-1:-1:-1;;;;;1348:33:17;1340:78;;;;-1:-1:-1;;;1340:78:17;;;;;;;:::i;:::-;4376:28:13::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;4376:28:13;;;::::1;::::0;::::1;::::0;4390:13;;::::1;;4376:28:::0;;;;4293:141;;4266:7;;-1:-1:-1;;;4329:33:13;4293:141:::1;::::0;4376:28;4418:6;;4293:141:::1;;;:::i;:::-;;::::0;;-1:-1:-1;;4293:141:13;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;4293:141:13::1;-1:-1:-1::0;;;;;;4293:141:13;;::::1;::::0;;;::::1;::::0;;4283:152;;;-1:-1:-1;8934:43:13::1;8945:7:::0;4283:152;-1:-1:-1;8934:10:13::1;:43::i;:::-;8926:52;;;::::0;::::1;;4476:47:::2;4486:4;4492:11;::::0;;:22:::2;::::0;2782:790;2921:4;2937:14;2954:11;:18;2966:5;2954:18;;;;;;-1:-1:-1;;;2954:18:13;;;;;;;;;;;;;;;-1:-1:-1;;;2954:18:13;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2954:18:13;2937:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2937:35:13;;;;;;-1:-1:-1;2990:15:13;;:40;;2982:80;;;;-1:-1:-1;;;2982:80:13;;5946:2:27;2982:80:13;;;5928:21:27;5985:2;5965:18;;;5958:30;6024:29;6004:18;;;5997:57;6071:18;;2982:80:13;5918:177:27;2982:80:13;3093:192;3126:7;:15;;;3159:7;:11;;;3188:3;:11;;;3217:3;:17;;;3252:3;:19;;;3093:15;:192::i;:::-;3072:262;;;;-1:-1:-1;;;3072:262:13;;6302:2:27;3072:262:13;;;6284:21:27;6341:2;6321:18;;;6314:30;6380:25;6360:18;;;6353:53;6423:18;;3072:262:13;6274:173:27;3072:262:13;3353:16;:23;3370:5;3353:23;;;;;;-1:-1:-1;;;3353:23:13;;;;;;;;;;;;;;;-1:-1:-1;;;3353:23:13;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3353:23:13;;;3377:13;;;;3353:38;;;;;;;;;;3352:39;3344:82;;;;-1:-1:-1;;;3344:82:13;;5230:2:27;3344:82:13;;;5212:21:27;5269:2;5249:18;;;5242:30;5308:32;5288:18;;;5281:60;5358:18;;3344:82:13;5202:180:27;3344:82:13;3465:15;3445:17;:35;;;3490:16;:23;3507:5;3490:23;;;;;;-1:-1:-1;;;3490:23:13;;;;;;;;;;;;;;;-1:-1:-1;;;3490:23:13;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3490:23:13;;;3514:13;;;;3490:38;;;;;;;:45;;-1:-1:-1;;3490:45:13;;;;;;;;;;-1:-1:-1;;;;2782:790:13;;;;;;:::o;7288:120::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;7390:9:13;7378:22;;;;;;;-1:-1:-1;;;7378:22:13;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7378:22:13;7370:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7370:31:13;;;;;;7288:120;-1:-1:-1;7288:120:13:o;7046:119::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;7135:22:13;;6133:454;1236:200:17;;;;;;;6255:6:13;1236:200:17;:::i;:::-;1285:11;;1277:53;;;;-1:-1:-1;;;1277:53:17;;;;;;;:::i;:::-;1348:19;;;;-1:-1:-1;;;;;1348:33:17;1340:78;;;;-1:-1:-1;;;1340:78:17;;;;;;;:::i;:::-;6391:28:13::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;6391:28:13;;;::::1;::::0;::::1;::::0;6405:13;;::::1;;6391:28:::0;;;;6308:141;;6281:7;;-1:-1:-1;;;6344:33:13;6308:141:::1;::::0;6391:28;6433:6;;6308:141:::1;;;:::i;:::-;;::::0;;-1:-1:-1;;6308:141:13;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;6308:141:13::1;-1:-1:-1::0;;;;;;6308:141:13;;::::1;::::0;;;::::1;::::0;;6298:152;;;6460:9:::1;8934:43;8945:7:::0;6298:152;6460:9;8934:10:::1;:43::i;:::-;8926:52;;;::::0;::::1;;6520:9:::2;6501:5;6508:22:::0;;;::::2;::::0;;;;6491:48;::::2;::::0;::::2;::::0;6508:22;;6532:6;;6491:48:::2;:::i;:::-;;;;;;;;6574:6:::0;6549:11:::2;::::0;6561:9:::2;6549:22;::::0;5863:2091:16;6053:4;735:12;736:6;741:1;735:12;:::i;:::-;6073:14;:23;6065:58;;;;-1:-1:-1;;;6065:58:16;;6654:2:27;6065:58:16;;;6636:21:27;6693:2;6673:18;;;6666:30;-1:-1:-1;;;6712:18:27;;;6705:52;6774:18;;6065:58:16;6626:172:27;6065:58:16;-1:-1:-1;;6221:9:16;:13;6213:54;;;;-1:-1:-1;;;6213:54:16;;5589:2:27;6213:54:16;;;5571:21:27;5628:2;5608:18;;;5601:30;5667;5647:18;;;5640:58;5715:18;;6213:54:16;5561:178:27;6213:54:16;-1:-1:-1;;;;;6589:40:16;;;;;;:62;;;6650:1;6633:14;:18;6589:62;:85;;;;;6673:1;6661:9;:13;6589:85;:100;;;;;6688:1;6678:7;:11;6589:100;6581:135;;;;-1:-1:-1;;;6581:135:16;;7362:2:27;6581:135:16;;;7344:21:27;7401:2;7381:18;;;7374:30;-1:-1:-1;;;7420:18:27;;;7413:52;7482:18;;6581:135:16;7334:172:27;6581:135:16;6867:92;;;;;;;2836:19:27;;;2911:3;2889:16;;;-1:-1:-1;;;;;;2885:36:27;2871:12;;;2864:58;2938:12;;;2931:28;;;2997:2;2993:15;;;-1:-1:-1;;2989:53:27;2975:12;;;2968:75;6867:92:16;;;;;;;;;3059:12:27;;;;6867:92:16;;;6857:103;;;;;-1:-1:-1;7471:419:16;-1:-1:-1;;7591:9:16;2836:19:27;7568:36:16;7564:40;;-1:-1:-1;;7564:40:16;:::i;:::-;7773:18;;;;7772:30;;7800:2;7772:30;;;7795:2;7772:30;7818:14;-1:-1:-1;;7870:14:16;7856:12;7849:39;7471:419;;;7841:48;7471:419;;;;;;;;4138:25:27;;;;4211:4;4199:17;;;4179:18;;;4172:45;;;;4233:18;;;4226:34;4276:18;;;4269:34;4110:19;;7471:419:16;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7471:419:16;;-1:-1:-1;;7471:419:16;;-1:-1:-1;;;;;7903:46:16;;;;;;;-1:-1:-1;;;;5863:2091:16;;;;;;;:::o;14:146:27:-;85:20;;134:1;124:12;;114:2;;150:1;147;140:12;114:2;66:94;;;:::o;165:159::-;;266:2;257:6;252:3;248:16;244:25;241:2;;;286:5;279;272:20;241:2;-1:-1:-1;312:6:27;231:93;-1:-1:-1;231:93:27:o;329:277::-;;;468:2;456:9;447:7;443:23;439:32;436:2;;;489:6;481;474:22;436:2;517:32;539:9;517:32;:::i;:::-;507:42;596:2;581:18;;;;568:32;;-1:-1:-1;;;426:180:27:o;611:821::-;;744:2;732:9;723:7;719:23;715:32;712:2;;;765:6;757;750:22;712:2;803;797:9;845:2;837:6;833:15;914:6;902:10;899:22;878:18;866:10;863:34;860:62;857:2;;;-1:-1:-1;;;945:36:27;;1004:4;1001:1;994:15;1037:4;952:6;1022:20;857:2;1068;1061:22;1107:23;;1092:39;;1181:2;1166:18;;1153:32;1194:29;1153:32;1194:29;:::i;:::-;1251:2;1239:15;;1232:30;1314:2;1299:18;;1286:32;1327:33;1286:32;1327:33;:::i;:::-;1388:2;1376:15;;1369:32;1380:6;702:730;-1:-1:-1;;;702:730:27:o;1437:401::-;;;;1620:3;1608:9;1599:7;1595:23;1591:33;1588:2;;;1642:6;1634;1627:22;1588:2;1670:50;1712:7;1701:9;1670:50;:::i;:::-;1660:60;;1767:2;1756:9;1752:18;1739:32;1729:42;;1790;1827:3;1816:9;1812:19;1790:42;:::i;:::-;1780:52;;1578:260;;;;;:::o;1843:363::-;;;2022:3;2010:9;2001:7;1997:23;1993:33;1990:2;;;2044:6;2036;2029:22;1990:2;2072:50;2114:7;2103:9;2072:50;:::i;:::-;2062:60;;2141:59;2192:7;2187:2;2176:9;2172:18;2141:59;:::i;:::-;2131:69;;1980:226;;;;;:::o;2211:411::-;2302:5;2289:19;2284:3;2277:32;2357:4;2350:5;2346:16;2333:30;2372:31;2395:7;2372:31;:::i;:::-;2448:4;2435:18;2428:4;2419:14;;2412:42;2502:4;2491:16;;2478:30;2517:33;2478:30;2517:33;:::i;:::-;-1:-1:-1;;;;;2582:33:27;2575:4;2566:14;;;;2559:57;;;;-1:-1:-1;2267:355:27:o;3274:632::-;3579:14;;3572:22;3554:41;;3631:13;;3626:2;3611:18;;3604:41;3689:4;3677:17;;3671:24;3746:4;3731:20;;3726:2;3711:18;;3704:48;3796:1;3792:17;-1:-1:-1;;;;;3788:43:27;3783:2;3768:18;;3761:71;3541:3;3526:19;;3841:59;3895:3;3880:19;;3872:6;3841:59;:::i;:::-;3508:398;;;;;;:::o;4314:356::-;4516:2;4498:21;;;4535:18;;;4528:30;4594:34;4589:2;4574:18;;4567:62;4661:2;4646:18;;4488:182::o;4675:348::-;4877:2;4859:21;;;4916:2;4896:18;;;4889:30;4955:26;4950:2;4935:18;;4928:54;5014:2;4999:18;;4849:174::o;7905:500::-;8192:13;;8174:32;;8262:4;8250:17;;;8244:24;8222:20;;;8215:54;8325:4;8313:17;;;8307:24;8285:20;;;8278:54;8161:3;8146:19;;8341:58;8395:2;8380:18;;8372:6;8341:58;:::i;8592:128::-;;8663:1;8659:6;8656:1;8653:13;8650:2;;;8669:18;;:::i;:::-;-1:-1:-1;8705:9:27;;8640:80::o;8725:125::-;;8793:1;8790;8787:8;8784:2;;;8798:18;;:::i;:::-;-1:-1:-1;8835:9:27;;8774:76::o;8855:127::-;8916:10;8911:3;8907:20;8904:1;8897:31;8947:4;8944:1;8937:15;8971:4;8968:1;8961:15;8987:624;9142:5;9129:19;9123:4;9116:33;9186:1;9180:4;9176:12;9236:2;9229:5;9225:14;9212:28;9249:31;9272:7;9249:31;:::i;:::-;9310:17;;-1:-1:-1;;9306:32:27;9353:4;9340:18;;;;9303:56;9368:26;;;9442:2;9431:14;;9418:28;9455:33;9418:28;9455:33;:::i;:::-;-1:-1:-1;;;;;;9519:39:27;;;;9568:1;9564:15;;;;-1:-1:-1;;;;;9560:43:27;9516:88;9497:108;;-1:-1:-1;;9106:505:27:o;9616:131::-;-1:-1:-1;;;;;9691:31:27;;9681:42;;9671:2;;9737:1;9734;9727:12;9671:2;9661:86;:::o;9752:114::-;9836:4;9829:5;9825:16;9818:5;9815:27;9805:2;;9856:1;9853;9846:12",
  "language": "Solidity",
  "natspec": {
    "author": "Quantaf1re (James Key)",
    "kind": "dev",
    "methods": {
      "getAggregateKey()": {
        "notice": "Get the current aggregate key",
        "returns": {
          "_0": "The Key struct for the aggregate key"
        }
      },
      "getGovernanceKey()": {
        "notice": "Get the current governance key",
        "returns": {
          "_0": "The Key struct for the governance key"
        }
      },
      "getLastValidateTime()": {
        "notice": "Get the last time that a function was called which          required a signature from _aggregateKeyData or _governanceKeyData",
        "returns": {
          "_0": "The last time isValidSig was called, in unix time (uint)"
        }
      },
      "isNonceUsedByKey(uint8,uint256)": {
        "notice": "Get whether or not the specific keyID has used this nonce before          since it cannot be used again",
        "returns": {
          "_0": "Whether the nonce has already been used (bool)"
        }
      },
      "isValidSig((uint256,uint256,uint256),bytes32,uint8)": {
        "details": "It would be nice to split this up, but these checks          need to be made atomicly always. This needs to be available          in this contract and in the Vault etc",
        "notice": "Checks the validity of a signature and msgHash, then updates _lastValidateTime",
        "params": {
          "contractMsgHash": "The hash of the thing being signed but generated by the contract                  to check it against the hash in sigData (bytes32) (here that's normally                  a hash over the calldata to the function with an empty sigData)",
          "keyID": "The KeyID that indicates which key to verify the sig with. Ensures that                  only 'registered' keys can be used to successfully call this fcn and change                  _lastValidateTime",
          "sigData": "The keccak256 hash over the msg (uint) (here that's normally                  a hash over the calldata to the function with an empty sigData) and                  sig over that hash (uint) from the key input"
        },
        "returns": {
          "_0": "Bool used by caller to be absolutely sure that the function hasn't reverted"
        }
      },
      "setAggKeyWithAggKey((uint256,uint256,uint256),(uint256,uint8,address))": {
        "notice": "Set a new aggregate key. Requires a signature from the current aggregate key",
        "params": {
          "newKey": "The new aggregate key to be set. The x component of the pubkey (uint),                  the parity of the y component (uint8), and the nonce times G (address)",
          "sigData": "The keccak256 hash over the msg (uint) (which is the calldata                  for this function with empty msgHash and sig) and sig over that hash                  from the current aggregate key (uint)"
        }
      },
      "setAggKeyWithGovKey((uint256,uint256,uint256),(uint256,uint8,address))": {
        "notice": "Set a new aggregate key. Requires a signature from the current governance key",
        "params": {
          "newKey": "The new aggregate key to be set. The x component of the pubkey (uint),                  the parity of the y component (uint8), and the nonce times G (address)",
          "sigData": "The keccak256 hash over the msg (uint) (which is the calldata                  for this function with empty msgHash and sig) and sig over that hash                  from the current governance key (uint)"
        }
      },
      "setGovKeyWithGovKey((uint256,uint256,uint256),(uint256,uint8,address))": {
        "notice": "Set a new governance key. Requires a signature from the current governance key",
        "params": {
          "newKey": "The new governance key to be set. The x component of the pubkey (uint),                  the parity of the y component (uint8), and the nonce times G (address)",
          "sigData": "The keccak256 hash over the msg (uint) (which is the calldata                  for this function with empty msgHash and sig) and sig over that hash                  from the current governance key (uint)"
        }
      }
    },
    "notice": "Holds the aggregate and governance keys, functions to update them,            and isValidSig so other contracts can verify signatures and updates _lastValidateTime",
    "stateVariables": {
      "_keyIDToKey": {
        "details": "Used to get the key with the keyID. This prevents isValidSig being called         by keys that aren't the aggKey or govKey, which prevents outsiders being         able to change _lastValidateTime"
      },
      "_lastValidateTime": {
        "details": "The last time that a sig was verified (used for a dead man's switch)"
      }
    },
    "title": "KeyManager contract",
    "version": 1
  },
  "offset": [
    393,
    8998
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8AA62359 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8AA62359 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0xCD1B4D20 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0xD5B9C036 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0xDD30304C EQ PUSH2 0x13F JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x53F0BB61 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x6768485E EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x7F5586CC EQ PUSH2 0xC6 JUMPI DUP1 PUSH4 0x81DC37D6 EQ PUSH2 0xDB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB6 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0xBD0 JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9A JUMP JUMPDEST PUSH2 0xD9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0xCA9 JUMP JUMPDEST PUSH2 0x1C0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD9 PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0xCA9 JUMP JUMPDEST PUSH2 0x3B7 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0xC6D JUMP JUMPDEST PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x109 PUSH2 0x73B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP3 ADD MSTORE SWAP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x9A JUMP JUMPDEST PUSH2 0x109 PUSH2 0x7C3 JUMP JUMPDEST PUSH2 0xD9 PUSH2 0x14D CALLDATASIZE PUSH1 0x4 PUSH2 0xCA9 JUMP JUMPDEST PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x178 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x197 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP6 DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CF CALLDATASIZE DUP3 SWAP1 SUB DUP3 ADD DUP3 PUSH2 0xBF9 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED SWAP1 PUSH2 0xD94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x220 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED SWAP1 PUSH2 0xD5F JUMP JUMPDEST PUSH3 0x2A300 PUSH1 0x1 SLOAD TIMESTAMP PUSH2 0x232 SWAP2 SWAP1 PUSH2 0xE0C JUMP JUMPDEST LT ISZERO PUSH2 0x280 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4B65794D616E616765723A206E6F7420656E6F7567682064656C617900000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE SWAP1 MLOAD DUP5 SWAP2 PUSH4 0x1FD561B3 PUSH1 0xE2 SHL SWAP2 PUSH2 0x2B8 SWAP2 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0xDCB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP3 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x1 PUSH2 0x2F9 DUP4 DUP4 DUP4 PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xBB1864971E5C451203CC671F7D755EAF2EA5013CBDC3622B1A3DB8A0CE708F6B PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x348 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP8 PUSH1 0x40 MLOAD PUSH2 0x366 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP5 PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x393 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 DUP2 PUSH2 0x3AD SWAP2 SWAP1 PUSH2 0xE39 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3C6 CALLDATASIZE DUP3 SWAP1 SUB DUP3 ADD DUP3 PUSH2 0xBF9 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x3E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED SWAP1 PUSH2 0xD94 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x40E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED SWAP1 PUSH2 0xD5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE SWAP1 MLOAD DUP5 SWAP2 PUSH4 0x40EE1BEB PUSH1 0xE1 SHL SWAP2 PUSH2 0x446 SWAP2 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0xDCB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP3 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x0 PUSH2 0x487 DUP4 DUP4 DUP4 PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x490 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xBB1864971E5C451203CC671F7D755EAF2EA5013CBDC3622B1A3DB8A0CE708F6B PUSH1 0x1 PUSH1 0x0 DUP1 DUP1 PUSH2 0x329 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4E2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x501 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE SWAP1 POP DUP5 CALLDATALOAD DUP5 EQ PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4B65794D616E616765723A20696E76616C6964206D7367486173680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1ED JUMP JUMPDEST PUSH2 0x5B7 DUP6 PUSH1 0x0 ADD CALLDATALOAD DUP7 PUSH1 0x20 ADD CALLDATALOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x931 JUMP JUMPDEST PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4B65794D616E616765723A2053696720696E76616C6964000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x646 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP9 DUP4 ADD CALLDATALOAD DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4B65794D616E616765723A206E6F6E636520616C726561647920757365640000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1ED JUMP JUMPDEST TIMESTAMP PUSH1 0x1 SWAP1 DUP2 SSTORE PUSH1 0x2 PUSH1 0x0 DUP6 DUP4 DUP2 GT ISZERO PUSH2 0x6E0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6FF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP10 DUP4 ADD CALLDATALOAD DUP3 MSTORE SWAP1 SWAP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 DUP1 PUSH1 0x1 JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x77B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF DUP2 AND SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x100 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 DUP1 DUP1 PUSH2 0x75C JUMP JUMPDEST PUSH2 0x7F6 CALLDATASIZE DUP3 SWAP1 SUB DUP3 ADD DUP3 PUSH2 0xBF9 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x814 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED SWAP1 PUSH2 0xD94 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x83E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED SWAP1 PUSH2 0xD5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE SWAP1 MLOAD DUP5 SWAP2 PUSH4 0x374C0C13 PUSH1 0xE2 SHL SWAP2 PUSH2 0x876 SWAP2 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0xDCB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP3 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x1 PUSH2 0x8B7 DUP4 DUP4 DUP4 PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x8C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 MLOAD PUSH32 0xBB1864971E5C451203CC671F7D755EAF2EA5013CBDC3622B1A3DB8A0CE708F6B SWAP2 PUSH2 0x91E SWAP2 PUSH32 0xADA5013122D395BA3C54772283FB069B10426056EF8CA54750CB9BB552A59E7D SWAP1 DUP10 SWAP1 PUSH2 0xD1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP5 PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x374 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x95E PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 PUSH1 0x1 PUSH2 0xDF4 JUMP JUMPDEST DUP5 LT PUSH2 0x9A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x5075626C69632D6B65792078203E3D2048414C465F51 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1ED JUMP JUMPDEST PUSH17 0x14551231950B75FC4402DA1732FC9BEBE NOT DUP6 LT PUSH2 0xA06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536967206D7573742062652072656475636564206D6F64756C6F205100000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA1E JUMPI POP PUSH1 0x0 DUP5 GT JUMPDEST DUP1 ISZERO PUSH2 0xA2A JUMPI POP PUSH1 0x0 DUP6 GT JUMPDEST DUP1 ISZERO PUSH2 0xA36 JUMPI POP PUSH1 0x0 DUP7 GT JUMPDEST PUSH2 0xA7B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x139BC81E995C9BC81A5B9C1D5D1CC8185B1B1BDDD959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0xF8 DUP7 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP3 DUP5 ADD MSTORE PUSH1 0x41 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0x60 DUP6 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x61 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x55 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x75 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 PUSH1 0x1 PUSH17 0x14551231950B75FC4402DA1732FC9BEBE NOT DUP9 DUP9 MULMOD PUSH2 0xB07 SWAP1 PUSH17 0x14551231950B75FC4402DA1732FC9BEBE NOT PUSH2 0xE0C JUMP JUMPDEST PUSH1 0xFF DUP8 AND ISZERO PUSH2 0xB17 JUMPI PUSH1 0x1C PUSH2 0xB1A JUMP JUMPDEST PUSH1 0x1B JUMPDEST DUP9 PUSH17 0x14551231950B75FC4402DA1732FC9BEBE NOT DUP11 DUP8 MULMOD PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 DUP4 MSTORE SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0xFF SWAP1 SWAP4 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ SWAP4 POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0xBB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBCA JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xBEB DUP4 PUSH2 0xBA5 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC0A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xC39 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xC4E DUP2 PUSH2 0xEAA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH2 0xC61 DUP2 PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC81 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xC8B DUP6 DUP6 PUSH2 0xBB9 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0xCA0 PUSH1 0x80 DUP6 ADD PUSH2 0xBA5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCBB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xCC5 DUP5 DUP5 PUSH2 0xBB9 JUMP JUMPDEST SWAP2 POP PUSH2 0xCD4 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xBB9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH2 0xCEF DUP2 PUSH2 0xEAA JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH2 0xD05 DUP2 PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE DUP3 SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x8 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xE0 DUP2 ADD PUSH2 0xD57 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x5368617265643A206E6F6E636554696D6573474164647220697320656D707479 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x5368617265643A207075624B65795820697320656D7074790000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD PUSH2 0x734 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xE07 JUMPI PUSH2 0xE07 PUSH2 0xE23 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xE1E JUMPI PUSH2 0xE1E PUSH2 0xE23 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 SSTORE PUSH1 0x1 DUP2 ADD PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xE4F DUP2 PUSH2 0xEAA JUMP JUMPDEST DUP2 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND OR DUP1 DUP3 SSTORE PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xE6D DUP2 PUSH2 0xE92 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB AND OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xEA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xEA7 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B DUP16 0xE7 POP EQ SUB LOG1 DUP2 RETURNDATASIZE SWAP5 0xBD DUP14 LOG1 MULMOD CREATE 0xAE RETURNDATACOPY ADDMOD 0xDF 0x4C PUSH32 0x8A8BFC5077CF27BCAE51AE64736F6C6343000802003300000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        393,
        8998
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "5": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "CALLVALUE",
      "path": "13"
    },
    "6": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "7": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "8": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "12": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "REVERT",
      "path": "13"
    },
    "16": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "17": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "POP",
      "path": "13"
    },
    "18": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "21": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "LT",
      "path": "13"
    },
    "22": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x88"
    },
    "25": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "26": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "29": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "SHR",
      "path": "13"
    },
    "32": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "33": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x8AA62359"
    },
    "38": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "GT",
      "path": "13"
    },
    "39": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x5B"
    },
    "42": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "43": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "44": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x8AA62359"
    },
    "49": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "EQ",
      "path": "13"
    },
    "50": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xEE"
    },
    "53": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "54": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "55": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0xCD1B4D20"
    },
    "60": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "EQ",
      "path": "13"
    },
    "61": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x101"
    },
    "64": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "65": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "66": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0xD5B9C036"
    },
    "71": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "EQ",
      "path": "13"
    },
    "72": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x137"
    },
    "75": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "76": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "77": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0xDD30304C"
    },
    "82": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "EQ",
      "path": "13"
    },
    "83": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x13F"
    },
    "86": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "87": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x88"
    },
    "90": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMP",
      "path": "13"
    },
    "91": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "92": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "93": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x53F0BB61"
    },
    "98": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "EQ",
      "path": "13"
    },
    "99": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x8D"
    },
    "102": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "103": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "104": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x6768485E"
    },
    "109": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "EQ",
      "path": "13"
    },
    "110": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xA3"
    },
    "113": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "114": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "115": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x7F5586CC"
    },
    "120": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "EQ",
      "path": "13"
    },
    "121": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xC6"
    },
    "124": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "125": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "126": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH4",
      "path": "13",
      "value": "0x81DC37D6"
    },
    "131": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "EQ",
      "path": "13"
    },
    "132": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xDB"
    },
    "135": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "136": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "137": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "139": {
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "DUP1",
      "path": "13"
    },
    "140": {
      "first_revert": true,
      "fn": null,
      "offset": [
        393,
        8998
      ],
      "op": "REVERT",
      "path": "13"
    },
    "141": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "142": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7738,
        7755
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 0,
      "value": "0x1"
    },
    "144": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7738,
        7755
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "145": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "147": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "148": {
      "op": "SWAP1"
    },
    "149": {
      "op": "DUP2"
    },
    "150": {
      "op": "MSTORE"
    },
    "151": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "153": {
      "op": "ADD"
    },
    "154": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "155": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "157": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "158": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "DUP1",
      "path": "13"
    },
    "159": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "160": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "SUB",
      "path": "13"
    },
    "161": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "162": {
      "fn": "KeyManager.getLastValidateTime",
      "offset": [
        7652,
        7762
      ],
      "op": "RETURN",
      "path": "13"
    },
    "163": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "164": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xB6"
    },
    "167": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xB1"
    },
    "170": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "171": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "173": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xBD0"
    },
    "176": {
      "fn": "KeyManager.isNonceUsedByKey",
      "jump": "i",
      "offset": [
        7974,
        8117
      ],
      "op": "JUMP",
      "path": "13"
    },
    "177": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "178": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x152"
    },
    "181": {
      "fn": "KeyManager.isNonceUsedByKey",
      "jump": "i",
      "offset": [
        7974,
        8117
      ],
      "op": "JUMP",
      "path": "13"
    },
    "182": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "183": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "185": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "186": {
      "op": "SWAP1"
    },
    "187": {
      "op": "ISZERO"
    },
    "188": {
      "op": "ISZERO"
    },
    "189": {
      "op": "DUP2"
    },
    "190": {
      "op": "MSTORE"
    },
    "191": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "193": {
      "op": "ADD"
    },
    "194": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x9A"
    },
    "197": {
      "op": "JUMP"
    },
    "198": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "199": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xD9"
    },
    "202": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xD4"
    },
    "205": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "206": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "208": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xCA9"
    },
    "211": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        5119,
        5583
      ],
      "op": "JUMP",
      "path": "13"
    },
    "212": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "213": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1C0"
    },
    "216": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        5119,
        5583
      ],
      "op": "JUMP",
      "path": "13"
    },
    "217": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "218": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "STOP",
      "path": "13"
    },
    "219": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "220": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xD9"
    },
    "223": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xE9"
    },
    "226": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "227": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "229": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xCA9"
    },
    "232": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "jump": "i",
      "offset": [
        4118,
        4571
      ],
      "op": "JUMP",
      "path": "13"
    },
    "233": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "234": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x3B7"
    },
    "237": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "jump": "i",
      "offset": [
        4118,
        4571
      ],
      "op": "JUMP",
      "path": "13"
    },
    "238": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "239": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xB6"
    },
    "242": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xFC"
    },
    "245": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "246": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "248": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xC6D"
    },
    "251": {
      "fn": "KeyManager.isValidSig",
      "jump": "i",
      "offset": [
        2782,
        3572
      ],
      "op": "JUMP",
      "path": "13"
    },
    "252": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "253": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4BC"
    },
    "256": {
      "fn": "KeyManager.isValidSig",
      "jump": "i",
      "offset": [
        2782,
        3572
      ],
      "op": "JUMP",
      "path": "13"
    },
    "257": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "258": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x109"
    },
    "261": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x73B"
    },
    "264": {
      "fn": "KeyManager.getGovernanceKey",
      "jump": "i",
      "offset": [
        7288,
        7408
      ],
      "op": "JUMP",
      "path": "13"
    },
    "265": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "266": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "268": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "DUP1",
      "path": "13"
    },
    "269": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "270": {
      "op": "DUP3"
    },
    "271": {
      "op": "MLOAD"
    },
    "272": {
      "op": "DUP2"
    },
    "273": {
      "op": "MSTORE"
    },
    "274": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "276": {
      "op": "DUP1"
    },
    "277": {
      "op": "DUP5"
    },
    "278": {
      "op": "ADD"
    },
    "279": {
      "op": "MLOAD"
    },
    "280": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "282": {
      "op": "AND"
    },
    "283": {
      "op": "SWAP1"
    },
    "284": {
      "op": "DUP3"
    },
    "285": {
      "op": "ADD"
    },
    "286": {
      "op": "MSTORE"
    },
    "287": {
      "op": "SWAP2"
    },
    "288": {
      "op": "DUP2"
    },
    "289": {
      "op": "ADD"
    },
    "290": {
      "op": "MLOAD"
    },
    "291": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "293": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "295": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "297": {
      "op": "SHL"
    },
    "298": {
      "op": "SUB"
    },
    "299": {
      "op": "AND"
    },
    "300": {
      "op": "SWAP1"
    },
    "301": {
      "op": "DUP3"
    },
    "302": {
      "op": "ADD"
    },
    "303": {
      "op": "MSTORE"
    },
    "304": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "306": {
      "op": "ADD"
    },
    "307": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x9A"
    },
    "310": {
      "op": "JUMP"
    },
    "311": {
      "fn": "KeyManager.getAggregateKey",
      "offset": [
        7046,
        7165
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "312": {
      "fn": "KeyManager.getAggregateKey",
      "offset": [
        7046,
        7165
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x109"
    },
    "315": {
      "fn": "KeyManager.getAggregateKey",
      "offset": [
        7046,
        7165
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x7C3"
    },
    "318": {
      "fn": "KeyManager.getAggregateKey",
      "jump": "i",
      "offset": [
        7046,
        7165
      ],
      "op": "JUMP",
      "path": "13"
    },
    "319": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "320": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xD9"
    },
    "323": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x14D"
    },
    "326": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "CALLDATASIZE",
      "path": "13"
    },
    "327": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "329": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xCA9"
    },
    "332": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "jump": "i",
      "offset": [
        6133,
        6587
      ],
      "op": "JUMP",
      "path": "13"
    },
    "333": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "334": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x7E7"
    },
    "337": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "jump": "i",
      "offset": [
        6133,
        6587
      ],
      "op": "JUMP",
      "path": "13"
    },
    "338": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "339": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8057,
        8061
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "341": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8096
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 1,
      "value": "0x2"
    },
    "343": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "345": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8097,
        8102
      ],
      "op": "DUP5",
      "path": "13"
    },
    "346": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "348": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "DUP2",
      "path": "13"
    },
    "349": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "GT",
      "path": "13"
    },
    "350": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "351": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x178"
    },
    "354": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "355": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "360": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "362": {
      "op": "SHL"
    },
    "363": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "365": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "366": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "368": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "370": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "371": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "373": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "375": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "REVERT",
      "path": "13"
    },
    "376": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "377": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "379": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "DUP2",
      "path": "13"
    },
    "380": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "GT",
      "path": "13"
    },
    "381": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "382": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x197"
    },
    "385": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "386": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "391": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "393": {
      "op": "SHL"
    },
    "394": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "396": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "397": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "399": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "401": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "402": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "404": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "406": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "REVERT",
      "path": "13"
    },
    "407": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "408": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "DUP2",
      "path": "13"
    },
    "409": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "410": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "412": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "DUP1",
      "path": "13"
    },
    "413": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "DUP3",
      "path": "13"
    },
    "414": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "ADD",
      "path": "13"
    },
    "415": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "416": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "417": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "418": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "419": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "421": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "422": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "DUP2",
      "path": "13"
    },
    "423": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "ADD",
      "path": "13"
    },
    "424": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "426": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "427": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "DUP2",
      "path": "13"
    },
    "428": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8103
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "429": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "DUP6",
      "path": "13"
    },
    "430": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "DUP3",
      "path": "13"
    },
    "431": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "432": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "433": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "434": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "435": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "436": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "437": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "438": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xFF"
    },
    "440": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "AND",
      "path": "13"
    },
    "441": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        8080,
        8110
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "442": {
      "op": "POP"
    },
    "443": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "444": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "445": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "POP",
      "path": "13"
    },
    "446": {
      "fn": "KeyManager.isNonceUsedByKey",
      "offset": [
        7974,
        8117
      ],
      "op": "POP",
      "path": "13"
    },
    "447": {
      "fn": "KeyManager.isNonceUsedByKey",
      "jump": "o",
      "offset": [
        7974,
        8117
      ],
      "op": "JUMP",
      "path": "13"
    },
    "448": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5119,
        5583
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "449": {
      "offset": [
        1236,
        1436
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1CF"
    },
    "452": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "453": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "DUP3",
      "path": "17"
    },
    "454": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "455": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "SUB",
      "path": "17"
    },
    "456": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "DUP3",
      "path": "17"
    },
    "457": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "ADD",
      "path": "17"
    },
    "458": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5241,
        5247
      ],
      "op": "DUP3",
      "path": "13"
    },
    "459": {
      "offset": [
        1236,
        1436
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xBF9"
    },
    "462": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        1236,
        1436
      ],
      "op": "JUMP",
      "path": "17"
    },
    "463": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "464": {
      "offset": [
        1285,
        1296
      ],
      "op": "DUP1",
      "path": "17"
    },
    "465": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1285,
        1296
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "466": {
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1F6"
    },
    "469": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "470": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "472": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "473": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "477": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "479": {
      "op": "SHL"
    },
    "480": {
      "offset": [
        1277,
        1330
      ],
      "op": "DUP2",
      "path": "17"
    },
    "481": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "482": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "484": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "ADD",
      "path": "17"
    },
    "485": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1ED"
    },
    "488": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "489": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD94"
    },
    "492": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMP",
      "path": "17"
    },
    "493": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "494": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "496": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "497": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "DUP1",
      "path": "17"
    },
    "498": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "499": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "SUB",
      "path": "17"
    },
    "500": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "501": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "17"
    },
    "502": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "503": {
      "offset": [
        1348,
        1367
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "505": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1348,
        1367
      ],
      "op": "DUP2",
      "path": "17"
    },
    "506": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1348,
        1367
      ],
      "op": "ADD",
      "path": "17"
    },
    "507": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1348,
        1367
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "508": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "510": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "512": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "514": {
      "op": "SHL"
    },
    "515": {
      "op": "SUB"
    },
    "516": {
      "offset": [
        1348,
        1381
      ],
      "op": "AND",
      "path": "17"
    },
    "517": {
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x220"
    },
    "520": {
      "offset": [
        1340,
        1418
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "521": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "523": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "524": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "528": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "530": {
      "op": "SHL"
    },
    "531": {
      "offset": [
        1340,
        1418
      ],
      "op": "DUP2",
      "path": "17"
    },
    "532": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "533": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "535": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "ADD",
      "path": "17"
    },
    "536": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1ED"
    },
    "539": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "540": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD5F"
    },
    "543": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        1340,
        1418
      ],
      "op": "JUMP",
      "path": "17"
    },
    "544": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "545": {
      "offset": [
        502,
        508
      ],
      "op": "PUSH3",
      "path": "13",
      "value": "0x2A300"
    },
    "549": {
      "offset": [
        8678,
        8695
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "551": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8678,
        8695
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "552": {
      "offset": [
        8660,
        8675
      ],
      "op": "TIMESTAMP",
      "path": "13"
    },
    "553": {
      "offset": [
        8660,
        8695
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x232"
    },
    "556": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8660,
        8695
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "557": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8660,
        8695
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "558": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8660,
        8695
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xE0C"
    },
    "561": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        8660,
        8695
      ],
      "op": "JUMP",
      "path": "13"
    },
    "562": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8660,
        8695
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "563": {
      "offset": [
        8660,
        8715
      ],
      "op": "LT",
      "path": "13"
    },
    "564": {
      "branch": 18,
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8660,
        8715
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "565": {
      "offset": [
        8652,
        8748
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x280"
    },
    "568": {
      "branch": 18,
      "offset": [
        8652,
        8748
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "569": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8652,
        8748
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "571": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8652,
        8748
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "572": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "576": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "578": {
      "op": "SHL"
    },
    "579": {
      "offset": [
        8652,
        8748
      ],
      "op": "DUP2",
      "path": "13"
    },
    "580": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8652,
        8748
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "581": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "583": {
      "offset": [
        8652,
        8748
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "585": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8652,
        8748
      ],
      "op": "DUP3",
      "path": "13"
    },
    "586": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8652,
        8748
      ],
      "op": "ADD",
      "path": "13"
    },
    "587": {
      "op": "MSTORE"
    },
    "588": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "590": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "592": {
      "op": "DUP3"
    },
    "593": {
      "op": "ADD"
    },
    "594": {
      "op": "MSTORE"
    },
    "595": {
      "op": "PUSH32",
      "value": "0x4B65794D616E616765723A206E6F7420656E6F7567682064656C617900000000"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "630": {
      "op": "DUP3"
    },
    "631": {
      "op": "ADD"
    },
    "632": {
      "op": "MSTORE"
    },
    "633": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "635": {
      "op": "ADD"
    },
    "636": {
      "offset": [
        8652,
        8748
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1ED"
    },
    "639": {
      "op": "JUMP"
    },
    "640": {
      "offset": [
        8652,
        8748
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "641": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "643": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "DUP1",
      "path": "13"
    },
    "644": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "645": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "647": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "DUP2",
      "path": "13"
    },
    "648": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "ADD",
      "path": "13"
    },
    "649": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "DUP3",
      "path": "13"
    },
    "650": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "651": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "653": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "DUP1",
      "path": "13"
    },
    "654": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "DUP3",
      "path": "13"
    },
    "655": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "656": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "658": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "DUP3",
      "path": "13"
    },
    "659": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "ADD",
      "path": "13"
    },
    "660": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "661": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5401,
        5414
      ],
      "op": "DUP2",
      "path": "13"
    },
    "662": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5401,
        5414
      ],
      "op": "DUP6",
      "path": "13"
    },
    "663": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5401,
        5414
      ],
      "op": "ADD",
      "path": "13"
    },
    "664": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5401,
        5414
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "665": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "DUP2",
      "path": "13"
    },
    "666": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "DUP4",
      "path": "13"
    },
    "667": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "ADD",
      "path": "13"
    },
    "668": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "669": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "670": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "671": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5277,
        5284
      ],
      "op": "DUP5",
      "path": "13"
    },
    "672": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5277,
        5284
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "673": {
      "op": "PUSH4",
      "value": "0x1FD561B3"
    },
    "678": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "680": {
      "op": "SHL"
    },
    "681": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5340,
        5373
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "682": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2B8"
    },
    "685": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "686": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5387,
        5415
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "687": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5429,
        5435
      ],
      "op": "DUP7",
      "path": "13"
    },
    "688": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5429,
        5435
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "689": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "691": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "ADD",
      "path": "13"
    },
    "692": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xDCB"
    },
    "695": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        5304,
        5445
      ],
      "op": "JUMP",
      "path": "13"
    },
    "696": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "697": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "699": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "DUP1",
      "path": "13"
    },
    "700": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "701": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "703": {
      "op": "NOT"
    },
    "704": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "DUP2",
      "path": "13"
    },
    "705": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "DUP5",
      "path": "13"
    },
    "706": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SUB",
      "path": "13"
    },
    "707": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "ADD",
      "path": "13"
    },
    "708": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "DUP2",
      "path": "13"
    },
    "709": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "710": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "711": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "712": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "713": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "715": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "DUP2",
      "path": "13"
    },
    "716": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "ADD",
      "path": "13"
    },
    "717": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "DUP1",
      "path": "13"
    },
    "718": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "723": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "725": {
      "op": "SHL"
    },
    "726": {
      "op": "SUB"
    },
    "727": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "AND",
      "path": "13"
    },
    "728": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "730": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "732": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "734": {
      "op": "SHL"
    },
    "735": {
      "op": "SUB"
    },
    "736": {
      "op": "NOT"
    },
    "737": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "738": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "739": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "AND",
      "path": "13"
    },
    "740": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "741": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "742": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "743": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "OR",
      "path": "13"
    },
    "744": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "DUP3",
      "path": "13"
    },
    "745": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5304,
        5445
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "746": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5294,
        5446
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "747": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5294,
        5446
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "748": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5294,
        5446
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "749": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5456,
        5465
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "751": {
      "offset": [
        8934,
        8977
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x2F9"
    },
    "754": {
      "offset": [
        8945,
        8952
      ],
      "op": "DUP4",
      "path": "13"
    },
    "755": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5294,
        5446
      ],
      "op": "DUP4",
      "path": "13"
    },
    "756": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5456,
        5465
      ],
      "op": "DUP4",
      "path": "13"
    },
    "757": {
      "offset": [
        8934,
        8944
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4BC"
    },
    "760": {
      "jump": "i",
      "offset": [
        8934,
        8977
      ],
      "op": "JUMP",
      "path": "13"
    },
    "761": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8934,
        8977
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "762": {
      "offset": [
        8926,
        8978
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x302"
    },
    "765": {
      "offset": [
        8926,
        8978
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "766": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8926,
        8978
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "768": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8926,
        8978
      ],
      "op": "DUP1",
      "path": "13"
    },
    "769": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8926,
        8978
      ],
      "op": "REVERT",
      "path": "13"
    },
    "770": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        8926,
        8978
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "771": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "PUSH32",
      "path": "13",
      "statement": 2,
      "value": "0xBB1864971E5C451203CC671F7D755EAF2EA5013CBDC3622B1A3DB8A0CE708F6B"
    },
    "804": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5497,
        5502
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "806": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5497,
        5502
      ],
      "op": "DUP1",
      "path": "13"
    },
    "807": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5497,
        5502
      ],
      "op": "DUP1",
      "path": "13"
    },
    "808": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5497,
        5502
      ],
      "op": "DUP1",
      "path": "13"
    },
    "809": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "810": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "812": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "DUP2",
      "path": "13"
    },
    "813": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "GT",
      "path": "13"
    },
    "814": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "815": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x348"
    },
    "818": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "819": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "824": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "826": {
      "op": "SHL"
    },
    "827": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "829": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "830": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "832": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "834": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "835": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "837": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "839": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "REVERT",
      "path": "13"
    },
    "840": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "841": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "DUP2",
      "path": "13"
    },
    "842": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "843": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "845": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "ADD",
      "path": "13"
    },
    "846": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "847": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "DUP2",
      "path": "13"
    },
    "848": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "849": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "851": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "ADD",
      "path": "13"
    },
    "852": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "854": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5504,
        5526
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "855": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5528,
        5534
      ],
      "op": "DUP8",
      "path": "13"
    },
    "856": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "858": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "859": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x366"
    },
    "862": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "863": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "864": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "865": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "866": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xD1B"
    },
    "869": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        5487,
        5535
      ],
      "op": "JUMP",
      "path": "13"
    },
    "870": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "871": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "873": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "874": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "DUP1",
      "path": "13"
    },
    "875": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "876": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "SUB",
      "path": "13"
    },
    "877": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "878": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5487,
        5535
      ],
      "op": "LOG1",
      "path": "13"
    },
    "879": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5570,
        5576
      ],
      "op": "DUP5",
      "path": "13",
      "statement": 3
    },
    "880": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5556
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "882": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5556
      ],
      "op": "DUP1",
      "path": "13"
    },
    "883": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5556
      ],
      "op": "DUP1",
      "path": "13"
    },
    "884": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "885": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "887": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "DUP2",
      "path": "13"
    },
    "888": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "GT",
      "path": "13"
    },
    "889": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "890": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x393"
    },
    "893": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "894": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "899": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "901": {
      "op": "SHL"
    },
    "902": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "904": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "905": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "907": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "909": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "910": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "912": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "914": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "REVERT",
      "path": "13"
    },
    "915": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "916": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "DUP2",
      "path": "13"
    },
    "917": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "918": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "920": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "ADD",
      "path": "13"
    },
    "921": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "922": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "DUP2",
      "path": "13"
    },
    "923": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "924": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "926": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "ADD",
      "path": "13"
    },
    "927": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "929": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5567
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "930": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5576
      ],
      "op": "DUP2",
      "path": "13"
    },
    "931": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5576
      ],
      "op": "DUP2",
      "path": "13"
    },
    "932": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5576
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x3AD"
    },
    "935": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5576
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "936": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5576
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "937": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5576
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xE39"
    },
    "940": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "i",
      "offset": [
        5545,
        5576
      ],
      "op": "JUMP",
      "path": "13"
    },
    "941": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "offset": [
        5545,
        5576
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "942": {
      "op": "POP"
    },
    "943": {
      "op": "POP"
    },
    "944": {
      "op": "POP"
    },
    "945": {
      "op": "POP"
    },
    "946": {
      "op": "POP"
    },
    "947": {
      "op": "POP"
    },
    "948": {
      "op": "POP"
    },
    "949": {
      "op": "POP"
    },
    "950": {
      "fn": "KeyManager.setAggKeyWithGovKey",
      "jump": "o",
      "offset": [
        5119,
        5583
      ],
      "op": "JUMP",
      "path": "13"
    },
    "951": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4118,
        4571
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "952": {
      "offset": [
        1236,
        1436
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3C6"
    },
    "955": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1236,
        1436
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "956": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1236,
        1436
      ],
      "op": "DUP3",
      "path": "17"
    },
    "957": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1236,
        1436
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "958": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1236,
        1436
      ],
      "op": "SUB",
      "path": "17"
    },
    "959": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1236,
        1436
      ],
      "op": "DUP3",
      "path": "17"
    },
    "960": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1236,
        1436
      ],
      "op": "ADD",
      "path": "17"
    },
    "961": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4240,
        4246
      ],
      "op": "DUP3",
      "path": "13"
    },
    "962": {
      "offset": [
        1236,
        1436
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xBF9"
    },
    "965": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "jump": "i",
      "offset": [
        1236,
        1436
      ],
      "op": "JUMP",
      "path": "17"
    },
    "966": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1236,
        1436
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "967": {
      "offset": [
        1285,
        1296
      ],
      "op": "DUP1",
      "path": "17"
    },
    "968": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1285,
        1296
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "969": {
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3E4"
    },
    "972": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "973": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "975": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "976": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "980": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "982": {
      "op": "SHL"
    },
    "983": {
      "offset": [
        1277,
        1330
      ],
      "op": "DUP2",
      "path": "17"
    },
    "984": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "985": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "987": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "ADD",
      "path": "17"
    },
    "988": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1ED"
    },
    "991": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "992": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD94"
    },
    "995": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "jump": "i",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMP",
      "path": "17"
    },
    "996": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "997": {
      "offset": [
        1348,
        1367
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "999": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1348,
        1367
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1000": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1348,
        1367
      ],
      "op": "ADD",
      "path": "17"
    },
    "1001": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1348,
        1367
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1002": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1004": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1008": {
      "op": "SHL"
    },
    "1009": {
      "op": "SUB"
    },
    "1010": {
      "offset": [
        1348,
        1381
      ],
      "op": "AND",
      "path": "17"
    },
    "1011": {
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x40E"
    },
    "1014": {
      "offset": [
        1340,
        1418
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1015": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1017": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1018": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1022": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1024": {
      "op": "SHL"
    },
    "1025": {
      "offset": [
        1340,
        1418
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1026": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1027": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1029": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "ADD",
      "path": "17"
    },
    "1030": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1ED"
    },
    "1033": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1034": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD5F"
    },
    "1037": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "jump": "i",
      "offset": [
        1340,
        1418
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1038": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        1340,
        1418
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1039": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1041": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1042": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1043": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "1045": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1046": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "ADD",
      "path": "13"
    },
    "1047": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1048": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1049": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1051": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1052": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1053": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1054": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1056": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1057": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "ADD",
      "path": "13"
    },
    "1058": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1059": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4390,
        4403
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1060": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4390,
        4403
      ],
      "op": "DUP6",
      "path": "13"
    },
    "1061": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4390,
        4403
      ],
      "op": "ADD",
      "path": "13"
    },
    "1062": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4390,
        4403
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "1063": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1064": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1065": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "ADD",
      "path": "13"
    },
    "1066": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1067": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1068": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1069": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4266,
        4273
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1070": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4266,
        4273
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1071": {
      "op": "PUSH4",
      "value": "0x40EE1BEB"
    },
    "1076": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "1078": {
      "op": "SHL"
    },
    "1079": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4329,
        4362
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1080": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x446"
    },
    "1083": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1084": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4376,
        4404
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1085": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4418,
        4424
      ],
      "op": "DUP7",
      "path": "13"
    },
    "1086": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4418,
        4424
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1087": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "1089": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "ADD",
      "path": "13"
    },
    "1090": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xDCB"
    },
    "1093": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "jump": "i",
      "offset": [
        4293,
        4434
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1094": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1095": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1097": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1098": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1099": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1101": {
      "op": "NOT"
    },
    "1102": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1103": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1104": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SUB",
      "path": "13"
    },
    "1105": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "ADD",
      "path": "13"
    },
    "1106": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1107": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1108": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1109": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1110": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1111": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1113": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1114": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "ADD",
      "path": "13"
    },
    "1115": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1116": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1117": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1119": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1121": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1123": {
      "op": "SHL"
    },
    "1124": {
      "op": "SUB"
    },
    "1125": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "AND",
      "path": "13"
    },
    "1126": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1128": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1130": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1132": {
      "op": "SHL"
    },
    "1133": {
      "op": "SUB"
    },
    "1134": {
      "op": "NOT"
    },
    "1135": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1136": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1137": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "AND",
      "path": "13"
    },
    "1138": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1139": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1140": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1141": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "OR",
      "path": "13"
    },
    "1142": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1143": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4293,
        4434
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1144": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4283,
        4435
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1145": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4283,
        4435
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1146": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4283,
        4435
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1147": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1149": {
      "offset": [
        8934,
        8977
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x487"
    },
    "1152": {
      "offset": [
        8945,
        8952
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1153": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4283,
        4435
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1154": {
      "op": "DUP4"
    },
    "1155": {
      "offset": [
        8934,
        8944
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4BC"
    },
    "1158": {
      "jump": "i",
      "offset": [
        8934,
        8977
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1159": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        8934,
        8977
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1160": {
      "offset": [
        8926,
        8978
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x490"
    },
    "1163": {
      "offset": [
        8926,
        8978
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1164": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        8926,
        8978
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1166": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        8926,
        8978
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1167": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        8926,
        8978
      ],
      "op": "REVERT",
      "path": "13"
    },
    "1168": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        8926,
        8978
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1169": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4476,
        4523
      ],
      "op": "PUSH32",
      "path": "13",
      "statement": 4,
      "value": "0xBB1864971E5C451203CC671F7D755EAF2EA5013CBDC3622B1A3DB8A0CE708F6B"
    },
    "1202": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4486,
        4490
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1204": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4492,
        4503
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1206": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4492,
        4503
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1207": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4492,
        4503
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1208": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4492,
        4514
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x329"
    },
    "1211": {
      "fn": "KeyManager.setAggKeyWithAggKey",
      "offset": [
        4492,
        4514
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1212": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1213": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2921,
        2925
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1215": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2951
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1216": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2965
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1218": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1219": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2966,
        2971
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1220": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1222": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1223": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "GT",
      "path": "13"
    },
    "1224": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1225": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4E2"
    },
    "1228": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1229": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1234": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1236": {
      "op": "SHL"
    },
    "1237": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1239": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1240": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "1242": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1244": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1245": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "1247": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1249": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "REVERT",
      "path": "13"
    },
    "1250": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1251": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1253": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1254": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "GT",
      "path": "13"
    },
    "1255": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1256": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x501"
    },
    "1259": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1260": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1265": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1267": {
      "op": "SHL"
    },
    "1268": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1270": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1271": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "1273": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1275": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1276": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "1278": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1280": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "REVERT",
      "path": "13"
    },
    "1281": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1282": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1283": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1284": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1286": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1287": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1288": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "ADD",
      "path": "13"
    },
    "1289": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1290": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1291": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1292": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1293": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1295": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1296": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1297": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "ADD",
      "path": "13"
    },
    "1298": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1300": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2954,
        2972
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1301": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1302": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1303": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "1305": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1306": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "ADD",
      "path": "13"
    },
    "1307": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1308": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1309": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1310": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1311": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1312": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1313": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1315": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1316": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1317": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "ADD",
      "path": "13"
    },
    "1318": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1319": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xFF"
    },
    "1321": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1322": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "AND",
      "path": "13"
    },
    "1323": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1324": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1325": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "ADD",
      "path": "13"
    },
    "1326": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1327": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1328": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1329": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1330": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x100"
    },
    "1333": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1334": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1335": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DIV",
      "path": "13"
    },
    "1336": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1338": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1340": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1342": {
      "op": "SHL"
    },
    "1343": {
      "op": "SUB"
    },
    "1344": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "AND",
      "path": "13"
    },
    "1345": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1346": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1347": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "ADD",
      "path": "13"
    },
    "1348": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1349": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2937,
        2972
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1350": {
      "op": "POP"
    },
    "1351": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2990,
        3005
      ],
      "op": "DUP5",
      "path": "13",
      "statement": 5
    },
    "1352": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2990,
        3005
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "1353": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2990,
        3030
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1354": {
      "branch": 19,
      "fn": "KeyManager.isValidSig",
      "offset": [
        2990,
        3030
      ],
      "op": "EQ",
      "path": "13"
    },
    "1355": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x596"
    },
    "1358": {
      "branch": 19,
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1359": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1361": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1362": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1366": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1368": {
      "op": "SHL"
    },
    "1369": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1370": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1371": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1373": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1375": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1376": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "ADD",
      "path": "13"
    },
    "1377": {
      "op": "MSTORE"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "1380": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1382": {
      "op": "DUP3"
    },
    "1383": {
      "op": "ADD"
    },
    "1384": {
      "op": "MSTORE"
    },
    "1385": {
      "op": "PUSH32",
      "value": "0x4B65794D616E616765723A20696E76616C6964206D7367486173680000000000"
    },
    "1418": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1420": {
      "op": "DUP3"
    },
    "1421": {
      "op": "ADD"
    },
    "1422": {
      "op": "MSTORE"
    },
    "1423": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1425": {
      "op": "ADD"
    },
    "1426": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1ED"
    },
    "1429": {
      "op": "JUMP"
    },
    "1430": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2982,
        3062
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1431": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3093,
        3285
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 6,
      "value": "0x5B7"
    },
    "1434": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3126,
        3133
      ],
      "op": "DUP6",
      "path": "13"
    },
    "1435": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3126,
        3141
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1437": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3126,
        3141
      ],
      "op": "ADD",
      "path": "13"
    },
    "1438": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3126,
        3141
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "1439": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3159,
        3166
      ],
      "op": "DUP7",
      "path": "13"
    },
    "1440": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3159,
        3170
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1442": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3159,
        3170
      ],
      "op": "ADD",
      "path": "13"
    },
    "1443": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3159,
        3170
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "1444": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3188,
        3191
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1445": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3188,
        3199
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1447": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3188,
        3199
      ],
      "op": "ADD",
      "path": "13"
    },
    "1448": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3188,
        3199
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1449": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3217,
        3220
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1450": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3217,
        3234
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1452": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3217,
        3234
      ],
      "op": "ADD",
      "path": "13"
    },
    "1453": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3217,
        3234
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1454": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3252,
        3255
      ],
      "op": "DUP6",
      "path": "13"
    },
    "1455": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3252,
        3271
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1457": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3252,
        3271
      ],
      "op": "ADD",
      "path": "13"
    },
    "1458": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3252,
        3271
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1459": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3093,
        3108
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x931"
    },
    "1462": {
      "fn": "KeyManager.isValidSig",
      "jump": "i",
      "offset": [
        3093,
        3285
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1463": {
      "branch": 20,
      "fn": "KeyManager.isValidSig",
      "offset": [
        3093,
        3285
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1464": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x603"
    },
    "1467": {
      "branch": 20,
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1468": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1470": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1471": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1475": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1477": {
      "op": "SHL"
    },
    "1478": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1479": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1480": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1482": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1484": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1485": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "ADD",
      "path": "13"
    },
    "1486": {
      "op": "MSTORE"
    },
    "1487": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1489": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1491": {
      "op": "DUP3"
    },
    "1492": {
      "op": "ADD"
    },
    "1493": {
      "op": "MSTORE"
    },
    "1494": {
      "op": "PUSH32",
      "value": "0x4B65794D616E616765723A2053696720696E76616C6964000000000000000000"
    },
    "1527": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1529": {
      "op": "DUP3"
    },
    "1530": {
      "op": "ADD"
    },
    "1531": {
      "op": "MSTORE"
    },
    "1532": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1534": {
      "op": "ADD"
    },
    "1535": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1ED"
    },
    "1538": {
      "op": "JUMP"
    },
    "1539": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3072,
        3334
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1540": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3369
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 7,
      "value": "0x2"
    },
    "1542": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1544": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3370,
        3375
      ],
      "op": "DUP5",
      "path": "13"
    },
    "1545": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1547": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1548": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "GT",
      "path": "13"
    },
    "1549": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1550": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x627"
    },
    "1553": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1554": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1559": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1561": {
      "op": "SHL"
    },
    "1562": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1564": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1565": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "1567": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1569": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1570": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "1572": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1574": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "REVERT",
      "path": "13"
    },
    "1575": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1576": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1578": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1579": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "GT",
      "path": "13"
    },
    "1580": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1581": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x646"
    },
    "1584": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1585": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1590": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1592": {
      "op": "SHL"
    },
    "1593": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1595": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1596": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "1598": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1600": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1601": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "1603": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1605": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "REVERT",
      "path": "13"
    },
    "1606": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1607": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1608": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1609": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1611": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1612": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1613": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "ADD",
      "path": "13"
    },
    "1614": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1615": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1616": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1617": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1618": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1620": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1621": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1622": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "ADD",
      "path": "13"
    },
    "1623": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1625": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1626": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1627": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3376
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1628": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3377,
        3390
      ],
      "op": "DUP9",
      "path": "13"
    },
    "1629": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3377,
        3390
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1630": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3377,
        3390
      ],
      "op": "ADD",
      "path": "13"
    },
    "1631": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3377,
        3390
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "1632": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1633": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1634": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1635": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1636": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1637": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1638": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1639": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1640": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xFF"
    },
    "1642": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3353,
        3391
      ],
      "op": "AND",
      "path": "13"
    },
    "1643": {
      "branch": 21,
      "fn": "KeyManager.isValidSig",
      "offset": [
        3352,
        3391
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1644": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x6B7"
    },
    "1647": {
      "branch": 21,
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1648": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1650": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1651": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1655": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1657": {
      "op": "SHL"
    },
    "1658": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1659": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1660": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1662": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1664": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1665": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "ADD",
      "path": "13"
    },
    "1666": {
      "op": "MSTORE"
    },
    "1667": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "1669": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1671": {
      "op": "DUP3"
    },
    "1672": {
      "op": "ADD"
    },
    "1673": {
      "op": "MSTORE"
    },
    "1674": {
      "op": "PUSH32",
      "value": "0x4B65794D616E616765723A206E6F6E636520616C726561647920757365640000"
    },
    "1707": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1709": {
      "op": "DUP3"
    },
    "1710": {
      "op": "ADD"
    },
    "1711": {
      "op": "MSTORE"
    },
    "1712": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1714": {
      "op": "ADD"
    },
    "1715": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x1ED"
    },
    "1718": {
      "op": "JUMP"
    },
    "1719": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3344,
        3426
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1720": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3465,
        3480
      ],
      "op": "TIMESTAMP",
      "path": "13",
      "statement": 8
    },
    "1721": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3445,
        3462
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1723": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3445,
        3480
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1724": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3445,
        3480
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1725": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3445,
        3480
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "1726": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3506
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 9,
      "value": "0x2"
    },
    "1728": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1730": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3507,
        3512
      ],
      "op": "DUP6",
      "path": "13"
    },
    "1731": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1732": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1733": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "GT",
      "path": "13"
    },
    "1734": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1735": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x6E0"
    },
    "1738": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1739": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1744": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1746": {
      "op": "SHL"
    },
    "1747": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1749": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1750": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "1752": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1754": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1755": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "1757": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1759": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "REVERT",
      "path": "13"
    },
    "1760": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1761": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1763": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1764": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "GT",
      "path": "13"
    },
    "1765": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1766": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x6FF"
    },
    "1769": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1770": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1775": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1777": {
      "op": "SHL"
    },
    "1778": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1780": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1781": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "1783": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1785": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1786": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "1788": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1790": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "REVERT",
      "path": "13"
    },
    "1791": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1792": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1793": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1794": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1796": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1797": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1798": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "ADD",
      "path": "13"
    },
    "1799": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1800": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1801": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1802": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1803": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1805": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1806": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1807": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "ADD",
      "path": "13"
    },
    "1808": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1810": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1811": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1812": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3513
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1813": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3514,
        3527
      ],
      "op": "DUP10",
      "path": "13"
    },
    "1814": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3514,
        3527
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1815": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3514,
        3527
      ],
      "op": "ADD",
      "path": "13"
    },
    "1816": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3514,
        3527
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "1817": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3528
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1818": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3528
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1819": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3528
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1820": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3528
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1821": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3528
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1822": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3528
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1823": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3528
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1824": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1825": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1826": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1828": {
      "op": "NOT"
    },
    "1829": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "AND",
      "path": "13"
    },
    "1830": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1831": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1832": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1833": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1834": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1835": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1836": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "OR",
      "path": "13"
    },
    "1837": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1838": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        3490,
        3535
      ],
      "op": "SSTORE",
      "path": "13"
    },
    "1839": {
      "op": "POP"
    },
    "1840": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1842": {
      "op": "SWAP1"
    },
    "1843": {
      "op": "POP"
    },
    "1844": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1845": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1846": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1847": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "POP",
      "path": "13"
    },
    "1848": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "POP",
      "path": "13"
    },
    "1849": {
      "fn": "KeyManager.isValidSig",
      "offset": [
        2782,
        3572
      ],
      "op": "POP",
      "path": "13"
    },
    "1850": {
      "fn": "KeyManager.isValidSig",
      "jump": "o",
      "offset": [
        2782,
        3572
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1851": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1852": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1854": {
      "op": "DUP1"
    },
    "1855": {
      "op": "MLOAD"
    },
    "1856": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1858": {
      "op": "DUP2"
    },
    "1859": {
      "op": "ADD"
    },
    "1860": {
      "op": "DUP3"
    },
    "1861": {
      "op": "MSTORE"
    },
    "1862": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1864": {
      "op": "DUP1"
    },
    "1865": {
      "op": "DUP3"
    },
    "1866": {
      "op": "MSTORE"
    },
    "1867": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1869": {
      "op": "DUP3"
    },
    "1870": {
      "op": "ADD"
    },
    "1871": {
      "op": "DUP2"
    },
    "1872": {
      "op": "SWAP1"
    },
    "1873": {
      "op": "MSTORE"
    },
    "1874": {
      "op": "SWAP2"
    },
    "1875": {
      "op": "DUP2"
    },
    "1876": {
      "op": "ADD"
    },
    "1877": {
      "op": "DUP3"
    },
    "1878": {
      "op": "SWAP1"
    },
    "1879": {
      "op": "MSTORE"
    },
    "1880": {
      "op": "SWAP1"
    },
    "1881": {
      "op": "DUP1"
    },
    "1882": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7390,
        7399
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 10,
      "value": "0x1"
    },
    "1884": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1885": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1887": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1888": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "GT",
      "path": "13"
    },
    "1889": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "ISZERO",
      "path": "13"
    },
    "1890": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x77B"
    },
    "1893": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "1894": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1899": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1901": {
      "op": "SHL"
    },
    "1902": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1904": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1905": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x21"
    },
    "1907": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x4"
    },
    "1909": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1910": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "1912": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "1914": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "REVERT",
      "path": "13"
    },
    "1915": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1916": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1917": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1918": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "1920": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "DUP1",
      "path": "13"
    },
    "1921": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1922": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "ADD",
      "path": "13"
    },
    "1923": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1924": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1925": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1926": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1927": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "1929": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1930": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1931": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "ADD",
      "path": "13"
    },
    "1932": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1934": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7378,
        7400
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "1935": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1936": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "1937": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "1939": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1940": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "ADD",
      "path": "13"
    },
    "1941": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DUP4",
      "path": "13"
    },
    "1942": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1943": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1944": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1945": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1946": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1947": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "1949": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1950": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1951": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "ADD",
      "path": "13"
    },
    "1952": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SLOAD",
      "path": "13"
    },
    "1953": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0xFF"
    },
    "1955": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DUP2",
      "path": "13"
    },
    "1956": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "AND",
      "path": "13"
    },
    "1957": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1958": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1959": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "ADD",
      "path": "13"
    },
    "1960": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1961": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1962": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "1963": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1964": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x100"
    },
    "1967": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1968": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "1969": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DIV",
      "path": "13"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1972": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1974": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1976": {
      "op": "SHL"
    },
    "1977": {
      "op": "SUB"
    },
    "1978": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "AND",
      "path": "13"
    },
    "1979": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1980": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "DUP3",
      "path": "13"
    },
    "1981": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "ADD",
      "path": "13"
    },
    "1982": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "1983": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7370,
        7401
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "1984": {
      "fn": "KeyManager.getGovernanceKey",
      "offset": [
        7288,
        7408
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "1985": {
      "op": "POP"
    },
    "1986": {
      "fn": "KeyManager.getGovernanceKey",
      "jump": "o",
      "offset": [
        7288,
        7408
      ],
      "op": "JUMP",
      "path": "13"
    },
    "1987": {
      "fn": "KeyManager.getAggregateKey",
      "offset": [
        7046,
        7165
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "1988": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1990": {
      "op": "DUP1"
    },
    "1991": {
      "op": "MLOAD"
    },
    "1992": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1994": {
      "op": "DUP2"
    },
    "1995": {
      "op": "ADD"
    },
    "1996": {
      "op": "DUP3"
    },
    "1997": {
      "op": "MSTORE"
    },
    "1998": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2000": {
      "op": "DUP1"
    },
    "2001": {
      "op": "DUP3"
    },
    "2002": {
      "op": "MSTORE"
    },
    "2003": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2005": {
      "op": "DUP3"
    },
    "2006": {
      "op": "ADD"
    },
    "2007": {
      "op": "DUP2"
    },
    "2008": {
      "op": "SWAP1"
    },
    "2009": {
      "op": "MSTORE"
    },
    "2010": {
      "op": "SWAP2"
    },
    "2011": {
      "op": "DUP2"
    },
    "2012": {
      "op": "ADD"
    },
    "2013": {
      "op": "DUP3"
    },
    "2014": {
      "op": "SWAP1"
    },
    "2015": {
      "op": "MSTORE"
    },
    "2016": {
      "op": "SWAP1"
    },
    "2017": {
      "op": "DUP1"
    },
    "2018": {
      "op": "DUP1"
    },
    "2019": {
      "fn": "KeyManager.getAggregateKey",
      "offset": [
        7135,
        7157
      ],
      "op": "PUSH2",
      "path": "13",
      "statement": 11,
      "value": "0x75C"
    },
    "2022": {
      "fn": "KeyManager.getAggregateKey",
      "offset": [
        7135,
        7157
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2023": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6133,
        6587
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2024": {
      "offset": [
        1236,
        1436
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x7F6"
    },
    "2027": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "2028": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2029": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2030": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "SUB",
      "path": "17"
    },
    "2031": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2032": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "ADD",
      "path": "17"
    },
    "2033": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6255,
        6261
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2034": {
      "offset": [
        1236,
        1436
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xBF9"
    },
    "2037": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "jump": "i",
      "offset": [
        1236,
        1436
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2038": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1236,
        1436
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2039": {
      "offset": [
        1285,
        1296
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2040": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1285,
        1296
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2041": {
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x814"
    },
    "2044": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2045": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2047": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2048": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2052": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2054": {
      "op": "SHL"
    },
    "2055": {
      "offset": [
        1277,
        1330
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2056": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2057": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2059": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "ADD",
      "path": "17"
    },
    "2060": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1ED"
    },
    "2063": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2064": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD94"
    },
    "2067": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "jump": "i",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2068": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1277,
        1330
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2069": {
      "offset": [
        1348,
        1367
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2071": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1348,
        1367
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2072": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1348,
        1367
      ],
      "op": "ADD",
      "path": "17"
    },
    "2073": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1348,
        1367
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2074": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2076": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2078": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2080": {
      "op": "SHL"
    },
    "2081": {
      "op": "SUB"
    },
    "2082": {
      "offset": [
        1348,
        1381
      ],
      "op": "AND",
      "path": "17"
    },
    "2083": {
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x83E"
    },
    "2086": {
      "offset": [
        1340,
        1418
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2087": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2089": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2090": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2094": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2096": {
      "op": "SHL"
    },
    "2097": {
      "offset": [
        1340,
        1418
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2098": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2099": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2101": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "ADD",
      "path": "17"
    },
    "2102": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1ED"
    },
    "2105": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2106": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD5F"
    },
    "2109": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "jump": "i",
      "offset": [
        1340,
        1418
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2110": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        1340,
        1418
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2111": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2113": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2114": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2115": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x60"
    },
    "2117": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2118": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "ADD",
      "path": "13"
    },
    "2119": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2120": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2121": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2123": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2124": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2125": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2126": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2128": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2129": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "ADD",
      "path": "13"
    },
    "2130": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2131": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6405,
        6418
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2132": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6405,
        6418
      ],
      "op": "DUP6",
      "path": "13"
    },
    "2133": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6405,
        6418
      ],
      "op": "ADD",
      "path": "13"
    },
    "2134": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6405,
        6418
      ],
      "op": "CALLDATALOAD",
      "path": "13"
    },
    "2135": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2136": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2137": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "ADD",
      "path": "13"
    },
    "2138": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2139": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2140": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2141": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6281,
        6288
      ],
      "op": "DUP5",
      "path": "13"
    },
    "2142": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6281,
        6288
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2143": {
      "op": "PUSH4",
      "value": "0x374C0C13"
    },
    "2148": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "2150": {
      "op": "SHL"
    },
    "2151": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6344,
        6377
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2152": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x876"
    },
    "2155": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2156": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6391,
        6419
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2157": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6433,
        6439
      ],
      "op": "DUP7",
      "path": "13"
    },
    "2158": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6433,
        6439
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2159": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x24"
    },
    "2161": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "ADD",
      "path": "13"
    },
    "2162": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xDCB"
    },
    "2165": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "jump": "i",
      "offset": [
        6308,
        6449
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2166": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2167": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2169": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2170": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2171": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2173": {
      "op": "NOT"
    },
    "2174": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2175": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "DUP5",
      "path": "13"
    },
    "2176": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SUB",
      "path": "13"
    },
    "2177": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "ADD",
      "path": "13"
    },
    "2178": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2179": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2180": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2181": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2182": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2183": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2185": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2186": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "ADD",
      "path": "13"
    },
    "2187": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2188": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2189": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2191": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2193": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2195": {
      "op": "SHL"
    },
    "2196": {
      "op": "SUB"
    },
    "2197": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "AND",
      "path": "13"
    },
    "2198": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2200": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2202": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2204": {
      "op": "SHL"
    },
    "2205": {
      "op": "SUB"
    },
    "2206": {
      "op": "NOT"
    },
    "2207": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2208": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP4",
      "path": "13"
    },
    "2209": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "AND",
      "path": "13"
    },
    "2210": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2211": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2212": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "SWAP3",
      "path": "13"
    },
    "2213": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "OR",
      "path": "13"
    },
    "2214": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "DUP3",
      "path": "13"
    },
    "2215": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6308,
        6449
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2216": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6298,
        6450
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2217": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6298,
        6450
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2218": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6298,
        6450
      ],
      "op": "KECCAK256",
      "path": "13"
    },
    "2219": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6460,
        6469
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "2221": {
      "offset": [
        8934,
        8977
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x8B7"
    },
    "2224": {
      "offset": [
        8945,
        8952
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2225": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6298,
        6450
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2226": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6460,
        6469
      ],
      "op": "DUP4",
      "path": "13"
    },
    "2227": {
      "offset": [
        8934,
        8944
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x4BC"
    },
    "2230": {
      "jump": "i",
      "offset": [
        8934,
        8977
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2231": {
      "branch": 22,
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        8934,
        8977
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2232": {
      "offset": [
        8926,
        8978
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x8C0"
    },
    "2235": {
      "branch": 22,
      "offset": [
        8926,
        8978
      ],
      "op": "JUMPI",
      "path": "13"
    },
    "2236": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        8926,
        8978
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2238": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        8926,
        8978
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2239": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        8926,
        8978
      ],
      "op": "REVERT",
      "path": "13"
    },
    "2240": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        8926,
        8978
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2241": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6520,
        6529
      ],
      "op": "PUSH1",
      "path": "13",
      "statement": 12,
      "value": "0x1"
    },
    "2243": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6501,
        6506
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2245": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2246": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2247": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2248": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x20"
    },
    "2250": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "DUP2",
      "path": "13"
    },
    "2251": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2252": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "MSTORE",
      "path": "13"
    },
    "2253": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2255": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2256": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "PUSH32",
      "path": "13",
      "value": "0xBB1864971E5C451203CC671F7D755EAF2EA5013CBDC3622B1A3DB8A0CE708F6B"
    },
    "2289": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2290": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x91E"
    },
    "2293": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2294": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "PUSH32",
      "path": "13",
      "value": "0xADA5013122D395BA3C54772283FB069B10426056EF8CA54750CB9BB552A59E7D"
    },
    "2327": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6508,
        6530
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2328": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6532,
        6538
      ],
      "op": "DUP10",
      "path": "13"
    },
    "2329": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6532,
        6538
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2330": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0xD1B"
    },
    "2333": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "jump": "i",
      "offset": [
        6491,
        6539
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2334": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "JUMPDEST",
      "path": "13"
    },
    "2335": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x40"
    },
    "2337": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "MLOAD",
      "path": "13"
    },
    "2338": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2339": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "SWAP2",
      "path": "13"
    },
    "2340": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "SUB",
      "path": "13"
    },
    "2341": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "SWAP1",
      "path": "13"
    },
    "2342": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6491,
        6539
      ],
      "op": "LOG1",
      "path": "13"
    },
    "2343": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6574,
        6580
      ],
      "op": "DUP5",
      "path": "13",
      "statement": 13
    },
    "2344": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6549,
        6560
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x0"
    },
    "2346": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6549,
        6560
      ],
      "op": "DUP1",
      "path": "13"
    },
    "2347": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6561,
        6570
      ],
      "op": "PUSH1",
      "path": "13",
      "value": "0x1"
    },
    "2349": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6549,
        6571
      ],
      "op": "PUSH2",
      "path": "13",
      "value": "0x374"
    },
    "2352": {
      "fn": "KeyManager.setGovKeyWithGovKey",
      "offset": [
        6549,
        6571
      ],
      "op": "JUMP",
      "path": "13"
    },
    "2353": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        5863,
        7954
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2354": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6053,
        6057
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2356": {
      "offset": [
        735,
        747
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x95E"
    },
    "2359": {
      "offset": [
        736,
        742
      ],
      "op": "PUSH32",
      "path": "16",
      "value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
    },
    "2392": {
      "offset": [
        741,
        742
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "2394": {
      "offset": [
        735,
        747
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xDF4"
    },
    "2397": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "jump": "i",
      "offset": [
        735,
        747
      ],
      "op": "JUMP",
      "path": "16"
    },
    "2398": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        735,
        747
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2399": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6073,
        6087
      ],
      "op": "DUP5",
      "path": "16",
      "statement": 14
    },
    "2400": {
      "branch": 23,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6073,
        6096
      ],
      "op": "LT",
      "path": "16"
    },
    "2401": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x9A5"
    },
    "2404": {
      "branch": 23,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2405": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2407": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2408": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2412": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2414": {
      "op": "SHL"
    },
    "2415": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2416": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2417": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2419": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "2421": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2422": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "ADD",
      "path": "16"
    },
    "2423": {
      "op": "MSTORE"
    },
    "2424": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "2426": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2428": {
      "op": "DUP3"
    },
    "2429": {
      "op": "ADD"
    },
    "2430": {
      "op": "MSTORE"
    },
    "2431": {
      "op": "PUSH22",
      "value": "0x5075626C69632D6B65792078203E3D2048414C465F51"
    },
    "2454": {
      "op": "PUSH1",
      "value": "0x50"
    },
    "2456": {
      "op": "SHL"
    },
    "2457": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2459": {
      "op": "DUP3"
    },
    "2460": {
      "op": "ADD"
    },
    "2461": {
      "op": "MSTORE"
    },
    "2462": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2464": {
      "op": "ADD"
    },
    "2465": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1ED"
    },
    "2468": {
      "op": "JUMP"
    },
    "2469": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6065,
        6123
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2470": {
      "op": "PUSH17",
      "value": "0x14551231950B75FC4402DA1732FC9BEBE"
    },
    "2488": {
      "op": "NOT"
    },
    "2489": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6221,
        6230
      ],
      "op": "DUP6",
      "path": "16",
      "statement": 15
    },
    "2490": {
      "branch": 24,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6221,
        6234
      ],
      "op": "LT",
      "path": "16"
    },
    "2491": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xA06"
    },
    "2494": {
      "branch": 24,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2495": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2497": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2498": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2502": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2504": {
      "op": "SHL"
    },
    "2505": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2506": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2507": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2509": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "2511": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2512": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "ADD",
      "path": "16"
    },
    "2513": {
      "op": "MSTORE"
    },
    "2514": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "2516": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2518": {
      "op": "DUP3"
    },
    "2519": {
      "op": "ADD"
    },
    "2520": {
      "op": "MSTORE"
    },
    "2521": {
      "op": "PUSH32",
      "value": "0x536967206D7573742062652072656475636564206D6F64756C6F205100000000"
    },
    "2554": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2556": {
      "op": "DUP3"
    },
    "2557": {
      "op": "ADD"
    },
    "2558": {
      "op": "MSTORE"
    },
    "2559": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2561": {
      "op": "ADD"
    },
    "2562": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1ED"
    },
    "2565": {
      "op": "JUMP"
    },
    "2566": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6213,
        6267
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2567": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2569": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2571": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2573": {
      "op": "SHL"
    },
    "2574": {
      "op": "SUB"
    },
    "2575": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6629
      ],
      "op": "DUP3",
      "path": "16",
      "statement": 16
    },
    "2576": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6629
      ],
      "op": "AND",
      "path": "16"
    },
    "2577": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6629
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2578": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6629
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2579": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6629
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2580": {
      "branch": 25,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6629
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2581": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6651
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xA1E"
    },
    "2584": {
      "branch": 25,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6651
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2585": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6651
      ],
      "op": "POP",
      "path": "16"
    },
    "2586": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6650,
        6651
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2588": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6633,
        6647
      ],
      "op": "DUP5",
      "path": "16"
    },
    "2589": {
      "branch": 26,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6633,
        6651
      ],
      "op": "GT",
      "path": "16"
    },
    "2590": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6651
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2591": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6674
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2592": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6674
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2593": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6674
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xA2A"
    },
    "2596": {
      "branch": 26,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6674
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2597": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6674
      ],
      "op": "POP",
      "path": "16"
    },
    "2598": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6673,
        6674
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2600": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6661,
        6670
      ],
      "op": "DUP6",
      "path": "16"
    },
    "2601": {
      "branch": 27,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6661,
        6674
      ],
      "op": "GT",
      "path": "16"
    },
    "2602": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6674
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2603": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6689
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2604": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6689
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2605": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6689
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xA36"
    },
    "2608": {
      "branch": 27,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6689
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2609": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6689
      ],
      "op": "POP",
      "path": "16"
    },
    "2610": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6688,
        6689
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2612": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6678,
        6685
      ],
      "op": "DUP7",
      "path": "16"
    },
    "2613": {
      "branch": 28,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6678,
        6689
      ],
      "op": "GT",
      "path": "16"
    },
    "2614": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6589,
        6689
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2615": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xA7B"
    },
    "2618": {
      "branch": 28,
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2619": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2621": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2622": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2626": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2628": {
      "op": "SHL"
    },
    "2629": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2630": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2631": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2633": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "2635": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2636": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "ADD",
      "path": "16"
    },
    "2637": {
      "op": "MSTORE"
    },
    "2638": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "2640": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2642": {
      "op": "DUP3"
    },
    "2643": {
      "op": "ADD"
    },
    "2644": {
      "op": "MSTORE"
    },
    "2645": {
      "op": "PUSH22",
      "value": "0x139BC81E995C9BC81A5B9C1D5D1CC8185B1B1BDDD959"
    },
    "2668": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "2670": {
      "op": "SHL"
    },
    "2671": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2673": {
      "op": "DUP3"
    },
    "2674": {
      "op": "ADD"
    },
    "2675": {
      "op": "MSTORE"
    },
    "2676": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2678": {
      "op": "ADD"
    },
    "2679": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x1ED"
    },
    "2682": {
      "op": "JUMP"
    },
    "2683": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6581,
        6716
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2684": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2686": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2687": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2688": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "2690": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2691": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2692": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "ADD",
      "path": "16"
    },
    "2693": {
      "op": "DUP8"
    },
    "2694": {
      "op": "SWAP1"
    },
    "2695": {
      "op": "MSTORE"
    },
    "2696": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2698": {
      "op": "DUP7"
    },
    "2699": {
      "op": "SWAP1"
    },
    "2700": {
      "op": "SHL"
    },
    "2701": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2703": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2705": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2707": {
      "op": "SHL"
    },
    "2708": {
      "op": "SUB"
    },
    "2709": {
      "op": "NOT"
    },
    "2710": {
      "op": "AND"
    },
    "2711": {
      "op": "DUP3"
    },
    "2712": {
      "op": "DUP5"
    },
    "2713": {
      "op": "ADD"
    },
    "2714": {
      "op": "MSTORE"
    },
    "2715": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "2717": {
      "op": "DUP3"
    },
    "2718": {
      "op": "ADD"
    },
    "2719": {
      "op": "DUP10"
    },
    "2720": {
      "op": "SWAP1"
    },
    "2721": {
      "op": "MSTORE"
    },
    "2722": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2724": {
      "op": "DUP6"
    },
    "2725": {
      "op": "SWAP1"
    },
    "2726": {
      "op": "SHL"
    },
    "2727": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "2740": {
      "op": "NOT"
    },
    "2741": {
      "op": "AND"
    },
    "2742": {
      "op": "PUSH1",
      "value": "0x61"
    },
    "2744": {
      "op": "DUP4"
    },
    "2745": {
      "op": "ADD"
    },
    "2746": {
      "op": "MSTORE"
    },
    "2747": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "DUP3",
      "path": "16"
    },
    "2748": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2749": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x55"
    },
    "2751": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2752": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "DUP5",
      "path": "16"
    },
    "2753": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "SUB",
      "path": "16"
    },
    "2754": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "ADD",
      "path": "16"
    },
    "2755": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2756": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2757": {
      "op": "PUSH1",
      "value": "0x75"
    },
    "2759": {
      "op": "SWAP1"
    },
    "2760": {
      "op": "SWAP3"
    },
    "2761": {
      "op": "ADD"
    },
    "2762": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2763": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "SWAP3",
      "path": "16"
    },
    "2764": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6867,
        6959
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2765": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6857,
        6960
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2766": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6857,
        6960
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2767": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6857,
        6960
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "2768": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6857,
        6960
      ],
      "op": "ADD",
      "path": "16"
    },
    "2769": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        6857,
        6960
      ],
      "op": "KECCAK256",
      "path": "16"
    },
    "2770": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2772": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1"
    },
    "2774": {
      "op": "PUSH17",
      "value": "0x14551231950B75FC4402DA1732FC9BEBE"
    },
    "2792": {
      "op": "NOT"
    },
    "2793": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7591,
        7600
      ],
      "op": "DUP9",
      "path": "16"
    },
    "2794": {
      "op": "DUP9"
    },
    "2795": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7568,
        7604
      ],
      "op": "MULMOD",
      "path": "16"
    },
    "2796": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7564,
        7604
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB07"
    },
    "2799": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7564,
        7604
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2800": {
      "op": "PUSH17",
      "value": "0x14551231950B75FC4402DA1732FC9BEBE"
    },
    "2818": {
      "op": "NOT"
    },
    "2819": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7564,
        7604
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xE0C"
    },
    "2822": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "jump": "i",
      "offset": [
        7564,
        7604
      ],
      "op": "JUMP",
      "path": "16"
    },
    "2823": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7564,
        7604
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2824": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7773,
        7791
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xFF"
    },
    "2826": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7773,
        7791
      ],
      "op": "DUP8",
      "path": "16"
    },
    "2827": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7773,
        7791
      ],
      "op": "AND",
      "path": "16"
    },
    "2828": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7773,
        7791
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2829": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7772,
        7802
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB17"
    },
    "2832": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7772,
        7802
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2833": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7800,
        7802
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1C"
    },
    "2835": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7772,
        7802
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB1A"
    },
    "2838": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7772,
        7802
      ],
      "op": "JUMP",
      "path": "16"
    },
    "2839": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7772,
        7802
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2840": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7795,
        7797
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x1B"
    },
    "2842": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7772,
        7802
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2843": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7818,
        7832
      ],
      "op": "DUP9",
      "path": "16"
    },
    "2844": {
      "op": "PUSH17",
      "value": "0x14551231950B75FC4402DA1732FC9BEBE"
    },
    "2862": {
      "op": "NOT"
    },
    "2863": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7870,
        7884
      ],
      "op": "DUP11",
      "path": "16"
    },
    "2864": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7856,
        7868
      ],
      "op": "DUP8",
      "path": "16"
    },
    "2865": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7849,
        7888
      ],
      "op": "MULMOD",
      "path": "16"
    },
    "2866": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2868": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2869": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2870": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7841,
        7889
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2872": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2873": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2874": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "2876": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2877": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "ADD",
      "path": "16"
    },
    "2878": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2879": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP4",
      "path": "16"
    },
    "2880": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "2881": {
      "op": "SWAP6"
    },
    "2882": {
      "op": "SWAP1"
    },
    "2883": {
      "op": "SWAP6"
    },
    "2884": {
      "op": "MSTORE"
    },
    "2885": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2887": {
      "op": "SWAP1"
    },
    "2888": {
      "op": "SWAP4"
    },
    "2889": {
      "op": "AND"
    },
    "2890": {
      "op": "SWAP3"
    },
    "2891": {
      "op": "DUP5"
    },
    "2892": {
      "op": "ADD"
    },
    "2893": {
      "op": "SWAP3"
    },
    "2894": {
      "op": "SWAP1"
    },
    "2895": {
      "op": "SWAP3"
    },
    "2896": {
      "op": "MSTORE"
    },
    "2897": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2899": {
      "op": "DUP4"
    },
    "2900": {
      "op": "ADD"
    },
    "2901": {
      "op": "MSTORE"
    },
    "2902": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2904": {
      "op": "DUP3"
    },
    "2905": {
      "op": "ADD"
    },
    "2906": {
      "op": "MSTORE"
    },
    "2907": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2909": {
      "op": "ADD"
    },
    "2910": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "2912": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2914": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2915": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x20"
    },
    "2917": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2918": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "SUB",
      "path": "16"
    },
    "2919": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2920": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2921": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP5",
      "path": "16"
    },
    "2922": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "SUB",
      "path": "16"
    },
    "2923": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "SWAP1",
      "path": "16"
    },
    "2924": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP6",
      "path": "16"
    },
    "2925": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "GAS",
      "path": "16"
    },
    "2926": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "STATICCALL",
      "path": "16"
    },
    "2927": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2928": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2929": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "2930": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xB7F"
    },
    "2933": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "2934": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "2935": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2937": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "DUP1",
      "path": "16"
    },
    "2938": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "RETURNDATACOPY",
      "path": "16"
    },
    "2939": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "RETURNDATASIZE",
      "path": "16"
    },
    "2940": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "2942": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "REVERT",
      "path": "16"
    },
    "2943": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "2944": {
      "op": "POP"
    },
    "2945": {
      "op": "POP"
    },
    "2946": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "2948": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2949": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2951": {
      "op": "NOT"
    },
    "2952": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "ADD",
      "path": "16"
    },
    "2953": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7471,
        7890
      ],
      "op": "MLOAD",
      "path": "16"
    },
    "2954": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2956": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2958": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2960": {
      "op": "SHL"
    },
    "2961": {
      "op": "SUB"
    },
    "2962": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7903,
        7949
      ],
      "op": "DUP7",
      "path": "16",
      "statement": 17
    },
    "2963": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7903,
        7949
      ],
      "op": "DUP2",
      "path": "16"
    },
    "2964": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7903,
        7949
      ],
      "op": "AND",
      "path": "16"
    },
    "2965": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7903,
        7949
      ],
      "op": "SWAP2",
      "path": "16"
    },
    "2966": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7903,
        7949
      ],
      "op": "AND",
      "path": "16"
    },
    "2967": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7903,
        7949
      ],
      "op": "EQ",
      "path": "16"
    },
    "2968": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        7903,
        7949
      ],
      "op": "SWAP4",
      "path": "16"
    },
    "2969": {
      "op": "POP"
    },
    "2970": {
      "op": "POP"
    },
    "2971": {
      "op": "POP"
    },
    "2972": {
      "op": "POP"
    },
    "2973": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        5863,
        7954
      ],
      "op": "SWAP6",
      "path": "16"
    },
    "2974": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        5863,
        7954
      ],
      "op": "SWAP5",
      "path": "16"
    },
    "2975": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        5863,
        7954
      ],
      "op": "POP",
      "path": "16"
    },
    "2976": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        5863,
        7954
      ],
      "op": "POP",
      "path": "16"
    },
    "2977": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        5863,
        7954
      ],
      "op": "POP",
      "path": "16"
    },
    "2978": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        5863,
        7954
      ],
      "op": "POP",
      "path": "16"
    },
    "2979": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "offset": [
        5863,
        7954
      ],
      "op": "POP",
      "path": "16"
    },
    "2980": {
      "fn": "SchnorrSECP256K1.verifySignature",
      "jump": "o",
      "offset": [
        5863,
        7954
      ],
      "op": "JUMP",
      "path": "16"
    },
    "2981": {
      "op": "JUMPDEST"
    },
    "2982": {
      "op": "DUP1"
    },
    "2983": {
      "op": "CALLDATALOAD"
    },
    "2984": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "2986": {
      "op": "DUP2"
    },
    "2987": {
      "op": "LT"
    },
    "2988": {
      "op": "PUSH2",
      "value": "0xBB4"
    },
    "2991": {
      "op": "JUMPI"
    },
    "2992": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2994": {
      "op": "DUP1"
    },
    "2995": {
      "op": "REVERT"
    },
    "2996": {
      "op": "JUMPDEST"
    },
    "2997": {
      "op": "SWAP2"
    },
    "2998": {
      "op": "SWAP1"
    },
    "2999": {
      "op": "POP"
    },
    "3000": {
      "jump": "o",
      "op": "JUMP"
    },
    "3001": {
      "op": "JUMPDEST"
    },
    "3002": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3004": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3006": {
      "op": "DUP3"
    },
    "3007": {
      "op": "DUP5"
    },
    "3008": {
      "op": "SUB"
    },
    "3009": {
      "op": "SLT"
    },
    "3010": {
      "op": "ISZERO"
    },
    "3011": {
      "op": "PUSH2",
      "value": "0xBCA"
    },
    "3014": {
      "op": "JUMPI"
    },
    "3015": {
      "op": "DUP1"
    },
    "3016": {
      "op": "DUP2"
    },
    "3017": {
      "op": "REVERT"
    },
    "3018": {
      "op": "JUMPDEST"
    },
    "3019": {
      "op": "POP"
    },
    "3020": {
      "op": "SWAP2"
    },
    "3021": {
      "op": "SWAP1"
    },
    "3022": {
      "op": "POP"
    },
    "3023": {
      "jump": "o",
      "op": "JUMP"
    },
    "3024": {
      "op": "JUMPDEST"
    },
    "3025": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3027": {
      "op": "DUP1"
    },
    "3028": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3030": {
      "op": "DUP4"
    },
    "3031": {
      "op": "DUP6"
    },
    "3032": {
      "op": "SUB"
    },
    "3033": {
      "op": "SLT"
    },
    "3034": {
      "op": "ISZERO"
    },
    "3035": {
      "op": "PUSH2",
      "value": "0xBE2"
    },
    "3038": {
      "op": "JUMPI"
    },
    "3039": {
      "op": "DUP2"
    },
    "3040": {
      "op": "DUP3"
    },
    "3041": {
      "op": "REVERT"
    },
    "3042": {
      "op": "JUMPDEST"
    },
    "3043": {
      "op": "PUSH2",
      "value": "0xBEB"
    },
    "3046": {
      "op": "DUP4"
    },
    "3047": {
      "op": "PUSH2",
      "value": "0xBA5"
    },
    "3050": {
      "jump": "i",
      "op": "JUMP"
    },
    "3051": {
      "op": "JUMPDEST"
    },
    "3052": {
      "op": "SWAP5"
    },
    "3053": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3055": {
      "op": "SWAP4"
    },
    "3056": {
      "op": "SWAP1"
    },
    "3057": {
      "op": "SWAP4"
    },
    "3058": {
      "op": "ADD"
    },
    "3059": {
      "op": "CALLDATALOAD"
    },
    "3060": {
      "op": "SWAP4"
    },
    "3061": {
      "op": "POP"
    },
    "3062": {
      "op": "POP"
    },
    "3063": {
      "op": "POP"
    },
    "3064": {
      "jump": "o",
      "op": "JUMP"
    },
    "3065": {
      "op": "JUMPDEST"
    },
    "3066": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3068": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3070": {
      "op": "DUP3"
    },
    "3071": {
      "op": "DUP5"
    },
    "3072": {
      "op": "SUB"
    },
    "3073": {
      "op": "SLT"
    },
    "3074": {
      "op": "ISZERO"
    },
    "3075": {
      "op": "PUSH2",
      "value": "0xC0A"
    },
    "3078": {
      "op": "JUMPI"
    },
    "3079": {
      "op": "DUP1"
    },
    "3080": {
      "op": "DUP2"
    },
    "3081": {
      "op": "REVERT"
    },
    "3082": {
      "op": "JUMPDEST"
    },
    "3083": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3085": {
      "op": "MLOAD"
    },
    "3086": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3088": {
      "op": "DUP2"
    },
    "3089": {
      "op": "ADD"
    },
    "3090": {
      "op": "DUP2"
    },
    "3091": {
      "op": "DUP2"
    },
    "3092": {
      "op": "LT"
    },
    "3093": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3102": {
      "op": "DUP3"
    },
    "3103": {
      "op": "GT"
    },
    "3104": {
      "op": "OR"
    },
    "3105": {
      "op": "ISZERO"
    },
    "3106": {
      "op": "PUSH2",
      "value": "0xC39"
    },
    "3109": {
      "op": "JUMPI"
    },
    "3110": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3115": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3117": {
      "op": "SHL"
    },
    "3118": {
      "op": "DUP4"
    },
    "3119": {
      "op": "MSTORE"
    },
    "3120": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3122": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3124": {
      "op": "MSTORE"
    },
    "3125": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3127": {
      "op": "DUP4"
    },
    "3128": {
      "op": "REVERT"
    },
    "3129": {
      "op": "JUMPDEST"
    },
    "3130": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3132": {
      "op": "MSTORE"
    },
    "3133": {
      "op": "DUP3"
    },
    "3134": {
      "op": "CALLDATALOAD"
    },
    "3135": {
      "op": "DUP2"
    },
    "3136": {
      "op": "MSTORE"
    },
    "3137": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3139": {
      "op": "DUP4"
    },
    "3140": {
      "op": "ADD"
    },
    "3141": {
      "op": "CALLDATALOAD"
    },
    "3142": {
      "op": "PUSH2",
      "value": "0xC4E"
    },
    "3145": {
      "op": "DUP2"
    },
    "3146": {
      "op": "PUSH2",
      "value": "0xEAA"
    },
    "3149": {
      "jump": "i",
      "op": "JUMP"
    },
    "3150": {
      "op": "JUMPDEST"
    },
    "3151": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3153": {
      "op": "DUP3"
    },
    "3154": {
      "op": "ADD"
    },
    "3155": {
      "op": "MSTORE"
    },
    "3156": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3158": {
      "op": "DUP4"
    },
    "3159": {
      "op": "ADD"
    },
    "3160": {
      "op": "CALLDATALOAD"
    },
    "3161": {
      "op": "PUSH2",
      "value": "0xC61"
    },
    "3164": {
      "op": "DUP2"
    },
    "3165": {
      "op": "PUSH2",
      "value": "0xE92"
    },
    "3168": {
      "jump": "i",
      "op": "JUMP"
    },
    "3169": {
      "op": "JUMPDEST"
    },
    "3170": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3172": {
      "op": "DUP3"
    },
    "3173": {
      "op": "ADD"
    },
    "3174": {
      "op": "MSTORE"
    },
    "3175": {
      "op": "SWAP4"
    },
    "3176": {
      "op": "SWAP3"
    },
    "3177": {
      "op": "POP"
    },
    "3178": {
      "op": "POP"
    },
    "3179": {
      "op": "POP"
    },
    "3180": {
      "jump": "o",
      "op": "JUMP"
    },
    "3181": {
      "op": "JUMPDEST"
    },
    "3182": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3184": {
      "op": "DUP1"
    },
    "3185": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3187": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3189": {
      "op": "DUP5"
    },
    "3190": {
      "op": "DUP7"
    },
    "3191": {
      "op": "SUB"
    },
    "3192": {
      "op": "SLT"
    },
    "3193": {
      "op": "ISZERO"
    },
    "3194": {
      "op": "PUSH2",
      "value": "0xC81"
    },
    "3197": {
      "op": "JUMPI"
    },
    "3198": {
      "op": "DUP1"
    },
    "3199": {
      "op": "DUP2"
    },
    "3200": {
      "op": "REVERT"
    },
    "3201": {
      "op": "JUMPDEST"
    },
    "3202": {
      "op": "PUSH2",
      "value": "0xC8B"
    },
    "3205": {
      "op": "DUP6"
    },
    "3206": {
      "op": "DUP6"
    },
    "3207": {
      "op": "PUSH2",
      "value": "0xBB9"
    },
    "3210": {
      "jump": "i",
      "op": "JUMP"
    },
    "3211": {
      "op": "JUMPDEST"
    },
    "3212": {
      "op": "SWAP3"
    },
    "3213": {
      "op": "POP"
    },
    "3214": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3216": {
      "op": "DUP5"
    },
    "3217": {
      "op": "ADD"
    },
    "3218": {
      "op": "CALLDATALOAD"
    },
    "3219": {
      "op": "SWAP2"
    },
    "3220": {
      "op": "POP"
    },
    "3221": {
      "op": "PUSH2",
      "value": "0xCA0"
    },
    "3224": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3226": {
      "op": "DUP6"
    },
    "3227": {
      "op": "ADD"
    },
    "3228": {
      "op": "PUSH2",
      "value": "0xBA5"
    },
    "3231": {
      "jump": "i",
      "op": "JUMP"
    },
    "3232": {
      "op": "JUMPDEST"
    },
    "3233": {
      "op": "SWAP1"
    },
    "3234": {
      "op": "POP"
    },
    "3235": {
      "op": "SWAP3"
    },
    "3236": {
      "op": "POP"
    },
    "3237": {
      "op": "SWAP3"
    },
    "3238": {
      "op": "POP"
    },
    "3239": {
      "op": "SWAP3"
    },
    "3240": {
      "jump": "o",
      "op": "JUMP"
    },
    "3241": {
      "op": "JUMPDEST"
    },
    "3242": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3244": {
      "op": "DUP1"
    },
    "3245": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3247": {
      "op": "DUP4"
    },
    "3248": {
      "op": "DUP6"
    },
    "3249": {
      "op": "SUB"
    },
    "3250": {
      "op": "SLT"
    },
    "3251": {
      "op": "ISZERO"
    },
    "3252": {
      "op": "PUSH2",
      "value": "0xCBB"
    },
    "3255": {
      "op": "JUMPI"
    },
    "3256": {
      "op": "DUP2"
    },
    "3257": {
      "op": "DUP3"
    },
    "3258": {
      "op": "REVERT"
    },
    "3259": {
      "op": "JUMPDEST"
    },
    "3260": {
      "op": "PUSH2",
      "value": "0xCC5"
    },
    "3263": {
      "op": "DUP5"
    },
    "3264": {
      "op": "DUP5"
    },
    "3265": {
      "op": "PUSH2",
      "value": "0xBB9"
    },
    "3268": {
      "jump": "i",
      "op": "JUMP"
    },
    "3269": {
      "op": "JUMPDEST"
    },
    "3270": {
      "op": "SWAP2"
    },
    "3271": {
      "op": "POP"
    },
    "3272": {
      "op": "PUSH2",
      "value": "0xCD4"
    },
    "3275": {
      "op": "DUP5"
    },
    "3276": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3278": {
      "op": "DUP6"
    },
    "3279": {
      "op": "ADD"
    },
    "3280": {
      "op": "PUSH2",
      "value": "0xBB9"
    },
    "3283": {
      "jump": "i",
      "op": "JUMP"
    },
    "3284": {
      "op": "JUMPDEST"
    },
    "3285": {
      "op": "SWAP1"
    },
    "3286": {
      "op": "POP"
    },
    "3287": {
      "op": "SWAP3"
    },
    "3288": {
      "op": "POP"
    },
    "3289": {
      "op": "SWAP3"
    },
    "3290": {
      "op": "SWAP1"
    },
    "3291": {
      "op": "POP"
    },
    "3292": {
      "jump": "o",
      "op": "JUMP"
    },
    "3293": {
      "op": "JUMPDEST"
    },
    "3294": {
      "op": "DUP1"
    },
    "3295": {
      "op": "CALLDATALOAD"
    },
    "3296": {
      "op": "DUP3"
    },
    "3297": {
      "op": "MSTORE"
    },
    "3298": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3300": {
      "op": "DUP2"
    },
    "3301": {
      "op": "ADD"
    },
    "3302": {
      "op": "CALLDATALOAD"
    },
    "3303": {
      "op": "PUSH2",
      "value": "0xCEF"
    },
    "3306": {
      "op": "DUP2"
    },
    "3307": {
      "op": "PUSH2",
      "value": "0xEAA"
    },
    "3310": {
      "jump": "i",
      "op": "JUMP"
    },
    "3311": {
      "op": "JUMPDEST"
    },
    "3312": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3314": {
      "op": "AND"
    },
    "3315": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3317": {
      "op": "DUP4"
    },
    "3318": {
      "op": "ADD"
    },
    "3319": {
      "op": "MSTORE"
    },
    "3320": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3322": {
      "op": "DUP2"
    },
    "3323": {
      "op": "ADD"
    },
    "3324": {
      "op": "CALLDATALOAD"
    },
    "3325": {
      "op": "PUSH2",
      "value": "0xD05"
    },
    "3328": {
      "op": "DUP2"
    },
    "3329": {
      "op": "PUSH2",
      "value": "0xE92"
    },
    "3332": {
      "jump": "i",
      "op": "JUMP"
    },
    "3333": {
      "op": "JUMPDEST"
    },
    "3334": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3336": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3338": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3340": {
      "op": "SHL"
    },
    "3341": {
      "op": "SUB"
    },
    "3342": {
      "op": "AND"
    },
    "3343": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3345": {
      "op": "SWAP3"
    },
    "3346": {
      "op": "SWAP1"
    },
    "3347": {
      "op": "SWAP3"
    },
    "3348": {
      "op": "ADD"
    },
    "3349": {
      "op": "SWAP2"
    },
    "3350": {
      "op": "SWAP1"
    },
    "3351": {
      "op": "SWAP2"
    },
    "3352": {
      "op": "MSTORE"
    },
    "3353": {
      "op": "POP"
    },
    "3354": {
      "jump": "o",
      "op": "JUMP"
    },
    "3355": {
      "op": "JUMPDEST"
    },
    "3356": {
      "op": "DUP4"
    },
    "3357": {
      "op": "ISZERO"
    },
    "3358": {
      "op": "ISZERO"
    },
    "3359": {
      "op": "DUP2"
    },
    "3360": {
      "op": "MSTORE"
    },
    "3361": {
      "op": "DUP3"
    },
    "3362": {
      "op": "SLOAD"
    },
    "3363": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3365": {
      "op": "DUP3"
    },
    "3366": {
      "op": "ADD"
    },
    "3367": {
      "op": "MSTORE"
    },
    "3368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3370": {
      "op": "DUP4"
    },
    "3371": {
      "op": "ADD"
    },
    "3372": {
      "op": "SLOAD"
    },
    "3373": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3375": {
      "op": "DUP2"
    },
    "3376": {
      "op": "AND"
    },
    "3377": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3379": {
      "op": "DUP4"
    },
    "3380": {
      "op": "ADD"
    },
    "3381": {
      "op": "MSTORE"
    },
    "3382": {
      "op": "PUSH1",
      "value": "0x8"
    },
    "3384": {
      "op": "SHR"
    },
    "3385": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3389": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3391": {
      "op": "SHL"
    },
    "3392": {
      "op": "SUB"
    },
    "3393": {
      "op": "AND"
    },
    "3394": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3396": {
      "op": "DUP3"
    },
    "3397": {
      "op": "ADD"
    },
    "3398": {
      "op": "MSTORE"
    },
    "3399": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3401": {
      "op": "DUP2"
    },
    "3402": {
      "op": "ADD"
    },
    "3403": {
      "op": "PUSH2",
      "value": "0xD57"
    },
    "3406": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3408": {
      "op": "DUP4"
    },
    "3409": {
      "op": "ADD"
    },
    "3410": {
      "op": "DUP5"
    },
    "3411": {
      "op": "PUSH2",
      "value": "0xCDD"
    },
    "3414": {
      "jump": "i",
      "op": "JUMP"
    },
    "3415": {
      "op": "JUMPDEST"
    },
    "3416": {
      "op": "SWAP5"
    },
    "3417": {
      "op": "SWAP4"
    },
    "3418": {
      "op": "POP"
    },
    "3419": {
      "op": "POP"
    },
    "3420": {
      "op": "POP"
    },
    "3421": {
      "op": "POP"
    },
    "3422": {
      "jump": "o",
      "op": "JUMP"
    },
    "3423": {
      "op": "JUMPDEST"
    },
    "3424": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3426": {
      "op": "DUP1"
    },
    "3427": {
      "op": "DUP3"
    },
    "3428": {
      "op": "MSTORE"
    },
    "3429": {
      "op": "DUP2"
    },
    "3430": {
      "op": "DUP2"
    },
    "3431": {
      "op": "ADD"
    },
    "3432": {
      "op": "MSTORE"
    },
    "3433": {
      "op": "PUSH32",
      "value": "0x5368617265643A206E6F6E636554696D6573474164647220697320656D707479"
    },
    "3466": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3468": {
      "op": "DUP3"
    },
    "3469": {
      "op": "ADD"
    },
    "3470": {
      "op": "MSTORE"
    },
    "3471": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3473": {
      "op": "ADD"
    },
    "3474": {
      "op": "SWAP1"
    },
    "3475": {
      "jump": "o",
      "op": "JUMP"
    },
    "3476": {
      "op": "JUMPDEST"
    },
    "3477": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3479": {
      "op": "DUP1"
    },
    "3480": {
      "op": "DUP3"
    },
    "3481": {
      "op": "MSTORE"
    },
    "3482": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "3484": {
      "op": "SWAP1"
    },
    "3485": {
      "op": "DUP3"
    },
    "3486": {
      "op": "ADD"
    },
    "3487": {
      "op": "MSTORE"
    },
    "3488": {
      "op": "PUSH32",
      "value": "0x5368617265643A207075624B65795820697320656D7074790000000000000000"
    },
    "3521": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3523": {
      "op": "DUP3"
    },
    "3524": {
      "op": "ADD"
    },
    "3525": {
      "op": "MSTORE"
    },
    "3526": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3528": {
      "op": "ADD"
    },
    "3529": {
      "op": "SWAP1"
    },
    "3530": {
      "jump": "o",
      "op": "JUMP"
    },
    "3531": {
      "op": "JUMPDEST"
    },
    "3532": {
      "op": "DUP3"
    },
    "3533": {
      "op": "MLOAD"
    },
    "3534": {
      "op": "DUP2"
    },
    "3535": {
      "op": "MSTORE"
    },
    "3536": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3538": {
      "op": "DUP1"
    },
    "3539": {
      "op": "DUP5"
    },
    "3540": {
      "op": "ADD"
    },
    "3541": {
      "op": "MLOAD"
    },
    "3542": {
      "op": "SWAP1"
    },
    "3543": {
      "op": "DUP3"
    },
    "3544": {
      "op": "ADD"
    },
    "3545": {
      "op": "MSTORE"
    },
    "3546": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3548": {
      "op": "DUP1"
    },
    "3549": {
      "op": "DUP5"
    },
    "3550": {
      "op": "ADD"
    },
    "3551": {
      "op": "MLOAD"
    },
    "3552": {
      "op": "SWAP1"
    },
    "3553": {
      "op": "DUP3"
    },
    "3554": {
      "op": "ADD"
    },
    "3555": {
      "op": "MSTORE"
    },
    "3556": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3558": {
      "op": "DUP2"
    },
    "3559": {
      "op": "ADD"
    },
    "3560": {
      "op": "PUSH2",
      "value": "0x734"
    },
    "3563": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3565": {
      "op": "DUP4"
    },
    "3566": {
      "op": "ADD"
    },
    "3567": {
      "op": "DUP5"
    },
    "3568": {
      "op": "PUSH2",
      "value": "0xCDD"
    },
    "3571": {
      "jump": "i",
      "op": "JUMP"
    },
    "3572": {
      "op": "JUMPDEST"
    },
    "3573": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3575": {
      "op": "DUP3"
    },
    "3576": {
      "op": "NOT"
    },
    "3577": {
      "op": "DUP3"
    },
    "3578": {
      "op": "GT"
    },
    "3579": {
      "op": "ISZERO"
    },
    "3580": {
      "op": "PUSH2",
      "value": "0xE07"
    },
    "3583": {
      "op": "JUMPI"
    },
    "3584": {
      "op": "PUSH2",
      "value": "0xE07"
    },
    "3587": {
      "op": "PUSH2",
      "value": "0xE23"
    },
    "3590": {
      "jump": "i",
      "op": "JUMP"
    },
    "3591": {
      "op": "JUMPDEST"
    },
    "3592": {
      "op": "POP"
    },
    "3593": {
      "op": "ADD"
    },
    "3594": {
      "op": "SWAP1"
    },
    "3595": {
      "jump": "o",
      "op": "JUMP"
    },
    "3596": {
      "op": "JUMPDEST"
    },
    "3597": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3599": {
      "op": "DUP3"
    },
    "3600": {
      "op": "DUP3"
    },
    "3601": {
      "op": "LT"
    },
    "3602": {
      "op": "ISZERO"
    },
    "3603": {
      "op": "PUSH2",
      "value": "0xE1E"
    },
    "3606": {
      "op": "JUMPI"
    },
    "3607": {
      "op": "PUSH2",
      "value": "0xE1E"
    },
    "3610": {
      "op": "PUSH2",
      "value": "0xE23"
    },
    "3613": {
      "jump": "i",
      "op": "JUMP"
    },
    "3614": {
      "op": "JUMPDEST"
    },
    "3615": {
      "op": "POP"
    },
    "3616": {
      "op": "SUB"
    },
    "3617": {
      "op": "SWAP1"
    },
    "3618": {
      "jump": "o",
      "op": "JUMP"
    },
    "3619": {
      "op": "JUMPDEST"
    },
    "3620": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3625": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3627": {
      "op": "SHL"
    },
    "3628": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3630": {
      "op": "MSTORE"
    },
    "3631": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3633": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3635": {
      "op": "MSTORE"
    },
    "3636": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3638": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3640": {
      "op": "REVERT"
    },
    "3641": {
      "op": "JUMPDEST"
    },
    "3642": {
      "op": "DUP2"
    },
    "3643": {
      "op": "CALLDATALOAD"
    },
    "3644": {
      "op": "DUP2"
    },
    "3645": {
      "op": "SSTORE"
    },
    "3646": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3648": {
      "op": "DUP2"
    },
    "3649": {
      "op": "ADD"
    },
    "3650": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3652": {
      "op": "DUP4"
    },
    "3653": {
      "op": "ADD"
    },
    "3654": {
      "op": "CALLDATALOAD"
    },
    "3655": {
      "op": "PUSH2",
      "value": "0xE4F"
    },
    "3658": {
      "op": "DUP2"
    },
    "3659": {
      "op": "PUSH2",
      "value": "0xEAA"
    },
    "3662": {
      "jump": "i",
      "op": "JUMP"
    },
    "3663": {
      "op": "JUMPDEST"
    },
    "3664": {
      "op": "DUP2"
    },
    "3665": {
      "op": "SLOAD"
    },
    "3666": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3668": {
      "op": "NOT"
    },
    "3669": {
      "op": "AND"
    },
    "3670": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3672": {
      "op": "SWAP2"
    },
    "3673": {
      "op": "SWAP1"
    },
    "3674": {
      "op": "SWAP2"
    },
    "3675": {
      "op": "AND"
    },
    "3676": {
      "op": "OR"
    },
    "3677": {
      "op": "DUP1"
    },
    "3678": {
      "op": "DUP3"
    },
    "3679": {
      "op": "SSTORE"
    },
    "3680": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3682": {
      "op": "DUP5"
    },
    "3683": {
      "op": "ADD"
    },
    "3684": {
      "op": "CALLDATALOAD"
    },
    "3685": {
      "op": "PUSH2",
      "value": "0xE6D"
    },
    "3688": {
      "op": "DUP2"
    },
    "3689": {
      "op": "PUSH2",
      "value": "0xE92"
    },
    "3692": {
      "jump": "i",
      "op": "JUMP"
    },
    "3693": {
      "op": "JUMPDEST"
    },
    "3694": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3697": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3699": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "3701": {
      "op": "SHL"
    },
    "3702": {
      "op": "SUB"
    },
    "3703": {
      "op": "NOT"
    },
    "3704": {
      "op": "SWAP2"
    },
    "3705": {
      "op": "SWAP1"
    },
    "3706": {
      "op": "SWAP2"
    },
    "3707": {
      "op": "AND"
    },
    "3708": {
      "op": "PUSH1",
      "value": "0x8"
    },
    "3710": {
      "op": "SWAP2"
    },
    "3711": {
      "op": "SWAP1"
    },
    "3712": {
      "op": "SWAP2"
    },
    "3713": {
      "op": "SHL"
    },
    "3714": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3717": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3719": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "3721": {
      "op": "SHL"
    },
    "3722": {
      "op": "SUB"
    },
    "3723": {
      "op": "AND"
    },
    "3724": {
      "op": "OR"
    },
    "3725": {
      "op": "SWAP1"
    },
    "3726": {
      "op": "SSTORE"
    },
    "3727": {
      "op": "POP"
    },
    "3728": {
      "op": "POP"
    },
    "3729": {
      "jump": "o",
      "op": "JUMP"
    },
    "3730": {
      "op": "JUMPDEST"
    },
    "3731": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3733": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3735": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3737": {
      "op": "SHL"
    },
    "3738": {
      "op": "SUB"
    },
    "3739": {
      "op": "DUP2"
    },
    "3740": {
      "op": "AND"
    },
    "3741": {
      "op": "DUP2"
    },
    "3742": {
      "op": "EQ"
    },
    "3743": {
      "op": "PUSH2",
      "value": "0xEA7"
    },
    "3746": {
      "op": "JUMPI"
    },
    "3747": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3749": {
      "op": "DUP1"
    },
    "3750": {
      "op": "REVERT"
    },
    "3751": {
      "op": "JUMPDEST"
    },
    "3752": {
      "op": "POP"
    },
    "3753": {
      "jump": "o",
      "op": "JUMP"
    },
    "3754": {
      "op": "JUMPDEST"
    },
    "3755": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3757": {
      "op": "DUP2"
    },
    "3758": {
      "op": "AND"
    },
    "3759": {
      "op": "DUP2"
    },
    "3760": {
      "op": "EQ"
    },
    "3761": {
      "op": "PUSH2",
      "value": "0xEA7"
    },
    "3764": {
      "op": "JUMPI"
    },
    "3765": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3767": {
      "op": "DUP1"
    },
    "3768": {
      "op": "REVERT"
    }
  },
  "sha1": "0bfde5b6845a1fbbeaa141fc2f0885119004a9e2",
  "source": "pragma solidity ^0.8.0;\n\n\nimport \"./interfaces/IKeyManager.sol\";\nimport \"./abstract/SchnorrSECP256K1.sol\";\nimport \"./abstract/Shared.sol\";\n\n\n/**\n* @title    KeyManager contract\n* @notice   Holds the aggregate and governance keys, functions to update them, \n*           and isValidSig so other contracts can verify signatures and updates _lastValidateTime\n* @author   Quantaf1re (James Key)\n*/\ncontract KeyManager is SchnorrSECP256K1, Shared, IKeyManager {\n\n    uint constant private _AGG_KEY_TIMEOUT = 2 days;\n\n    /// @dev    Used to get the key with the keyID. This prevents isValidSig being called\n    ///         by keys that aren't the aggKey or govKey, which prevents outsiders being\n    ///         able to change _lastValidateTime\n    mapping(KeyID => Key) private _keyIDToKey;\n    /// @dev    The last time that a sig was verified (used for a dead man's switch)\n    uint private _lastValidateTime;\n    mapping(KeyID => mapping(uint => bool)) private _keyToNoncesUsed;\n\n\n    event KeyChange(\n        bool signedByAggKey,\n        Key oldKey,\n        Key newKey\n    );\n\n\n    constructor(Key memory aggKey, Key memory govKey) {\n        _keyIDToKey[KeyID.Agg] = aggKey;\n        _keyIDToKey[KeyID.Gov] = govKey;\n        _lastValidateTime = block.timestamp;\n    }\n\n\n    //////////////////////////////////////////////////////////////\n    //                                                          //\n    //                  State-changing functions                //\n    //                                                          //\n    //////////////////////////////////////////////////////////////\n\n    /**\n     * @notice  Checks the validity of a signature and msgHash, then updates _lastValidateTime\n     * @dev     It would be nice to split this up, but these checks\n     *          need to be made atomicly always. This needs to be available\n     *          in this contract and in the Vault etc\n     * @param sigData   The keccak256 hash over the msg (uint) (here that's normally\n     *                  a hash over the calldata to the function with an empty sigData) and\n     *                  sig over that hash (uint) from the key input\n     * @param contractMsgHash   The hash of the thing being signed but generated by the contract\n     *                  to check it against the hash in sigData (bytes32) (here that's normally\n     *                  a hash over the calldata to the function with an empty sigData)\n     * @param keyID     The KeyID that indicates which key to verify the sig with. Ensures that\n     *                  only 'registered' keys can be used to successfully call this fcn and change\n     *                  _lastValidateTime\n     * @return          Bool used by caller to be absolutely sure that the function hasn't reverted\n     */\n    function isValidSig(\n        SigData calldata sigData,\n        bytes32 contractMsgHash,\n        KeyID keyID\n    ) public override returns (bool) {\n        Key memory key = _keyIDToKey[keyID];\n        require(sigData.msgHash == uint(contractMsgHash), \"KeyManager: invalid msgHash\");\n        require(\n            verifySignature(\n                sigData.msgHash,\n                sigData.sig,\n                key.pubKeyX,\n                key.pubKeyYParity,\n                key.nonceTimesGAddr\n            ),\n            \"KeyManager: Sig invalid\"\n        );\n        require(!_keyToNoncesUsed[keyID][sigData.nonce], \"KeyManager: nonce already used\");\n        \n        _lastValidateTime = block.timestamp;\n        _keyToNoncesUsed[keyID][sigData.nonce] = true;\n        \n        return true;\n    }\n\n    /**\n     * @notice  Set a new aggregate key. Requires a signature from the current aggregate key\n     * @param sigData   The keccak256 hash over the msg (uint) (which is the calldata\n     *                  for this function with empty msgHash and sig) and sig over that hash\n     *                  from the current aggregate key (uint)\n     * @param newKey    The new aggregate key to be set. The x component of the pubkey (uint),\n     *                  the parity of the y component (uint8), and the nonce times G (address)\n     */\n    function setAggKeyWithAggKey(\n        SigData calldata sigData,\n        Key calldata newKey\n    ) external override nzKey(newKey) validSig(\n        sigData,\n        keccak256(abi.encodeWithSelector(\n            this.setAggKeyWithAggKey.selector,\n            SigData(0, 0, sigData.nonce),\n            newKey\n        )),\n        KeyID.Agg\n    ) {\n        emit KeyChange(true, _keyIDToKey[KeyID.Agg], newKey);\n        _keyIDToKey[KeyID.Agg] = newKey;\n    }\n\n    /**\n     * @notice  Set a new aggregate key. Requires a signature from the current governance key\n     * @param sigData   The keccak256 hash over the msg (uint) (which is the calldata\n     *                  for this function with empty msgHash and sig) and sig over that hash\n     *                  from the current governance key (uint)\n     * @param newKey    The new aggregate key to be set. The x component of the pubkey (uint),\n     *                  the parity of the y component (uint8), and the nonce times G (address)\n     */\n    function setAggKeyWithGovKey(\n        SigData calldata sigData,\n        Key calldata newKey\n    ) external override nzKey(newKey) validTime validSig(\n        sigData,\n        keccak256(abi.encodeWithSelector(\n            this.setAggKeyWithGovKey.selector,\n            SigData(0, 0, sigData.nonce),\n            newKey\n        )),\n        KeyID.Gov\n    ) {\n        emit KeyChange(false, _keyIDToKey[KeyID.Agg], newKey);\n        _keyIDToKey[KeyID.Agg] = newKey;\n    }\n\n    /**\n     * @notice  Set a new governance key. Requires a signature from the current governance key\n     * @param sigData   The keccak256 hash over the msg (uint) (which is the calldata\n     *                  for this function with empty msgHash and sig) and sig over that hash\n     *                  from the current governance key (uint)\n     * @param newKey    The new governance key to be set. The x component of the pubkey (uint),\n     *                  the parity of the y component (uint8), and the nonce times G (address)\n     */\n    function setGovKeyWithGovKey(\n        SigData calldata sigData,\n        Key calldata newKey\n    ) external override nzKey(newKey) validSig(\n        sigData,\n        keccak256(abi.encodeWithSelector(\n            this.setGovKeyWithGovKey.selector,\n            SigData(0, 0, sigData.nonce),\n            newKey\n        )),\n        KeyID.Gov\n    ) {\n        emit KeyChange(false, _keyIDToKey[KeyID.Gov], newKey);\n        _keyIDToKey[KeyID.Gov] = newKey;\n    }\n\n\n    //////////////////////////////////////////////////////////////\n    //                                                          //\n    //                  Non-state-changing functions            //\n    //                                                          //\n    //////////////////////////////////////////////////////////////\n\n\n    /**\n     * @notice  Get the current aggregate key\n     * @return  The Key struct for the aggregate key\n     */\n    function getAggregateKey() external override view returns (Key memory) {\n        return (_keyIDToKey[KeyID.Agg]);\n    }\n\n    /**\n     * @notice  Get the current governance key\n     * @return  The Key struct for the governance key\n     */\n    function getGovernanceKey() external override view returns (Key memory) {\n        return (_keyIDToKey[KeyID.Gov]);\n    }\n\n    /**\n     * @notice  Get the last time that a function was called which\n     *          required a signature from _aggregateKeyData or _governanceKeyData\n     * @return  The last time isValidSig was called, in unix time (uint)\n     */\n    function getLastValidateTime() external override view returns (uint) {\n        return _lastValidateTime;\n    }\n\n    /**\n     * @notice  Get whether or not the specific keyID has used this nonce before\n     *          since it cannot be used again\n     * @return  Whether the nonce has already been used (bool)\n     */\n    function isNonceUsedByKey(KeyID keyID, uint nonce) external override view returns (bool) {\n        return _keyToNoncesUsed[keyID][nonce];\n    }\n\n\n\n    //////////////////////////////////////////////////////////////\n    //                                                          //\n    //                          Modifiers                       //\n    //                                                          //\n    //////////////////////////////////////////////////////////////\n\n    /// @dev    Check that enough time has passed for setAggKeyWithGovKey. Needs\n    ///         to be done as a modifier so that it can happen before validSig\n    modifier validTime() {\n        require(block.timestamp - _lastValidateTime >= _AGG_KEY_TIMEOUT, \"KeyManager: not enough delay\");\n        _;\n    }\n\n    /// @dev    Call isValidSig\n    modifier validSig(\n        SigData calldata sigData,\n        bytes32 contractMsgHash,\n        KeyID keyID\n    ) {\n        require(isValidSig(sigData, contractMsgHash, keyID));\n        _;\n    }\n}\n",
  "sourceMap": "393:8605:13:-:0;;;1081:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1141:11;:22;;;;;;;:31;;:22;:31;;;;;;;;:22;:31;;;;-1:-1:-1;;1141:31:13;;;;;;;;-1:-1:-1;;;;;;1141:31:13;;;;-1:-1:-1;;;;;1141:31:13;;;;;;;;;;;;;1182:22;;;;:31;;:22;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1243:15;1223:35;;393:8605;;14:850:27;;123:4;111:9;106:3;102:19;98:30;95:2;;;145:5;138;131:20;95:2;182;176:9;224:4;212:17;;-1:-1:-1;;;;;244:34:27;;280:22;;;241:62;238:2;;;-1:-1:-1;;;326:35:27;;384:4;381:1;374:15;416:4;333:5;402:19;238:2;451:10;447:2;440:22;;480:6;471:15;;516:9;510:16;502:6;495:32;572:2;561:9;557:18;551:25;620:4;611:7;607:18;598:7;595:31;585:2;;640:1;637;630:12;585:2;672;660:15;;653:32;730:2;715:18;;709:25;-1:-1:-1;;;;;765:33:27;;753:46;;743:2;;813:1;810;803:12;743:2;845;833:15;;;;826:32;85:779;;-1:-1:-1;;85:779:27:o;869:370::-;;;1051:3;1039:9;1030:7;1026:23;1022:33;1019:2;;;1073:6;1065;1058:22;1019:2;1101:52;1145:7;1134:9;1101:52;:::i;:::-;1091:62;;1172:61;1225:7;1220:2;1209:9;1205:18;1172:61;:::i;:::-;1162:71;;1009:230;;;;;:::o;:::-;393:8605:13;;;;;;",
  "sourcePath": "contracts/KeyManager.sol",
  "type": "contract"
}