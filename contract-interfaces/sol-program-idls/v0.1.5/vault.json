{
  "version": "0.1.0",
  "name": "vault",
  "instructions": [
    {
      "name": "initialize",
      "accounts": [
        {
          "name": "dataAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "initializer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "newAggKey",
          "type": "publicKey"
        },
        {
          "name": "newGovKey",
          "type": "publicKey"
        }
      ],
      "programFunctionName": "initialize",
      "discriminator": "[175, 175, 109, 31, 13, 152, 155, 237]"
    },
    {
      "name": "rotateAggKey",
      "accounts": [
        {
          "name": "dataAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "aggKey",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "newAggKey",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "transferFunds",
          "type": "bool"
        }
      ],
      "programFunctionName": "rotate_agg_key",
      "discriminator": "[78, 81, 143, 171, 221, 165, 214, 139]"
    },
    {
      "name": "setGovKeyWithAggKey",
      "accounts": [
        {
          "name": "dataAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "aggKey",
          "isMut": false,
          "isSigner": true
        }
      ],
      "args": [
        {
          "name": "newGovKey",
          "type": "publicKey"
        }
      ],
      "programFunctionName": "set_gov_key_with_agg_key",
      "discriminator": "[66, 64, 58, 40, 15, 75, 215, 162]"
    },
    {
      "name": "fetchNative",
      "accounts": [
        {
          "name": "dataAccount",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "aggKey",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "pda",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "to",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "seed",
          "type": "bytes"
        },
        {
          "name": "bump",
          "type": "u8"
        }
      ],
      "programFunctionName": "fetch_native",
      "discriminator": "[142, 36, 101, 143, 108, 89, 41, 140]"
    },
    {
      "name": "transferTokens",
      "accounts": [
        {
          "name": "dataAccount",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "aggKey",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "pda",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "pdaAta",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "toTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "seed",
          "type": "bytes"
        },
        {
          "name": "bump",
          "type": "u8"
        },
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "decimals",
          "type": "u8"
        }
      ],
      "programFunctionName": "transfer_tokens",
      "discriminator": "[54, 180, 238, 175, 74, 85, 126, 188]"
    },
    {
      "name": "executeCcmNativeCall",
      "accounts": [
        {
          "name": "dataAccount",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "aggKey",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "receiverNative",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "cfReceiver",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructionSysvar",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "sourceChain",
          "type": "u32"
        },
        {
          "name": "sourceAddress",
          "type": "bytes"
        },
        {
          "name": "message",
          "type": "bytes"
        },
        {
          "name": "amount",
          "type": "u64"
        }
      ],
      "programFunctionName": "execute_ccm_native_call",
      "discriminator": "[125, 5, 11, 227, 128, 66, 224, 178]"
    },
    {
      "name": "executeCcmTokenCall",
      "accounts": [
        {
          "name": "dataAccount",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "aggKey",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "receiverTokenAccount",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "cfReceiver",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "instructionSysvar",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "sourceChain",
          "type": "u32"
        },
        {
          "name": "sourceAddress",
          "type": "bytes"
        },
        {
          "name": "message",
          "type": "bytes"
        },
        {
          "name": "amount",
          "type": "u64"
        }
      ],
      "programFunctionName": "execute_ccm_token_call",
      "discriminator": "[108, 184, 162, 123, 159, 222, 170, 35]"
    },
    {
      "name": "verifyAddressDerivation",
      "accounts": [],
      "args": [
        {
          "name": "seed",
          "type": "bytes"
        },
        {
          "name": "bump",
          "type": "u8"
        },
        {
          "name": "pda",
          "type": "publicKey"
        }
      ],
      "programFunctionName": "verify_address_derivation",
      "discriminator": "[220, 224, 226, 45, 138, 79, 66, 70]"
    }
  ],
  "accounts": [
    {
      "name": "DataAccount",
      "docs": [
        "* ****************************************************************************\n * *************************** IMPORTANT NOTE *********************************\n * ****************************************************************************\n * Upgrade Manager imports and reads this struct. If the vault is upgraded\n * and the DataAccount struct is modified we need to check the compatibility\n * with the new program. Also, if we were to ever upgrade this program and\n * create a new Data account in a different address, the upgrade manager could\n * use the old one, which would be problematic because it would read old keys.\n *\n * The easiest approach on upgrade is keeping the DataAccount unchanged and use\n * a new account struct for any new data that is required. Also, to not change\n * the DATA_ACCOUNT_SEED nor allow for a creation of multiple DataAccounts.\n *\n *\n *        DO NOT MODIFY THIS WITHOUT UNDERSTANDING THE CONSEQUENCES!\n * ****************************************************************************\n * ****************************************************************************"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "aggKey",
            "type": "publicKey"
          },
          {
            "name": "govKey",
            "type": "publicKey"
          }
        ]
      }
    }
  ],
  "events": [
    {
      "name": "AggKeyRotated",
      "fields": [
        {
          "name": "oldAggKey",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "newAggKey",
          "type": "publicKey",
          "index": false
        }
      ]
    }
  ]
}