# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.
#
# `git cliff -h` for help.
#
# USAGE FOR CHAINFLIP RELEASES:
#
# For example, assuming a new tag `0.9.3` containing commits `85654cc..HEAD`:
#
# `git cliff --prepend CHANGELOG.md --tag 0.9.3 85654cc..HEAD`
#
# Then edit and tidy up the CHANGELOG.md file and commit it.

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes included in each Chainflip release will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/chainflip-io/chainflip-backend" }, # replace repository URL
  { pattern = '<LINEAR>', replace = "https://linear.app/chainflip" },                    # replace Linear URLs
]
[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },            # Link github refs
  { pattern = '(WEB|PRO|PLA)-([0-9]+)', replace = "([${1}-${2}](<LINEAR>/issue/${1}-${2}))" }, # Link Linear refs
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks", skip = true },
  { message = "^ci", group = "CI" },
  { body = ".*security", group = "Security" },
  { message = "^revert", group = "Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "[0-9]+\\.[0-9]+\\.[0-9]+"
# regex for skipping tags
skip_tags = "[0-9]+\\.[0-9]+\\.[0-9]+-rc[0-9]+"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
