######################## Anchors ########################
only_main_branches: &only_main_branches
  filters:
    branches:
      only:
        - main
        - develop
        - /epic\/.*/
        - /release\/.*/
        # - update/epic-ci-1
ignore_main_branches: &ignore_main_branches
  filters:
    branches:
      ignore:
        - main
        - develop
        - /epic\/.*/
        - /release\/.*/
        # - update/epic-ci-1

auth: &dockerconfig
  username: $DOCKER_USERNAME
  password: $DOCKER_PASSWORD

cargo-base-job: &cargo-base-job
  executor: rust-base
  environment:
    SCCACHE_CACHE_SIZE: 14G
  resource_class: xlarge

######################## /Anchors ########################

######################## Config ########################
version: 2.1
executors:
  chainflip-master:
    docker:
      - image: ghcr.io/chainflip-io/chainflip-platform-monorepo/chainflip-master:latest
        auth: *dockerconfig
  rust-base:
    docker:
      - image: ghcr.io/chainflip-io/chainflip-backend/rust-base:nightly-2022-08-08
        auth: *dockerconfig
  rust-base-ci:
    docker:
      - image: ghcr.io/chainflip-io/chainflip-backend/rust-base:nightly-2022-08-08
        auth: *dockerconfig
        user: ci
  java-executor:
    docker:
      - image: cimg/openjdk:17.0.2
        auth: *dockerconfig
orbs:
  docker: circleci/docker@1.7.0
  discord: antonioned/discord@0.1.0
  gh: circleci/github-cli@1.0.4
  doctl: digitalocean/cli@0.1.1
  helm: circleci/helm@1.2.0
parameters:
  rust-base:
    type: boolean
    default: false
  build_testnet:
    type: boolean
    default: false
######################## /Config ########################

######################## Commands ########################
commands:
  install_gh_cli:
    parameters:
      version:
        default: 2.4.0
        type: string
    steps:
      - run: |
          wget https://github.com/cli/cli/releases/download/v<<parameters.version>>/gh_<<parameters.version>>_linux_amd64.tar.gz
          tar -xvf gh_<<parameters.version>>_linux_amd64.tar.gz
          mv ./gh_<<parameters.version>>_linux_amd64/bin/gh /usr/local/bin
  send_notification:
    parameters:
      failure_message:
        type: string
        default: ":red_circle: Pipeline failed for branch `<<pipeline.git.revision>>`"
      fail_only:
        type: boolean
        default: true
      only_for_branches:
        type: string
        default: "develop,main"
    steps:
      - discord/status:
          fail_only: <<parameters.fail_only>>
          failure_message: <<parameters.failure_message>>
          only_for_branches: <<parameters.only_for_branches>>
          webhook: $DW_ALERTS_STAGING
  merge_target:
    steps:
      - run:
          name: Merge target into your branch
          command: |
            # setup the github user
            git config --global user.email $( git log --format='%ae' $CIRCLE_SHA1^! )
            git config --global user.name $( git log --format='%an' $CIRCLE_SHA1^! )

            # if this is a PR, we extract the API URL to grab the PR as JSON from the Github API
            if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
              url="$(echo "$CIRCLE_PULL_REQUEST" | sed 's/github.com/api.github.com\/repos/' | sed 's/pull/pulls/')"
              target_branch=$(
                curl -H "Authorization: token $GITHUB_TOKEN" "$url" | jq '.base.ref' | tr -d '"'
              )
              echo "$target_branch"

              # this will fail if $target_branch is null
              # if it should pass, wrap this in `if [[ -n "$target_branch" ]]; then`
              git fetch && git merge origin/$target_branch --no-edit
            fi
######################## /Commands ########################

######################## Workflows ########################
workflows:
  chainflip-backend-non-blocking:
    jobs:
      - cargo-doc:
          context:
            - ghcr-credentials
            - github-credentials
      - update-cargo-audit-log:
          context:
            - ghcr-credentials
            - github-credentials
          <<: *only_main_branches

  chainflip-backend-checks:
    jobs:
      - cargo-clippy:
          requires:
            - cargo-fmt
          context:
            - ghcr-credentials
            - github-credentials
          <<: *ignore_main_branches

      # The follow jobs always run, regardless of PR or merge.
      - cargo-check:
          requires:
            - cargo-fmt
          context:
            - ghcr-credentials
            - github-credentials
      - cargo-fmt:
          context:
            - ghcr-credentials
            - github-credentials
      - cargo-build-and-test:
          requires:
            - cargo-fmt
          context:
            - ghcr-credentials
            - github-credentials
            - discord-webhooks
      - git-clone-docgen-repo:
          requires:
            - cargo-build-and-test
          context:
            - github-credentials
      - test-single-node:
          requires:
            - git-clone-docgen-repo
          context:
            - ghcr-credentials
            - infura-endpoints
      - docgen-store-artifacts:
          requires:
            - test-single-node
          context:
            - do-credentials

######################## /Workflows ########################

######################## Jobs ########################
jobs:
  docker-build:
    executor: docker/docker
    parameters:
      image:
        type: string
        description: Name of primary tag without the registry
        default: ""
      extra_build_args:
        type: string
        description: Any extra arguments to pass to the build
        default: ""
      dockerfile:
        type: string
        description: Location of the Dockerfile
        default: Dockerfile
      registry:
        type: string
        description: Registry of Docker images
        default: ghcr.io
      tag:
        type: string
        description: Primary tag of the build
        default: latest,<<pipeline.git.revision>>
      cache_from:
        type: string
        description: Where to derive the build cache
        default: ""
    steps:
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: ./
      - docker/check:
          docker-username: DOCKER_USERNAME
          registry: ghcr.io
      - docker/build:
          image: <<parameters.image>>
          registry: ghcr.io
          extra_build_args: <<parameters.extra_build_args>>
          dockerfile: <<parameters.dockerfile>>
          cache_from: <<parameters.cache_from>>
          tag: <<parameters.tag>>
      - docker/push:
          registry: ghcr.io
          image: <<parameters.image>>
          tag: <<parameters.tag>>

  cargo-build-and-test:
    executor: rust-base-ci
    resource_class: xlarge
    steps:
      - checkout
      - merge_target
      - run: sccache --show-stats
      - run: |
          cargo build --locked --release --features runtime-benchmarks
          sccache --show-stats
      - run: |
          cargo test --lib --locked --release --all-features
          sccache --show-stats
      - persist_to_workspace:
          root: ./
          paths:
            - target/release/chainflip-node
            - target/release/chainflip-engine
            - target/release/chainflip-cli
            - target/release/generate-genesis-keys
            - target/release/wbuild/state-chain-runtime/state_chain_runtime.wasm
      - send_notification:
          only_for_branches: "develop"

  cargo-fmt:
    executor: rust-base
    steps:
      - checkout
      - merge_target
      - run: >
          cargo fmt --all -- --check

  # Check and test the entire chainflip-backend.
  # We run sccache --show-stats multiple times;
  # First to check connection, and once after each
  # cargo function to track the performance of the compilation.
  cargo-check:
    <<: *cargo-base-job
    steps:
      - checkout
      - merge_target
      - run: sccache --show-stats
      - run:
          environment:
            RUSTFLAGS: -D warnings
          command: |
            cargo check --all-targets --all-features --locked --release
            sccache --show-stats

  cargo-test:
    <<: *cargo-base-job
    steps:
      - checkout
      - merge_target
      - run: sccache --show-stats
      - run: |
          cargo test --lib --locked --release
          sccache --show-stats

  cargo-clippy:
    <<: *cargo-base-job
    steps:
      - checkout
      - merge_target
      - run: sccache --show-stats
      # TODO: remove the global ignores (#1254)
      - run: |
          sh clippy.sh
          sccache --show-stats

  cargo-doc:
    <<: *cargo-base-job
    shell: /bin/bash # Circle's beautiful way of ignoring failures ðŸ™„
    steps:
      - checkout
      - merge_target
      - run: sccache --show-stats
      - run: |
          cargo doc --workspace --document-private-items --no-deps
          sccache --show-stats
      - store_artifacts:
          path: target/doc/

  update-cargo-audit-log:
    <<: *cargo-base-job
    shell: /bin/bash # Circle's beautiful way of ignoring failures ðŸ™„
    steps:
      - checkout
      - merge_target
      - install_gh_cli
      - run: sccache --show-stats
      - run: |
          cargo install --force cargo-audit
          cargo generate-lockfile
      - run: |
          apt-get install -y gettext
          wget https://github.com/cli/cli/releases/download/v2.4.0/gh_2.4.0_linux_amd64.tar.gz
          tar -xvf gh_2.4.0_linux_amd64.tar.gz
          cargo-audit audit --json > audit.json
          export advisory=$(cat audit.json | jq '.vulnerabilities.list[].advisory | {id,package,title,description,date,url}')
          export warnings=$(cat audit.json | jq '.warnings | keys[] as $k| .[$k] | .[] | {kind,package}')
          export date=$(date)
          cat .circleci/templates/audit-log.md | envsubst > /tmp/audit-log.md
          gh issue edit 1175 --body-file /tmp/audit-log.md

  git-clone-docgen-repo:
    resource_class: small
    docker:
      - image: "cimg/node:17.8.0"
    steps:
      - gh/setup
      - gh/clone:
          repo: https://github.com/chainflip-io/chainflip-docgen.git
          dir: chainflip-docgen
      - run: |
          cd chainflip-docgen
          npm install
      - persist_to_workspace:
          root: ./
          paths:
            - chainflip-docgen/*

  test-single-node:
    executor: chainflip-master
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Setup config
          command: |
            mkdir config
            echo -n $BASHFUL_SIGNING_KEY > signing_key_file
            echo -n $ETH_PRIVATE_KEY > eth_private_key_file
            echo -n $NODE_KEY > node_key_file
      - run:
          name: Start Node
          background: true
          command: ./target/release/chainflip-node --chain cf-dev --node-key-file=node_key_file
      - run:
          name: Check Node Health
          command: >
            curl --request POST -L
            -H "Content-Type:application/json;charset=utf-8"
            --data '{"id":1, "jsonrpc":"2.0", "method": "system_health"}'
            --url 'http://localhost:9933'
            --connect-timeout 5
            --max-time 10
            --retry 3
            --retry-delay 1
            --retry-max-time 20
            --retry-all-errors
            -vv
      - run:
          name: Start Engine
          background: true
          command: ./target/release/chainflip-engine --config-path engine/config/CI.toml
      - run:
          name: Check Engine Health
          command: >
            curl
            --url 'http://localhost:5555/health'
            --connect-timeout 5
            --max-time 10
            --retry 3
            --retry-delay 1
            --retry-max-time 20
            --retry-all-errors
            -vv
      - run:
          name: Generate State Chain docs
          command: |
            export WS_ENDPOINT="ws://localhost:9944"
            export TYPES_FILE="../state-chain/types.json"
            cd ./chainflip-docgen/
            npm run generate
      - persist_to_workspace:
          root: ./
          paths:
            - chainflip-docgen/*
      - store_artifacts:
          path: target/release

  docgen-store-artifacts:
    executor: java-executor
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Install graphviz
          command: |
            sudo apt-get update
            sudo apt-get install -y graphviz
      - run:
          name: Generate class diagram
          command: |
            cd ./chainflip-docgen/
            java -jar plantuml.jar generated/class.puml
      - store_artifacts:
          path: ./chainflip-docgen/generated
######################## /Jobs ########################
