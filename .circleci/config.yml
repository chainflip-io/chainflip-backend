######################## Anchors ########################
only_main_branches: &only_main_branches
  filters:
    branches:
      only:
        - main
        - develop
        - /epic\/.*/
        - /release\/.*/
        - update/epic-ci-1

auth: &dockerconfig
  username: $DOCKER_USERNAME
  password: $DOCKER_PASSWORD

cargo-base-job: &cargo-base-job
  executor: rust-base
  environment:
    SCCACHE_CACHE_SIZE: 14G
  resource_class: 2xlarge+
######################## /Anchors ########################


######################## Config ########################
version: 2.1
executors:
  chainflip-master:
    docker:
      - image: ghcr.io/chainflip-io/chainflip-infrastructure/chainflip-master:latest
        auth: *dockerconfig
  rust-base:
    docker:
      - image: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
        auth: *dockerconfig
  rust-poetry:
    docker:
      - image: ghcr.io/chainflip-io/chainflip-backend/rust-poetry:latest
        auth: *dockerconfig
orbs:
  docker: circleci/docker@1.7.0
  discord: antonioned/discord@0.1.0
  gh: circleci/github-cli@1.0.4
  doctl: digitalocean/cli@0.1.1
  helm: circleci/helm@1.2.0
parameters:
  rust-base:
    type: boolean
    default: false
######################## /Config ########################

######################## Workflows ########################
workflows:
  create-rust-base:
    when: <<pipeline.parameters.rust-base>>
    jobs:
      - build-docker-image:
          name: build-rust-base
          extra_build_args: "--build-arg NIGHTLY=nightly-2021-03-24"
          image: chainflip-io/chainflip-backend/rust-base
          tag: latest
          dockerfile: Dockerfile.rust-base
          cache_from: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
          context:
            - ghcr-credentials
      - build-docker-image:
          name: build-rust-poetry
          image: chainflip-io/chainflip-backend/rust-poetry
          cache_from: ghcr.io/chainflip-io/chainflip-backend/rust-poetry:latest
          tag: latest
          dockerfile: Dockerfile.rust-poetry
          context:
            - ghcr-credentials

  chainflip-backend-workflow:
    jobs:
      - clone-contracts-repo:
          context:
            - github-credentials
          <<: *only_main_branches
      - fmt-validator-package:
          context:
            - ghcr-credentials
      - cargo-clippy-validator-package:
          requires:
            - fmt-validator-package
          context:
            - ghcr-credentials
      - cargo-check-validator-package:
          requires:
            - fmt-validator-package
          context:
            - ghcr-credentials
      - cargo-test-validator-package:
          requires:
            - fmt-validator-package
          context:
            - ghcr-credentials
      - hold:
          type: approval
          requires:
            - clone-contracts-repo
            - fmt-validator-package
            - cargo-check-validator-package
            - cargo-clippy-validator-package
            - cargo-test-validator-package
      - cargo-build-and-test-validator-package:
          requires:
            - fmt-validator-package
            - clone-contracts-repo
          context:
            - ghcr-credentials
            - discord-webhooks
      - cargo-doc-validator-package:
          requires:
            - fmt-validator-package
          context:
            - ghcr-credentials
      - test-single-node:
          requires:
            - cargo-build-and-test-validator-package
          context:
            - ghcr-credentials
            - do-credentials
            - infura-endpoints
            - aws-credentials
      - build-docker-image:
          name: build-chainflip-engine
          image: chainflip-io/chainflip-backend/chainflip-engine
          cache_from: ghcr.io/chainflip-io/chainflip-backend/chainflip-engine:latest
          extra_build_args: "--build-arg SERVICE=chainflip-engine --build-arg REV=<<pipeline.git.revision>>"
          requires:
            - cargo-build-and-test-validator-package
          context:
            - ghcr-credentials
          <<: *only_main_branches
      - build-docker-image:
          name: build-state-chain-node
          image: chainflip-io/chainflip-backend/state-chain-node
          cache_from: ghcr.io/chainflip-io/chainflip-backend/state-chain-node:latest
          extra_build_args: "--build-arg SERVICE=state-chain-node --build-arg REV=<<pipeline.git.revision>>"
          requires:
            - cargo-build-and-test-validator-package
          context:
            - ghcr-credentials
          <<: *only_main_branches


######################## /Workflows ########################

######################## Jobs ########################
jobs:
  build-docker-image:
    executor: docker/docker
    working_directory: /mnt/ramdisk
    parameters:
      image:
        type: string
        description: Name of primary tag without the registry
        default: ""
      extra_build_args:
        type: string
        description: Any extra arguments to pass to the build
        default: ""
      dockerfile:
        type: string
        description: Location of the Dockerfile
        default: Dockerfile
      registry:
        type: string
        description: Registry of Docker images
        default: ghcr.io
      tag:
        type: string
        description: Primary tag of the build
        default: latest,<<pipeline.git.revision>>
      cache_from:
        type: string
        description: Where to derive the build cache
        default: ""
    steps:
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: ./
      - docker/check:
          docker-username: DOCKER_USERNAME
          registry: ghcr.io
      - docker/build:
          image: <<parameters.image>>
          registry: ghcr.io
          extra_build_args: <<parameters.extra_build_args>>
          dockerfile: <<parameters.dockerfile>>
          cache_from: <<parameters.cache_from>>
          tag: <<parameters.tag>>
      - docker/push:
          registry: ghcr.io
          image: <<parameters.image>>
          tag: <<parameters.tag>>

  fmt-validator-package:
    executor: rust-base
    resource_class: small
    steps:
      - checkout
      - run: >
          cargo fmt --all -- --check

  # Compile and test the entire chainflip-backend.
  # We run sccache --show-stats multiple times;
  # First to check connection, and once after each
  # cargo function to track the performance of the compilation.
  cargo-build-and-test-validator-package-integration:
    <<: *cargo-base-job
    executor: rust-poetry
    steps:
      - checkout
      - run: git merge develop
      - attach_workspace:
          at: ./
      - run: sccache --show-stats
      - run:
          name: Install dependencies & run Hardhat network
          background: true
          command: |
            cd eth-contracts
            npm install
            npx hardhat node
      - run:
          name: Install dependencies & deploy contracts
          background: true
          command: |
            cd eth-contracts
            poetry install --quiet
            poetry run brownie run deploy_and all_events --network hardhat
      - run: |
          cargo build --locked --release
          sccache --show-stats
      - run: |
          cargo test --locked --release
          sccache --show-stats
      - persist_to_workspace:
          root: ./
          paths:
            - target/release/state-chain-node
            - target/release/chainflip-engine
      - discord/status:
          fail_only: true
          failure_message: ":red_circle: Build failure on $CIRCLE_BRANCH | $CIRCLE_BUILD_URL"
          only_for_branches: "develop,main"
          webhook: $DW_ALERTS_STAGING

  cargo-build-and-test-validator-package:
    <<: *cargo-base-job
    executor: rust-poetry
    steps:
      - checkout
      - run: git merge develop
      - run: sccache --show-stats
      - run: |
          cargo build --locked --release
          sccache --show-stats
      - run: |
          cargo test --lib --locked --release
          sccache --show-stats
      - persist_to_workspace:
          root: ./
          paths:
            - target/release/state-chain-node
            - target/release/chainflip-engine

  # Check and test the entire chainflip-backend.
  # We run sccache --show-stats multiple times;
  # First to check connection, and once after each
  # cargo function to track the performance of the compilation.
  cargo-check-validator-package:
    <<: *cargo-base-job
    steps:
      - checkout
      - run: sccache --show-stats
      - run: |
          cargo check --locked --release
          sccache --show-stats
  cargo-test-validator-package:
    <<: *cargo-base-job
    steps:
      - checkout
      - run: sccache --show-stats
      - run: |
          cargo test --lib --locked --release
          sccache --show-stats
  cargo-clippy-validator-package:
    <<: *cargo-base-job
    steps:
      - checkout
      - run: sccache --show-stats
      - run: |
          cargo clippy
          sccache --show-stats

  cargo-doc-validator-package:
    <<: *cargo-base-job
    shell: /bin/bash # Circle's beautiful way of ignoring failures ðŸ™„
    steps:
      - checkout
      - run: sccache --show-stats
      - run: |
          cargo doc --workspace --document-private-items --no-deps
          sccache --show-stats
      - store_artifacts:
          path: target/doc/

  clone-contracts-repo:
    resource_class: small
    docker:
      - image: "cimg/base:stable"
    steps:
      - gh/setup
      - gh/clone:
          repo: https://github.com/chainflip-io/chainflip-eth-contracts.git
          dir: eth-contracts
      - persist_to_workspace:
          root: ./
          paths:
            - eth-contracts/*

  run-integration-tests:
    resource_class: xlarge
    executor: rust-poetry
    environment:
      SCCACHE_CACHE_SIZE: 14G
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies & run Hardhat network
          background: true
          command: |
            cd eth-contracts
            npm install
            npx hardhat node
      - run:
          name: Install poetry dependencies and deploy contracts
          command: |
            cd eth-contracts
            poetry install --quiet
            poetry run brownie run deploy_and all_events --network hardhat
      - run: sccache --show-stats
      - run: cargo test --locked --release
      - discord/status:
          fail_only: true
          failure_message: ":red_circle: Integration tests have failed"
          only_for_branches: "develop"
          webhook: $DW_ALERTS_STAGING

  test-single-node:
    parameters:
      cluster_name:
        description: Name of the cluster to authenticate to
        type: string
        default: cluster-staging
    executor: chainflip-master
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Setup config
          command: |
            mkdir config
            sops -d Default.enc.toml > config/Default.toml
            echo -n $BASHFUL_SIGNING_KEY > signing_key_file
            echo -n $ETH_PRIVATE_KEY > private_key_file
      - run:
          name: Start Node
          background: true
          command: ./target/release/state-chain-node --chain cf-dev
      - run: sleep 3
      - run:
          name: Start Engine
          background: true
          command: ./target/release/chainflip-engine
      - run: sleep 3
      - run:
          name: Check Node Health
          command: >
            curl --request POST -L
            -H "Content-Type:application/json;charset=utf-8"
            --data '{"id":1, "jsonrpc":"2.0", "method": "system_health"}'
            --url 'http://localhost:9933'
            -vv
      - run:
          name: Check Engine Health
          command: >
            curl
            --url 'http://localhost:5555/health'
            -vv
      - store_artifacts:
          path: target/release
######################## /Jobs ########################
