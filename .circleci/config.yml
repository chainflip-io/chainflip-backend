# ------------------- anchors ------------------- #
ignore_main_branches: &ignore_main_branches
  filters:
    branches:
      ignore:
        - main
        - develop
        - /epic\/.*/
        - /release\/.*/
        # Uncomment and add your current branch when testing
#        - update/epic-ci
only_main_branches: &only_main_branches
  filters:
    branches:
      only:
        - main
        - develop
        - /epic\/.*/
        - /release\/.*/

only_epic_branches: &only_epic_branches
  filters:
    branches:
      only:
        # Uncomment and add your current branch when testing
        # - update/epic-ci
        - /epic\/.*/
        - /release\/.*/

nightly: &nightly
  triggers:
    - schedule:
        cron: "0 0 * * *"
        filters:
          branches:
            only:
              - develop

auth: &dockerconfig
  username: $DOCKER_USERNAME
  password: $DOCKER_PASSWORD

cargo-base-job: &cargo-base-job
  circleci_ip_ranges: true
  executor: rust-base
  environment: &sccache_environment
    SCCACHE_REDIS: redis://sccache.chainflip.xyz
    SCCACHE_CACHE_SIZE: 14G
  resource_class: xlarge

# ------------------- anchors ------------------- #

version: 2.1
executors:
  chainflip-master:
    docker:
      - image: ghcr.io/chainflip-io/infrastructure/chainflip-master:latest
        auth: *dockerconfig
  rust-base:
    docker:
      - image: ghcr.io/chainflip-io/chainflip-backend/rust-base:latest
        auth: *dockerconfig
orbs:
  docker: circleci/docker@1.7.0
  discord: antonioned/discord@0.1.0
  gh: circleci/github-cli@1.0.4
  doctl: digitalocean/cli@0.1.1
  helm: circleci/helm@1.2.0
workflows:
  chainflip-backend-checks:
    jobs:
      - build-docker-image:
          name: build-rust-base
          image: chainflip-io/chainflip-backend/rust-base
          tag: latest
          dockerfile: Dockerfile.rust-base
          context:
            - ghcr-credentials
          <<: *ignore_main_branches
      - fmt-validator-package:
          requires:
            - build-rust-base
          context:
            - ghcr-credentials
          <<: *ignore_main_branches
      - check-validator-package:
          requires:
            - fmt-validator-package
          context:
            - ghcr-credentials
          <<: *ignore_main_branches
      - test-validator-package:
          requires:
            - fmt-validator-package
          context:
            - ghcr-credentials
          <<: *ignore_main_branches
  chainflip-backend-release:
    jobs:
      - build-docker-image:
          name: build-rust-base
          image: chainflip-io/chainflip-backend/rust-base
          tag: latest
          dockerfile: Dockerfile.rust-base
          context:
            - ghcr-credentials
          <<: *only_main_branches
      - fmt-validator-package:
          requires:
            - build-rust-base
          context:
            - ghcr-credentials
          <<: *only_main_branches
      - compile-validator-package:
          requires:
            - fmt-validator-package
          context:
            - ghcr-credentials
            - discord-webhooks
          <<: *only_main_branches
      - test-validator-package:
          requires:
            - compile-validator-package
          context:
            - ghcr-credentials
          <<: *only_main_branches
      - build-docker-image:
          name: build-chainflip-engine
          image: chainflip-io/chainflip-backend/chainflip-engine
          extra_build_args: "--build-arg SERVICE=chainflip-engine"
          requires:
            - test-validator-package
          context:
            - ghcr-credentials
          <<: *only_main_branches
      - build-docker-image:
          name: build-state-chain-node
          image: chainflip-io/chainflip-backend/state-chain-node
          extra_build_args: "--build-arg SERVICE=state-chain-node"
          requires:
            - test-validator-package
          context:
            - ghcr-credentials
          <<: *only_main_branches
      - test-single-node:
          requires:
            - build-chainflip-engine
            - build-state-chain-node
          context:
            - ghcr-credentials
            - do-credentials
          <<: *only_epic_branches

  chainflip-integration-tests:
    <<: *nightly
    jobs:
      - build-docker-image:
          image: chainflip-io/chainflip-backend/rust-poetry
          tag: latest
          dockerfile: Dockerfile.rust-poetry
          context:
            - ghcr-credentials
      - clone-contracts-repo:
          context:
            - github-credentials
          requires:
            - build-docker-image
      - run-integration-tests:
          context:
            - ghcr-credentials
            - discord-webhooks
          requires:
            - clone-contracts-repo

jobs:
  build-docker-image:
    executor: docker/docker
    working_directory: /mnt/ramdisk
    parameters:
      image:
        type: string
        description: Name of primary tag without the registry
        default: ""
      extra_build_args:
        type: string
        description: Any extra arguments to pass to the build
        default: ""
      dockerfile:
        type: string
        description: Location of the Dockerfile
        default: Dockerfile
      registry:
        type: string
        description: Registry of Docker images
        default: ghcr.io
      tag:
        type: string
        description: Primary tag of the build
        default: <<pipeline.git.revision>>
    steps:
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: ./
      - docker/check:
          docker-username: DOCKER_USERNAME
          registry: ghcr.io
      - docker/build:
          image: <<parameters.image>>
          registry: ghcr.io
          extra_build_args: <<parameters.extra_build_args>>
          dockerfile: <<parameters.dockerfile>>
          cache_from: ghcr.io/<<parameters.image>>:latest
          tag: <<parameters.tag>>
      - docker/push:
          registry: ghcr.io
          image: <<parameters.image>>
          tag: <<parameters.tag>>

  fmt-validator-package:
    executor: rust-base
    resource_class: small
    steps:
      - checkout
      - run: >
          cargo fmt -p chainflip-engine
          -p cf-p2p
          -p cf-p2p-rpc
          -p pallet-cf-auction
          -p pallet-cf-emissions
          -p pallet-cf-flip
          -p pallet-cf-rewards
          -p pallet-cf-reputation
          -p pallet-cf-staking
          -p pallet-cf-validator
          -p pallet-cf-vaults
          -p pallet-cf-witnesser
          -p pallet-cf-witnesser-api
          -p cf-traits
          -- --check

  check-validator-package:
    <<: *cargo-base-job
    steps:
      - checkout
      - run: sccache -s
      - run: |
          cargo check --locked --release
          sccache -s

  test-validator-package:
    <<: *cargo-base-job
    steps:
      - checkout
      - run: sccache -s
      - run: |
          cargo test --locked --lib --release
          sccache -s

  compile-validator-package:
    <<: *cargo-base-job
    steps:
      - checkout
      - run: sccache -s
      - run: |
          cargo build --locked --release
          sccache -s
      - persist_to_workspace:
          root: ./
          paths:
            - target/release/state-chain-node
            - target/release/chainflip-engine
      - discord/status:
          fail_only: true
          failure_message: ":red_circle: Build failure on $CIRCLE_BRANCH | $CIRCLE_BUILD_URL"
          only_for_branches: "develop,main"
          webhook: $DW_ALERTS_STAGING

  clone-contracts-repo:
    resource_class: small
    docker:
      - image: "cimg/base:stable"
    steps:
      - gh/setup
      - gh/clone:
          repo: https://github.com/chainflip-io/chainflip-eth-contracts.git
          dir: eth-contracts
      - persist_to_workspace:
          root: ./
          paths:
            - eth-contracts

  run-integration-tests:
    resource_class: xlarge
    circleci_ip_ranges: true
    docker:
      - image: ghcr.io/chainflip-io/chainflip-backend/rust-poetry:latest
        auth: *dockerconfig
      - image: nats
    environment:
      SCCACHE_REDIS: redis://sccache.chainflip.xyz
      SCCACHE_CACHE_SIZE: 14G
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies & run Hardhat network
          background: true
          command: |
            cd eth-contracts
            npm install
            npx hardhat node
      - run:
          name: Install poetry dependencies and deploy contracts
          command: |
            cd eth-contracts
            poetry install --quiet
            poetry run brownie run deploy_and all_events --network hardhat
      - run: sccache -s
      - run: cargo test --locked --release
      - discord/status:
          fail_only: true
          failure_message: ":red_circle: Integration tests have failed"
          only_for_branches: "develop"
          webhook: $DW_ALERTS_STAGING

  test-single-node:
    parameters:
      cluster_name:
        description: Name of the cluster to authenticate to
        type: string
        default: cluster-staging
    resource_class: small
    executor: chainflip-master
    steps:
      - doctl/initialize
      - run: doctl kubernetes cluster kubeconfig save <<parameters.cluster_name>>
      - run:
          name: Port-forward into cluster
          background: true
          command: kubectl port-forward -n chartmuseum service/chartmuseum 8080
      - run: sleep 5
      - run: helm repo add chainflip http://localhost:8080
      - run:
          name: Install bashful single node
          command: >
            helm install bashful chainflip/chainflip-validator
            --namespace default
            --set state-chain-node.nodeType=validator
            --set state-chain-node.image.tag="<<pipeline.git.revision>>"
            --set "state-chain-node.stateChainNode.extraArgs={--rpc-external,--rpc-cors,all}"
            --set chainflip-engine.image.tag="<<pipeline.git.revision>>"
            --wait
            --wait-for-jobs
      - run:
          name: Test single node
          command: helm test bashful -n default
      - run:
          name: Dump logs (state-chain-node)
          when: always
          command: kubectl logs -l app.kubernetes.io/name=state-chain-node
      - run:
          name: Dump logs (chainflip-engine)
          when: always
          command: kubectl logs -l app.kubernetes.io/name=chainflip-engine
      - run:
          name: Destroy single node
          when: always
          command: helm uninstall bashful -n default